-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: redshift

local common = require("nvim-aws.common")

--- AWS redshift service functions
local M = {}

--- AWS redshift accept-reserved-node-exchange operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.accept_reserved_node_exchange(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "accept-reserved-node-exchange" }, input, callbacks)
end

--- AWS redshift add-partner operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.add_partner(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "add-partner" }, input, callbacks)
end

--- AWS redshift associate-data-share-consumer operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.associate_data_share_consumer(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "associate-data-share-consumer" }, input, callbacks)
end

--- AWS redshift authorize-cluster-security-group-ingress operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.authorize_cluster_security_group_ingress(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "authorize-cluster-security-group-ingress" }, input, callbacks)
end

--- AWS redshift authorize-data-share operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.authorize_data_share(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "authorize-data-share" }, input, callbacks)
end

--- AWS redshift authorize-endpoint-access operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.authorize_endpoint_access(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "authorize-endpoint-access" }, input, callbacks)
end

--- AWS redshift authorize-snapshot-access operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.authorize_snapshot_access(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "authorize-snapshot-access" }, input, callbacks)
end

--- AWS redshift batch-delete-cluster-snapshots operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.batch_delete_cluster_snapshots(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "batch-delete-cluster-snapshots" }, input, callbacks)
end

--- AWS redshift batch-modify-cluster-snapshots operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.batch_modify_cluster_snapshots(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "batch-modify-cluster-snapshots" }, input, callbacks)
end

--- AWS redshift cancel-resize operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.cancel_resize(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "cancel-resize" }, input, callbacks)
end

--- AWS redshift copy-cluster-snapshot operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.copy_cluster_snapshot(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "copy-cluster-snapshot" }, input, callbacks)
end

--- AWS redshift create-authentication-profile operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_authentication_profile(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-authentication-profile" }, input, callbacks)
end

--- AWS redshift create-cluster operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_cluster(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-cluster" }, input, callbacks)
end

--- AWS redshift create-cluster-parameter-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_cluster_parameter_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-cluster-parameter-group" }, input, callbacks)
end

--- AWS redshift create-cluster-security-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_cluster_security_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-cluster-security-group" }, input, callbacks)
end

--- AWS redshift create-cluster-snapshot operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_cluster_snapshot(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-cluster-snapshot" }, input, callbacks)
end

--- AWS redshift create-cluster-subnet-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_cluster_subnet_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-cluster-subnet-group" }, input, callbacks)
end

--- AWS redshift create-custom-domain-association operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_custom_domain_association(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-custom-domain-association" }, input, callbacks)
end

--- AWS redshift create-endpoint-access operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_endpoint_access(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-endpoint-access" }, input, callbacks)
end

--- AWS redshift create-event-subscription operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_event_subscription(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-event-subscription" }, input, callbacks)
end

--- AWS redshift create-hsm-client-certificate operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_hsm_client_certificate(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-hsm-client-certificate" }, input, callbacks)
end

--- AWS redshift create-hsm-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_hsm_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-hsm-configuration" }, input, callbacks)
end

--- AWS redshift create-integration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_integration(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-integration" }, input, callbacks)
end

--- AWS redshift create-redshift-idc-application operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_redshift_idc_application(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-redshift-idc-application" }, input, callbacks)
end

--- AWS redshift create-scheduled-action operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_scheduled_action(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-scheduled-action" }, input, callbacks)
end

--- AWS redshift create-snapshot-copy-grant operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_snapshot_copy_grant(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-snapshot-copy-grant" }, input, callbacks)
end

--- AWS redshift create-snapshot-schedule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_snapshot_schedule(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-snapshot-schedule" }, input, callbacks)
end

--- AWS redshift create-tags operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_tags(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-tags" }, input, callbacks)
end

--- AWS redshift create-usage-limit operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_usage_limit(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "create-usage-limit" }, input, callbacks)
end

--- AWS redshift deauthorize-data-share operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.deauthorize_data_share(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "deauthorize-data-share" }, input, callbacks)
end

--- AWS redshift delete-authentication-profile operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_authentication_profile(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-authentication-profile" }, input, callbacks)
end

--- AWS redshift delete-cluster operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_cluster(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-cluster" }, input, callbacks)
end

--- AWS redshift delete-cluster-parameter-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_cluster_parameter_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-cluster-parameter-group" }, input, callbacks)
end

--- AWS redshift delete-cluster-security-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_cluster_security_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-cluster-security-group" }, input, callbacks)
end

--- AWS redshift delete-cluster-snapshot operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_cluster_snapshot(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-cluster-snapshot" }, input, callbacks)
end

--- AWS redshift delete-cluster-subnet-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_cluster_subnet_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-cluster-subnet-group" }, input, callbacks)
end

--- AWS redshift delete-custom-domain-association operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_custom_domain_association(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-custom-domain-association" }, input, callbacks)
end

--- AWS redshift delete-endpoint-access operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_endpoint_access(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-endpoint-access" }, input, callbacks)
end

--- AWS redshift delete-event-subscription operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_event_subscription(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-event-subscription" }, input, callbacks)
end

--- AWS redshift delete-hsm-client-certificate operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_hsm_client_certificate(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-hsm-client-certificate" }, input, callbacks)
end

--- AWS redshift delete-hsm-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_hsm_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-hsm-configuration" }, input, callbacks)
end

--- AWS redshift delete-integration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_integration(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-integration" }, input, callbacks)
end

--- AWS redshift delete-partner operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_partner(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-partner" }, input, callbacks)
end

--- AWS redshift delete-redshift-idc-application operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_redshift_idc_application(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-redshift-idc-application" }, input, callbacks)
end

--- AWS redshift delete-resource-policy operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_resource_policy(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-resource-policy" }, input, callbacks)
end

--- AWS redshift delete-scheduled-action operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_scheduled_action(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-scheduled-action" }, input, callbacks)
end

--- AWS redshift delete-snapshot-copy-grant operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_snapshot_copy_grant(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-snapshot-copy-grant" }, input, callbacks)
end

--- AWS redshift delete-snapshot-schedule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_snapshot_schedule(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-snapshot-schedule" }, input, callbacks)
end

--- AWS redshift delete-tags operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_tags(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-tags" }, input, callbacks)
end

--- AWS redshift delete-usage-limit operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_usage_limit(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "delete-usage-limit" }, input, callbacks)
end

--- AWS redshift deregister-namespace operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.deregister_namespace(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "deregister-namespace" }, input, callbacks)
end

--- AWS redshift describe-account-attributes operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_account_attributes(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-account-attributes" }, input, callbacks)
end

--- AWS redshift describe-authentication-profiles operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_authentication_profiles(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-authentication-profiles" }, input, callbacks)
end

--- AWS redshift describe-cluster-db-revisions operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_cluster_db_revisions(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-cluster-db-revisions" }, input, callbacks)
end

--- AWS redshift describe-cluster-parameter-groups operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_cluster_parameter_groups(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-cluster-parameter-groups" }, input, callbacks)
end

--- AWS redshift describe-cluster-parameters operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_cluster_parameters(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-cluster-parameters" }, input, callbacks)
end

--- AWS redshift describe-cluster-security-groups operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_cluster_security_groups(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-cluster-security-groups" }, input, callbacks)
end

--- AWS redshift describe-cluster-snapshots operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_cluster_snapshots(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-cluster-snapshots" }, input, callbacks)
end

--- AWS redshift describe-cluster-subnet-groups operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_cluster_subnet_groups(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-cluster-subnet-groups" }, input, callbacks)
end

--- AWS redshift describe-cluster-tracks operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_cluster_tracks(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-cluster-tracks" }, input, callbacks)
end

--- AWS redshift describe-cluster-versions operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_cluster_versions(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-cluster-versions" }, input, callbacks)
end

--- AWS redshift describe-clusters operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_clusters(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-clusters" }, input, callbacks)
end

--- AWS redshift describe-custom-domain-associations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_custom_domain_associations(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-custom-domain-associations" }, input, callbacks)
end

--- AWS redshift describe-data-shares operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_data_shares(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-data-shares" }, input, callbacks)
end

--- AWS redshift describe-data-shares-for-consumer operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_data_shares_for_consumer(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-data-shares-for-consumer" }, input, callbacks)
end

--- AWS redshift describe-data-shares-for-producer operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_data_shares_for_producer(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-data-shares-for-producer" }, input, callbacks)
end

--- AWS redshift describe-default-cluster-parameters operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_default_cluster_parameters(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-default-cluster-parameters" }, input, callbacks)
end

--- AWS redshift describe-endpoint-access operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_endpoint_access(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-endpoint-access" }, input, callbacks)
end

--- AWS redshift describe-endpoint-authorization operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_endpoint_authorization(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-endpoint-authorization" }, input, callbacks)
end

--- AWS redshift describe-event-categories operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_event_categories(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-event-categories" }, input, callbacks)
end

--- AWS redshift describe-event-subscriptions operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_event_subscriptions(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-event-subscriptions" }, input, callbacks)
end

--- AWS redshift describe-events operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_events(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-events" }, input, callbacks)
end

--- AWS redshift describe-hsm-client-certificates operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_hsm_client_certificates(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-hsm-client-certificates" }, input, callbacks)
end

--- AWS redshift describe-hsm-configurations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_hsm_configurations(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-hsm-configurations" }, input, callbacks)
end

--- AWS redshift describe-inbound-integrations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_inbound_integrations(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-inbound-integrations" }, input, callbacks)
end

--- AWS redshift describe-integrations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_integrations(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-integrations" }, input, callbacks)
end

--- AWS redshift describe-logging-status operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_logging_status(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-logging-status" }, input, callbacks)
end

--- AWS redshift describe-node-configuration-options operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_node_configuration_options(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-node-configuration-options" }, input, callbacks)
end

--- AWS redshift describe-orderable-cluster-options operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_orderable_cluster_options(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-orderable-cluster-options" }, input, callbacks)
end

--- AWS redshift describe-partners operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_partners(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-partners" }, input, callbacks)
end

--- AWS redshift describe-redshift-idc-applications operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_redshift_idc_applications(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-redshift-idc-applications" }, input, callbacks)
end

--- AWS redshift describe-reserved-node-exchange-status operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_reserved_node_exchange_status(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-reserved-node-exchange-status" }, input, callbacks)
end

--- AWS redshift describe-reserved-node-offerings operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_reserved_node_offerings(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-reserved-node-offerings" }, input, callbacks)
end

--- AWS redshift describe-reserved-nodes operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_reserved_nodes(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-reserved-nodes" }, input, callbacks)
end

--- AWS redshift describe-resize operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_resize(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-resize" }, input, callbacks)
end

--- AWS redshift describe-scheduled-actions operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_scheduled_actions(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-scheduled-actions" }, input, callbacks)
end

--- AWS redshift describe-snapshot-copy-grants operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_snapshot_copy_grants(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-snapshot-copy-grants" }, input, callbacks)
end

--- AWS redshift describe-snapshot-schedules operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_snapshot_schedules(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-snapshot-schedules" }, input, callbacks)
end

--- AWS redshift describe-storage operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_storage(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-storage" }, input, callbacks)
end

--- AWS redshift describe-table-restore-status operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_table_restore_status(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-table-restore-status" }, input, callbacks)
end

--- AWS redshift describe-tags operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_tags(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-tags" }, input, callbacks)
end

--- AWS redshift describe-usage-limits operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_usage_limits(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "describe-usage-limits" }, input, callbacks)
end

--- AWS redshift disable-logging operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.disable_logging(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "disable-logging" }, input, callbacks)
end

--- AWS redshift disable-snapshot-copy operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.disable_snapshot_copy(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "disable-snapshot-copy" }, input, callbacks)
end

--- AWS redshift disassociate-data-share-consumer operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.disassociate_data_share_consumer(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "disassociate-data-share-consumer" }, input, callbacks)
end

--- AWS redshift enable-logging operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.enable_logging(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "enable-logging" }, input, callbacks)
end

--- AWS redshift enable-snapshot-copy operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.enable_snapshot_copy(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "enable-snapshot-copy" }, input, callbacks)
end

--- AWS redshift failover-primary-compute operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.failover_primary_compute(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "failover-primary-compute" }, input, callbacks)
end

--- AWS redshift get-cluster-credentials operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_cluster_credentials(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "get-cluster-credentials" }, input, callbacks)
end

--- AWS redshift get-cluster-credentials-with-iam operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_cluster_credentials_with_iam(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "get-cluster-credentials-with-iam" }, input, callbacks)
end

--- AWS redshift get-reserved-node-exchange-configuration-options operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_reserved_node_exchange_configuration_options(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "get-reserved-node-exchange-configuration-options" }, input, callbacks)
end

--- AWS redshift get-reserved-node-exchange-offerings operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_reserved_node_exchange_offerings(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "get-reserved-node-exchange-offerings" }, input, callbacks)
end

--- AWS redshift get-resource-policy operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_resource_policy(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "get-resource-policy" }, input, callbacks)
end

--- AWS redshift list-recommendations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_recommendations(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "list-recommendations" }, input, callbacks)
end

--- AWS redshift modify-aqua-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_aqua_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-aqua-configuration" }, input, callbacks)
end

--- AWS redshift modify-authentication-profile operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_authentication_profile(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-authentication-profile" }, input, callbacks)
end

--- AWS redshift modify-cluster operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_cluster(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-cluster" }, input, callbacks)
end

--- AWS redshift modify-cluster-db-revision operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_cluster_db_revision(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-cluster-db-revision" }, input, callbacks)
end

--- AWS redshift modify-cluster-iam-roles operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_cluster_iam_roles(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-cluster-iam-roles" }, input, callbacks)
end

--- AWS redshift modify-cluster-maintenance operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_cluster_maintenance(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-cluster-maintenance" }, input, callbacks)
end

--- AWS redshift modify-cluster-parameter-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_cluster_parameter_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-cluster-parameter-group" }, input, callbacks)
end

--- AWS redshift modify-cluster-snapshot operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_cluster_snapshot(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-cluster-snapshot" }, input, callbacks)
end

--- AWS redshift modify-cluster-snapshot-schedule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_cluster_snapshot_schedule(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-cluster-snapshot-schedule" }, input, callbacks)
end

--- AWS redshift modify-cluster-subnet-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_cluster_subnet_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-cluster-subnet-group" }, input, callbacks)
end

--- AWS redshift modify-custom-domain-association operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_custom_domain_association(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-custom-domain-association" }, input, callbacks)
end

--- AWS redshift modify-endpoint-access operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_endpoint_access(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-endpoint-access" }, input, callbacks)
end

--- AWS redshift modify-event-subscription operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_event_subscription(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-event-subscription" }, input, callbacks)
end

--- AWS redshift modify-integration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_integration(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-integration" }, input, callbacks)
end

--- AWS redshift modify-redshift-idc-application operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_redshift_idc_application(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-redshift-idc-application" }, input, callbacks)
end

--- AWS redshift modify-scheduled-action operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_scheduled_action(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-scheduled-action" }, input, callbacks)
end

--- AWS redshift modify-snapshot-copy-retention-period operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_snapshot_copy_retention_period(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-snapshot-copy-retention-period" }, input, callbacks)
end

--- AWS redshift modify-snapshot-schedule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_snapshot_schedule(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-snapshot-schedule" }, input, callbacks)
end

--- AWS redshift modify-usage-limit operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.modify_usage_limit(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "modify-usage-limit" }, input, callbacks)
end

--- AWS redshift pause-cluster operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.pause_cluster(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "pause-cluster" }, input, callbacks)
end

--- AWS redshift purchase-reserved-node-offering operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.purchase_reserved_node_offering(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "purchase-reserved-node-offering" }, input, callbacks)
end

--- AWS redshift put-resource-policy operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.put_resource_policy(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "put-resource-policy" }, input, callbacks)
end

--- AWS redshift reboot-cluster operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.reboot_cluster(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "reboot-cluster" }, input, callbacks)
end

--- AWS redshift register-namespace operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.register_namespace(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "register-namespace" }, input, callbacks)
end

--- AWS redshift reject-data-share operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.reject_data_share(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "reject-data-share" }, input, callbacks)
end

--- AWS redshift reset-cluster-parameter-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.reset_cluster_parameter_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "reset-cluster-parameter-group" }, input, callbacks)
end

--- AWS redshift resize-cluster operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.resize_cluster(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "resize-cluster" }, input, callbacks)
end

--- AWS redshift restore-from-cluster-snapshot operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.restore_from_cluster_snapshot(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "restore-from-cluster-snapshot" }, input, callbacks)
end

--- AWS redshift restore-table-from-cluster-snapshot operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.restore_table_from_cluster_snapshot(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "restore-table-from-cluster-snapshot" }, input, callbacks)
end

--- AWS redshift resume-cluster operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.resume_cluster(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "resume-cluster" }, input, callbacks)
end

--- AWS redshift revoke-cluster-security-group-ingress operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.revoke_cluster_security_group_ingress(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "revoke-cluster-security-group-ingress" }, input, callbacks)
end

--- AWS redshift revoke-endpoint-access operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.revoke_endpoint_access(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "revoke-endpoint-access" }, input, callbacks)
end

--- AWS redshift revoke-snapshot-access operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.revoke_snapshot_access(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "revoke-snapshot-access" }, input, callbacks)
end

--- AWS redshift rotate-encryption-key operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.rotate_encryption_key(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "rotate-encryption-key" }, input, callbacks)
end

--- AWS redshift update-partner-status operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_partner_status(input, callbacks)
	return common.execute_aws_command_skeleton({ "redshift", "update-partner-status" }, input, callbacks)
end

--- AWS redshift wait operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.wait(input, callbacks)
	return common.execute_aws_command({ "redshift", "wait" }, input, callbacks)
end

return M
