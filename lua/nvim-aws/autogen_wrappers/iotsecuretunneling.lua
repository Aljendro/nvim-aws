-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: iotsecuretunneling

local common = require("nvim-aws.wrappers.common")

--- AWS IOTSECURETUNNELING service functions
local M = {}

--- AWS iotsecuretunneling close-tunnel operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.close_tunnel(input)
	return common.execute_aws_command_with_input({ "iotsecuretunneling", "close-tunnel" }, input)
end

--- AWS iotsecuretunneling describe-tunnel operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_tunnel(input)
	return common.execute_aws_command_with_input({ "iotsecuretunneling", "describe-tunnel" }, input)
end

--- AWS iotsecuretunneling list-tags-for-resource operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tags_for_resource(input)
	return common.execute_aws_command_with_input({ "iotsecuretunneling", "list-tags-for-resource" }, input)
end

--- AWS iotsecuretunneling list-tunnels operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tunnels(input)
	return common.execute_aws_command_with_input({ "iotsecuretunneling", "list-tunnels" }, input)
end

--- AWS iotsecuretunneling open-tunnel operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.open_tunnel(input)
	return common.execute_aws_command_with_input({ "iotsecuretunneling", "open-tunnel" }, input)
end

--- AWS iotsecuretunneling rotate-tunnel-access-token operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.rotate_tunnel_access_token(input)
	return common.execute_aws_command_with_input({ "iotsecuretunneling", "rotate-tunnel-access-token" }, input)
end

--- AWS iotsecuretunneling tag-resource operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_resource(input)
	return common.execute_aws_command_with_input({ "iotsecuretunneling", "tag-resource" }, input)
end

--- AWS iotsecuretunneling untag-resource operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_resource(input)
	return common.execute_aws_command_with_input({ "iotsecuretunneling", "untag-resource" }, input)
end

return M
