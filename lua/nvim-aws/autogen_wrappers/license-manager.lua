-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-07 21:36:07
-- AWS Service: license-manager

local common = require("nvim-aws.wrappers.common")

--- AWS LICENSE-MANAGER service functions
local M = {}

--- Accepts the specified grant
--- @param input table The input table for the accept_grant command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.accept_grant(input)
	return common.execute_aws_command_with_input({ "license-manager", "accept-grant" }, input)
end

--- Checks in the specified license
--- @param input table The input table for the check_in_license command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.check_in_license(input)
	return common.execute_aws_command_with_input({ "license-manager", "check-in-license" }, input)
end

--- Checks out the specified license for offline use
--- @param input table The input table for the checkout_borrow_license command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.checkout_borrow_license(input)
	return common.execute_aws_command_with_input({ "license-manager", "checkout-borrow-license" }, input)
end

--- Checks out the specified license
--- @param input table The input table for the checkout_license command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.checkout_license(input)
	return common.execute_aws_command_with_input({ "license-manager", "checkout-license" }, input)
end

--- Creates a grant for the specified license
--- @param input table The input table for the create_grant command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_grant(input)
	return common.execute_aws_command_with_input({ "license-manager", "create-grant" }, input)
end

--- Creates a new version of the specified grant
--- @param input table The input table for the create_grant_version command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_grant_version(input)
	return common.execute_aws_command_with_input({ "license-manager", "create-grant-version" }, input)
end

--- Creates a license
--- @param input table The input table for the create_license command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_license(input)
	return common.execute_aws_command_with_input({ "license-manager", "create-license" }, input)
end

--- Creates a license configuration
--- @param input table The input table for the create_license_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_license_configuration(input)
	return common.execute_aws_command_with_input({ "license-manager", "create-license-configuration" }, input)
end

--- Creates a new license conversion task
--- @param input table The input table for the create_license_conversion_task_for_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_license_conversion_task_for_resource(input)
	return common.execute_aws_command_with_input({ "license-manager", "create-license-conversion-task-for-resource" }, input)
end

--- Creates a report generator
--- @param input table The input table for the create_license_manager_report_generator command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_license_manager_report_generator(input)
	return common.execute_aws_command_with_input({ "license-manager", "create-license-manager-report-generator" }, input)
end

--- Creates a new version of the specified license
--- @param input table The input table for the create_license_version command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_license_version(input)
	return common.execute_aws_command_with_input({ "license-manager", "create-license-version" }, input)
end

--- Creates a long-lived token
--- @param input table The input table for the create_token command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_token(input)
	return common.execute_aws_command_with_input({ "license-manager", "create-token" }, input)
end

--- Deletes the specified grant
--- @param input table The input table for the delete_grant command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_grant(input)
	return common.execute_aws_command_with_input({ "license-manager", "delete-grant" }, input)
end

--- Deletes the specified license
--- @param input table The input table for the delete_license command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_license(input)
	return common.execute_aws_command_with_input({ "license-manager", "delete-license" }, input)
end

--- Deletes the specified license configuration
--- @param input table The input table for the delete_license_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_license_configuration(input)
	return common.execute_aws_command_with_input({ "license-manager", "delete-license-configuration" }, input)
end

--- Deletes the specified report generator
--- @param input table The input table for the delete_license_manager_report_generator command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_license_manager_report_generator(input)
	return common.execute_aws_command_with_input({ "license-manager", "delete-license-manager-report-generator" }, input)
end

--- Deletes the specified token
--- @param input table The input table for the delete_token command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_token(input)
	return common.execute_aws_command_with_input({ "license-manager", "delete-token" }, input)
end

--- Extends the expiration date for license consumption
--- @param input table The input table for the extend_license_consumption command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.extend_license_consumption(input)
	return common.execute_aws_command_with_input({ "license-manager", "extend-license-consumption" }, input)
end

--- Gets a temporary access token to use with AssumeRoleWithWebIdentity
--- @param input table The input table for the get_access_token command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_access_token(input)
	return common.execute_aws_command_with_input({ "license-manager", "get-access-token" }, input)
end

--- Gets detailed information about the specified grant
--- @param input table The input table for the get_grant command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_grant(input)
	return common.execute_aws_command_with_input({ "license-manager", "get-grant" }, input)
end

--- Gets detailed information about the specified license
--- @param input table The input table for the get_license command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_license(input)
	return common.execute_aws_command_with_input({ "license-manager", "get-license" }, input)
end

--- Gets detailed information about the specified license configuration
--- @param input table The input table for the get_license_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_license_configuration(input)
	return common.execute_aws_command_with_input({ "license-manager", "get-license-configuration" }, input)
end

--- Gets information about the specified license type conversion task
--- @param input table The input table for the get_license_conversion_task command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_license_conversion_task(input)
	return common.execute_aws_command_with_input({ "license-manager", "get-license-conversion-task" }, input)
end

--- Gets information about the specified report generator
--- @param input table The input table for the get_license_manager_report_generator command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_license_manager_report_generator(input)
	return common.execute_aws_command_with_input({ "license-manager", "get-license-manager-report-generator" }, input)
end

--- Gets detailed information about the usage of the specified license
--- @param input table The input table for the get_license_usage command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_license_usage(input)
	return common.execute_aws_command_with_input({ "license-manager", "get-license-usage" }, input)
end

--- Gets the License Manager settings for the current Region
--- @param input table The input table for the get_service_settings command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_service_settings(input)
	return common.execute_aws_command_with_input({ "license-manager", "get-service-settings" }, input)
end

--- Lists the resource associations for the specified license configuration
--- @param input table The input table for the list_associations_for_license_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_associations_for_license_configuration(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-associations-for-license-configuration" }, input)
end

--- Lists the grants distributed for the specified license
--- @param input table The input table for the list_distributed_grants command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_distributed_grants(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-distributed-grants" }, input)
end

--- Lists the license configuration operations that failed
--- @param input table The input table for the list_failures_for_license_configuration_operations command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_failures_for_license_configuration_operations(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-failures-for-license-configuration-operations" }, input)
end

--- Lists the license configurations for your account
--- @param input table The input table for the list_license_configurations command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_license_configurations(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-license-configurations" }, input)
end

--- Lists the license type conversion tasks for your account
--- @param input table The input table for the list_license_conversion_tasks command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_license_conversion_tasks(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-license-conversion-tasks" }, input)
end

--- Lists the report generators for your account
--- @param input table The input table for the list_license_manager_report_generators command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_license_manager_report_generators(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-license-manager-report-generators" }, input)
end

--- Describes the license configurations for the specified resource
--- @param input table The input table for the list_license_specifications_for_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_license_specifications_for_resource(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-license-specifications-for-resource" }, input)
end

--- Lists all versions of the specified license
--- @param input table The input table for the list_license_versions command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_license_versions(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-license-versions" }, input)
end

--- Lists the licenses for your account
--- @param input table The input table for the list_licenses command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_licenses(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-licenses" }, input)
end

--- Lists grants that are received
--- @param input table The input table for the list_received_grants command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_received_grants(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-received-grants" }, input)
end

--- Lists the grants received for all accounts in the organization
--- @param input table The input table for the list_received_grants_for_organization command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_received_grants_for_organization(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-received-grants-for-organization" }, input)
end

--- Lists received licenses
--- @param input table The input table for the list_received_licenses command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_received_licenses(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-received-licenses" }, input)
end

--- Lists the licenses received for all accounts in the organization
--- @param input table The input table for the list_received_licenses_for_organization command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_received_licenses_for_organization(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-received-licenses-for-organization" }, input)
end

--- Lists resources managed using Systems Manager inventory
--- @param input table The input table for the list_resource_inventory command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_resource_inventory(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-resource-inventory" }, input)
end

--- Lists the tags for the specified license configuration
--- @param input table The input table for the list_tags_for_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tags_for_resource(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-tags-for-resource" }, input)
end

--- Lists your tokens
--- @param input table The input table for the list_tokens command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tokens(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-tokens" }, input)
end

--- Lists all license usage records for a license configuration, displaying license consumption details by resource at a selected point in time
--- @param input table The input table for the list_usage_for_license_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_usage_for_license_configuration(input)
	return common.execute_aws_command_with_input({ "license-manager", "list-usage-for-license-configuration" }, input)
end

--- Rejects the specified grant
--- @param input table The input table for the reject_grant command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.reject_grant(input)
	return common.execute_aws_command_with_input({ "license-manager", "reject-grant" }, input)
end

--- Adds the specified tags to the specified license configuration
--- @param input table The input table for the tag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_resource(input)
	return common.execute_aws_command_with_input({ "license-manager", "tag-resource" }, input)
end

--- Removes the specified tags from the specified license configuration
--- @param input table The input table for the untag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_resource(input)
	return common.execute_aws_command_with_input({ "license-manager", "untag-resource" }, input)
end

--- Modifies the attributes of an existing license configuration
--- @param input table The input table for the update_license_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_license_configuration(input)
	return common.execute_aws_command_with_input({ "license-manager", "update-license-configuration" }, input)
end

--- Updates a report generator
--- @param input table The input table for the update_license_manager_report_generator command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_license_manager_report_generator(input)
	return common.execute_aws_command_with_input({ "license-manager", "update-license-manager-report-generator" }, input)
end

--- Adds or removes the specified license configurations for the specified Amazon Web Services resource
--- @param input table The input table for the update_license_specifications_for_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_license_specifications_for_resource(input)
	return common.execute_aws_command_with_input({ "license-manager", "update-license-specifications-for-resource" }, input)
end

--- Updates License Manager settings for the current Region
--- @param input table The input table for the update_service_settings command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_service_settings(input)
	return common.execute_aws_command_with_input({ "license-manager", "update-service-settings" }, input)
end

return M
