-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: medialive

local common = require("nvim-aws.wrappers.common")

--- AWS MEDIALIVE service functions
local M = {}

--- Accept an incoming input device transfer
--- @param input table|nil The input table for the accept_input_device_transfer command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.accept_input_device_transfer(input)
	return common.execute_aws_command_with_input({ "medialive", "accept-input-device-transfer" }, input)
end

--- Starts delete of resources
--- @param input table|nil The input table for the batch_delete command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.batch_delete(input)
	return common.execute_aws_command_with_input({ "medialive", "batch-delete" }, input)
end

--- Starts existing resources
--- @param input table|nil The input table for the batch_start command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.batch_start(input)
	return common.execute_aws_command_with_input({ "medialive", "batch-start" }, input)
end

--- Stops running resources
--- @param input table|nil The input table for the batch_stop command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.batch_stop(input)
	return common.execute_aws_command_with_input({ "medialive", "batch-stop" }, input)
end

--- Update a channel schedule
--- @param input table|nil The input table for the batch_update_schedule command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.batch_update_schedule(input)
	return common.execute_aws_command_with_input({ "medialive", "batch-update-schedule" }, input)
end

--- Cancel an input device transfer that you have requested
--- @param input table|nil The input table for the cancel_input_device_transfer command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.cancel_input_device_transfer(input)
	return common.execute_aws_command_with_input({ "medialive", "cancel-input-device-transfer" }, input)
end

--- Send a request to claim an AWS Elemental device that you have purchased from a third-party vendor
--- @param input table|nil The input table for the claim_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.claim_device(input)
	return common.execute_aws_command_with_input({ "medialive", "claim-device" }, input)
end

--- Creates a new channel
--- @param input table|nil The input table for the create_channel command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_channel(input)
	return common.execute_aws_command_with_input({ "medialive", "create-channel" }, input)
end

--- Create a ChannelPlacementGroup in the specified Cluster
--- @param input table|nil The input table for the create_channel_placement_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_channel_placement_group(input)
	return common.execute_aws_command_with_input({ "medialive", "create-channel-placement-group" }, input)
end

--- Creates a cloudwatch alarm template to dynamically generate cloudwatch metric alarms on targeted resource types
--- @param input table|nil The input table for the create_cloud_watch_alarm_template command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_cloud_watch_alarm_template(input)
	return common.execute_aws_command_with_input({ "medialive", "create-cloud-watch-alarm-template" }, input)
end

--- Creates a cloudwatch alarm template group to group your cloudwatch alarm templates and to attach to signal maps for dynamically creating alarms
--- @param input table|nil The input table for the create_cloud_watch_alarm_template_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_cloud_watch_alarm_template_group(input)
	return common.execute_aws_command_with_input({ "medialive", "create-cloud-watch-alarm-template-group" }, input)
end

--- Create a new Cluster
--- @param input table|nil The input table for the create_cluster command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_cluster(input)
	return common.execute_aws_command_with_input({ "medialive", "create-cluster" }, input)
end

--- Creates an eventbridge rule template to monitor events and send notifications to your targeted resources
--- @param input table|nil The input table for the create_event_bridge_rule_template command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_event_bridge_rule_template(input)
	return common.execute_aws_command_with_input({ "medialive", "create-event-bridge-rule-template" }, input)
end

--- Creates an eventbridge rule template group to group your eventbridge rule templates and to attach to signal maps for dynamically creating notification rules
--- @param input table|nil The input table for the create_event_bridge_rule_template_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_event_bridge_rule_template_group(input)
	return common.execute_aws_command_with_input({ "medialive", "create-event-bridge-rule-template-group" }, input)
end

--- Create an input
--- @param input table|nil The input table for the create_input command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_input(input)
	return common.execute_aws_command_with_input({ "medialive", "create-input" }, input)
end

--- Creates a Input Security Group
--- @param input table|nil The input table for the create_input_security_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_input_security_group(input)
	return common.execute_aws_command_with_input({ "medialive", "create-input-security-group" }, input)
end

--- Create a new multiplex
--- @param input table|nil The input table for the create_multiplex command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_multiplex(input)
	return common.execute_aws_command_with_input({ "medialive", "create-multiplex" }, input)
end

--- Create a new program in the multiplex
--- @param input table|nil The input table for the create_multiplex_program command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_multiplex_program(input)
	return common.execute_aws_command_with_input({ "medialive", "create-multiplex-program" }, input)
end

--- Create as many Networks as you need
--- @param input table|nil The input table for the create_network command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_network(input)
	return common.execute_aws_command_with_input({ "medialive", "create-network" }, input)
end

--- Create a Node in the specified Cluster
--- @param input table|nil The input table for the create_node command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_node(input)
	return common.execute_aws_command_with_input({ "medialive", "create-node" }, input)
end

--- Create the Register Node script for all the nodes intended for a specific Cluster
--- @param input table|nil The input table for the create_node_registration_script command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_node_registration_script(input)
	return common.execute_aws_command_with_input({ "medialive", "create-node-registration-script" }, input)
end

--- Create a partner input
--- @param input table|nil The input table for the create_partner_input command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_partner_input(input)
	return common.execute_aws_command_with_input({ "medialive", "create-partner-input" }, input)
end

--- Create an SdiSource for each video source that uses the SDI protocol
--- @param input table|nil The input table for the create_sdi_source command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_sdi_source(input)
	return common.execute_aws_command_with_input({ "medialive", "create-sdi-source" }, input)
end

--- Initiates the creation of a new signal map
--- @param input table|nil The input table for the create_signal_map command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_signal_map(input)
	return common.execute_aws_command_with_input({ "medialive", "create-signal-map" }, input)
end

--- Create tags for a resource
--- @param input table|nil The input table for the create_tags command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_tags(input)
	return common.execute_aws_command_with_input({ "medialive", "create-tags" }, input)
end

--- Starts deletion of channel
--- @param input table|nil The input table for the delete_channel command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_channel(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-channel" }, input)
end

--- Delete the specified ChannelPlacementGroup that exists in the specified Cluster
--- @param input table|nil The input table for the delete_channel_placement_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_channel_placement_group(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-channel-placement-group" }, input)
end

--- Deletes a cloudwatch alarm template
--- @param input table|nil The input table for the delete_cloud_watch_alarm_template command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_cloud_watch_alarm_template(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-cloud-watch-alarm-template" }, input)
end

--- Deletes a cloudwatch alarm template group
--- @param input table|nil The input table for the delete_cloud_watch_alarm_template_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_cloud_watch_alarm_template_group(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-cloud-watch-alarm-template-group" }, input)
end

--- Delete a Cluster
--- @param input table|nil The input table for the delete_cluster command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_cluster(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-cluster" }, input)
end

--- Deletes an eventbridge rule template
--- @param input table|nil The input table for the delete_event_bridge_rule_template command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_event_bridge_rule_template(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-event-bridge-rule-template" }, input)
end

--- Deletes an eventbridge rule template group
--- @param input table|nil The input table for the delete_event_bridge_rule_template_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_event_bridge_rule_template_group(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-event-bridge-rule-template-group" }, input)
end

--- Deletes the input end point
--- @param input table|nil The input table for the delete_input command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_input(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-input" }, input)
end

--- Deletes an Input Security Group
--- @param input table|nil The input table for the delete_input_security_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_input_security_group(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-input-security-group" }, input)
end

--- Delete a multiplex
--- @param input table|nil The input table for the delete_multiplex command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_multiplex(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-multiplex" }, input)
end

--- Delete a program from a multiplex
--- @param input table|nil The input table for the delete_multiplex_program command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_multiplex_program(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-multiplex-program" }, input)
end

--- Delete a Network
--- @param input table|nil The input table for the delete_network command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_network(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-network" }, input)
end

--- Delete a Node
--- @param input table|nil The input table for the delete_node command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_node(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-node" }, input)
end

--- Delete an expired reservation
--- @param input table|nil The input table for the delete_reservation command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_reservation(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-reservation" }, input)
end

--- Delete all schedule actions on a channel
--- @param input table|nil The input table for the delete_schedule command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_schedule(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-schedule" }, input)
end

--- Delete an SdiSource
--- @param input table|nil The input table for the delete_sdi_source command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_sdi_source(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-sdi-source" }, input)
end

--- Deletes the specified signal map
--- @param input table|nil The input table for the delete_signal_map command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_signal_map(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-signal-map" }, input)
end

--- Removes tags for a resource
--- @param input table|nil The input table for the delete_tags command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_tags(input)
	return common.execute_aws_command_with_input({ "medialive", "delete-tags" }, input)
end

--- Describe account configuration
--- @param input table|nil The input table for the describe_account_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_account_configuration(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-account-configuration" }, input)
end

--- Gets details about a channel
--- @param input table|nil The input table for the describe_channel command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_channel(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-channel" }, input)
end

--- Get details about a ChannelPlacementGroup
--- @param input table|nil The input table for the describe_channel_placement_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_channel_placement_group(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-channel-placement-group" }, input)
end

--- Get details about a Cluster
--- @param input table|nil The input table for the describe_cluster command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_cluster(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-cluster" }, input)
end

--- Produces details about an input
--- @param input table|nil The input table for the describe_input command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_input(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-input" }, input)
end

--- Gets the details for the input device
--- @param input table|nil The input table for the describe_input_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_input_device(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-input-device" }, input)
end

--- Get the latest thumbnail data for the input device
--- @param input table|nil The input table for the describe_input_device_thumbnail command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_input_device_thumbnail(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-input-device-thumbnail" }, input)
end

--- Produces a summary of an Input Security Group
--- @param input table|nil The input table for the describe_input_security_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_input_security_group(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-input-security-group" }, input)
end

--- Gets details about a multiplex
--- @param input table|nil The input table for the describe_multiplex command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_multiplex(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-multiplex" }, input)
end

--- Get the details for a program in a multiplex
--- @param input table|nil The input table for the describe_multiplex_program command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_multiplex_program(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-multiplex-program" }, input)
end

--- Get details about a Network
--- @param input table|nil The input table for the describe_network command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_network(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-network" }, input)
end

--- Get details about a Node in the specified Cluster
--- @param input table|nil The input table for the describe_node command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_node(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-node" }, input)
end

--- Get details for an offering
--- @param input table|nil The input table for the describe_offering command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_offering(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-offering" }, input)
end

--- Get details for a reservation
--- @param input table|nil The input table for the describe_reservation command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_reservation(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-reservation" }, input)
end

--- Get a channel schedule
--- @param input table|nil The input table for the describe_schedule command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_schedule(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-schedule" }, input)
end

--- Gets details about a SdiSource
--- @param input table|nil The input table for the describe_sdi_source command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_sdi_source(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-sdi-source" }, input)
end

--- Describe the latest thumbnails data
--- @param input table|nil The input table for the describe_thumbnails command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_thumbnails(input)
	return common.execute_aws_command_with_input({ "medialive", "describe-thumbnails" }, input)
end

--- Retrieves the specified cloudwatch alarm template
--- @param input table|nil The input table for the get_cloud_watch_alarm_template command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_cloud_watch_alarm_template(input)
	return common.execute_aws_command_with_input({ "medialive", "get-cloud-watch-alarm-template" }, input)
end

--- Retrieves the specified cloudwatch alarm template group
--- @param input table|nil The input table for the get_cloud_watch_alarm_template_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_cloud_watch_alarm_template_group(input)
	return common.execute_aws_command_with_input({ "medialive", "get-cloud-watch-alarm-template-group" }, input)
end

--- Retrieves the specified eventbridge rule template
--- @param input table|nil The input table for the get_event_bridge_rule_template command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_event_bridge_rule_template(input)
	return common.execute_aws_command_with_input({ "medialive", "get-event-bridge-rule-template" }, input)
end

--- Retrieves the specified eventbridge rule template group
--- @param input table|nil The input table for the get_event_bridge_rule_template_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_event_bridge_rule_template_group(input)
	return common.execute_aws_command_with_input({ "medialive", "get-event-bridge-rule-template-group" }, input)
end

--- Retrieves the specified signal map
--- @param input table|nil The input table for the get_signal_map command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_signal_map(input)
	return common.execute_aws_command_with_input({ "medialive", "get-signal-map" }, input)
end

--- Retrieve the list of ChannelPlacementGroups in the specified Cluster
--- @param input table|nil The input table for the list_channel_placement_groups command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_channel_placement_groups(input)
	return common.execute_aws_command_with_input({ "medialive", "list-channel-placement-groups" }, input)
end

--- Produces list of channels that have been created
--- @param input table|nil The input table for the list_channels command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_channels(input)
	return common.execute_aws_command_with_input({ "medialive", "list-channels" }, input)
end

--- Lists cloudwatch alarm template groups
--- @param input table|nil The input table for the list_cloud_watch_alarm_template_groups command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_cloud_watch_alarm_template_groups(input)
	return common.execute_aws_command_with_input({ "medialive", "list-cloud-watch-alarm-template-groups" }, input)
end

--- Lists cloudwatch alarm templates
--- @param input table|nil The input table for the list_cloud_watch_alarm_templates command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_cloud_watch_alarm_templates(input)
	return common.execute_aws_command_with_input({ "medialive", "list-cloud-watch-alarm-templates" }, input)
end

--- Retrieve the list of Clusters
--- @param input table|nil The input table for the list_clusters command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_clusters(input)
	return common.execute_aws_command_with_input({ "medialive", "list-clusters" }, input)
end

--- Lists eventbridge rule template groups
--- @param input table|nil The input table for the list_event_bridge_rule_template_groups command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_event_bridge_rule_template_groups(input)
	return common.execute_aws_command_with_input({ "medialive", "list-event-bridge-rule-template-groups" }, input)
end

--- Lists eventbridge rule templates
--- @param input table|nil The input table for the list_event_bridge_rule_templates command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_event_bridge_rule_templates(input)
	return common.execute_aws_command_with_input({ "medialive", "list-event-bridge-rule-templates" }, input)
end

--- List input devices that are currently being transferred
--- @param input table|nil The input table for the list_input_device_transfers command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_input_device_transfers(input)
	return common.execute_aws_command_with_input({ "medialive", "list-input-device-transfers" }, input)
end

--- List input devices
--- @param input table|nil The input table for the list_input_devices command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_input_devices(input)
	return common.execute_aws_command_with_input({ "medialive", "list-input-devices" }, input)
end

--- Produces a list of Input Security Groups for an account
--- @param input table|nil The input table for the list_input_security_groups command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_input_security_groups(input)
	return common.execute_aws_command_with_input({ "medialive", "list-input-security-groups" }, input)
end

--- Produces list of inputs that have been created
--- @param input table|nil The input table for the list_inputs command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_inputs(input)
	return common.execute_aws_command_with_input({ "medialive", "list-inputs" }, input)
end

--- List the programs that currently exist for a specific multiplex
--- @param input table|nil The input table for the list_multiplex_programs command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_multiplex_programs(input)
	return common.execute_aws_command_with_input({ "medialive", "list-multiplex-programs" }, input)
end

--- Retrieve a list of the existing multiplexes
--- @param input table|nil The input table for the list_multiplexes command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_multiplexes(input)
	return common.execute_aws_command_with_input({ "medialive", "list-multiplexes" }, input)
end

--- Retrieve the list of Networks
--- @param input table|nil The input table for the list_networks command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_networks(input)
	return common.execute_aws_command_with_input({ "medialive", "list-networks" }, input)
end

--- Retrieve the list of Nodes
--- @param input table|nil The input table for the list_nodes command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_nodes(input)
	return common.execute_aws_command_with_input({ "medialive", "list-nodes" }, input)
end

--- List offerings available for purchase
--- @param input table|nil The input table for the list_offerings command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_offerings(input)
	return common.execute_aws_command_with_input({ "medialive", "list-offerings" }, input)
end

--- List purchased reservations
--- @param input table|nil The input table for the list_reservations command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_reservations(input)
	return common.execute_aws_command_with_input({ "medialive", "list-reservations" }, input)
end

--- List all the SdiSources in the AWS account
--- @param input table|nil The input table for the list_sdi_sources command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_sdi_sources(input)
	return common.execute_aws_command_with_input({ "medialive", "list-sdi-sources" }, input)
end

--- Lists signal maps
--- @param input table|nil The input table for the list_signal_maps command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_signal_maps(input)
	return common.execute_aws_command_with_input({ "medialive", "list-signal-maps" }, input)
end

--- Produces list of tags that have been created for a resource
--- @param input table|nil The input table for the list_tags_for_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tags_for_resource(input)
	return common.execute_aws_command_with_input({ "medialive", "list-tags-for-resource" }, input)
end

--- Retrieves an array of all the encoder engine versions that are available in this AWS account
--- @param input table|nil The input table for the list_versions command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_versions(input)
	return common.execute_aws_command_with_input({ "medialive", "list-versions" }, input)
end

--- Purchase an offering and create a reservation
--- @param input table|nil The input table for the purchase_offering command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.purchase_offering(input)
	return common.execute_aws_command_with_input({ "medialive", "purchase-offering" }, input)
end

--- Send a reboot command to the specified input device
--- @param input table|nil The input table for the reboot_input_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.reboot_input_device(input)
	return common.execute_aws_command_with_input({ "medialive", "reboot-input-device" }, input)
end

--- Reject the transfer of the specified input device to your AWS account
--- @param input table|nil The input table for the reject_input_device_transfer command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.reject_input_device_transfer(input)
	return common.execute_aws_command_with_input({ "medialive", "reject-input-device-transfer" }, input)
end

--- Restart pipelines in one channel that is currently running
--- @param input table|nil The input table for the restart_channel_pipelines command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.restart_channel_pipelines(input)
	return common.execute_aws_command_with_input({ "medialive", "restart-channel-pipelines" }, input)
end

--- Starts an existing channel
--- @param input table|nil The input table for the start_channel command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.start_channel(input)
	return common.execute_aws_command_with_input({ "medialive", "start-channel" }, input)
end

--- Initiates a deployment to delete the monitor of the specified signal map
--- @param input table|nil The input table for the start_delete_monitor_deployment command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.start_delete_monitor_deployment(input)
	return common.execute_aws_command_with_input({ "medialive", "start-delete-monitor-deployment" }, input)
end

--- Start an input device that is attached to a MediaConnect flow
--- @param input table|nil The input table for the start_input_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.start_input_device(input)
	return common.execute_aws_command_with_input({ "medialive", "start-input-device" }, input)
end

--- Start a maintenance window for the specified input device
--- @param input table|nil The input table for the start_input_device_maintenance_window command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.start_input_device_maintenance_window(input)
	return common.execute_aws_command_with_input({ "medialive", "start-input-device-maintenance-window" }, input)
end

--- Initiates a deployment to deploy the latest monitor of the specified signal map
--- @param input table|nil The input table for the start_monitor_deployment command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.start_monitor_deployment(input)
	return common.execute_aws_command_with_input({ "medialive", "start-monitor-deployment" }, input)
end

--- Start (run) the multiplex
--- @param input table|nil The input table for the start_multiplex command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.start_multiplex(input)
	return common.execute_aws_command_with_input({ "medialive", "start-multiplex" }, input)
end

--- Initiates an update for the specified signal map
--- @param input table|nil The input table for the start_update_signal_map command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.start_update_signal_map(input)
	return common.execute_aws_command_with_input({ "medialive", "start-update-signal-map" }, input)
end

--- Stops a running channel
--- @param input table|nil The input table for the stop_channel command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.stop_channel(input)
	return common.execute_aws_command_with_input({ "medialive", "stop-channel" }, input)
end

--- Stop an input device that is attached to a MediaConnect flow
--- @param input table|nil The input table for the stop_input_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.stop_input_device(input)
	return common.execute_aws_command_with_input({ "medialive", "stop-input-device" }, input)
end

--- Stops a running multiplex
--- @param input table|nil The input table for the stop_multiplex command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.stop_multiplex(input)
	return common.execute_aws_command_with_input({ "medialive", "stop-multiplex" }, input)
end

--- Start an input device transfer to another AWS account
--- @param input table|nil The input table for the transfer_input_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.transfer_input_device(input)
	return common.execute_aws_command_with_input({ "medialive", "transfer-input-device" }, input)
end

--- Update account configuration
--- @param input table|nil The input table for the update_account_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_account_configuration(input)
	return common.execute_aws_command_with_input({ "medialive", "update-account-configuration" }, input)
end

--- Updates a channel
--- @param input table|nil The input table for the update_channel command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_channel(input)
	return common.execute_aws_command_with_input({ "medialive", "update-channel" }, input)
end

--- Changes the class of the channel
--- @param input table|nil The input table for the update_channel_class command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_channel_class(input)
	return common.execute_aws_command_with_input({ "medialive", "update-channel-class" }, input)
end

--- Change the settings for a ChannelPlacementGroup
--- @param input table|nil The input table for the update_channel_placement_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_channel_placement_group(input)
	return common.execute_aws_command_with_input({ "medialive", "update-channel-placement-group" }, input)
end

--- Updates the specified cloudwatch alarm template
--- @param input table|nil The input table for the update_cloud_watch_alarm_template command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_cloud_watch_alarm_template(input)
	return common.execute_aws_command_with_input({ "medialive", "update-cloud-watch-alarm-template" }, input)
end

--- Updates the specified cloudwatch alarm template group
--- @param input table|nil The input table for the update_cloud_watch_alarm_template_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_cloud_watch_alarm_template_group(input)
	return common.execute_aws_command_with_input({ "medialive", "update-cloud-watch-alarm-template-group" }, input)
end

--- Change the settings for a Cluster
--- @param input table|nil The input table for the update_cluster command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_cluster(input)
	return common.execute_aws_command_with_input({ "medialive", "update-cluster" }, input)
end

--- Updates the specified eventbridge rule template
--- @param input table|nil The input table for the update_event_bridge_rule_template command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_event_bridge_rule_template(input)
	return common.execute_aws_command_with_input({ "medialive", "update-event-bridge-rule-template" }, input)
end

--- Updates the specified eventbridge rule template group
--- @param input table|nil The input table for the update_event_bridge_rule_template_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_event_bridge_rule_template_group(input)
	return common.execute_aws_command_with_input({ "medialive", "update-event-bridge-rule-template-group" }, input)
end

--- Updates an input
--- @param input table|nil The input table for the update_input command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_input(input)
	return common.execute_aws_command_with_input({ "medialive", "update-input" }, input)
end

--- Updates the parameters for the input device
--- @param input table|nil The input table for the update_input_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_input_device(input)
	return common.execute_aws_command_with_input({ "medialive", "update-input-device" }, input)
end

--- Update an Input Security Group's Whilelists
--- @param input table|nil The input table for the update_input_security_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_input_security_group(input)
	return common.execute_aws_command_with_input({ "medialive", "update-input-security-group" }, input)
end

--- Updates a multiplex
--- @param input table|nil The input table for the update_multiplex command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_multiplex(input)
	return common.execute_aws_command_with_input({ "medialive", "update-multiplex" }, input)
end

--- Update a program in a multiplex
--- @param input table|nil The input table for the update_multiplex_program command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_multiplex_program(input)
	return common.execute_aws_command_with_input({ "medialive", "update-multiplex-program" }, input)
end

--- Change the settings for a Network
--- @param input table|nil The input table for the update_network command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_network(input)
	return common.execute_aws_command_with_input({ "medialive", "update-network" }, input)
end

--- Change the settings for a Node
--- @param input table|nil The input table for the update_node command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_node(input)
	return common.execute_aws_command_with_input({ "medialive", "update-node" }, input)
end

--- Update the state of a node
--- @param input table|nil The input table for the update_node_state command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_node_state(input)
	return common.execute_aws_command_with_input({ "medialive", "update-node-state" }, input)
end

--- Update reservation
--- @param input table|nil The input table for the update_reservation command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_reservation(input)
	return common.execute_aws_command_with_input({ "medialive", "update-reservation" }, input)
end

--- Change some of the settings in an SdiSource
--- @param input table|nil The input table for the update_sdi_source command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_sdi_source(input)
	return common.execute_aws_command_with_input({ "medialive", "update-sdi-source" }, input)
end

return M
