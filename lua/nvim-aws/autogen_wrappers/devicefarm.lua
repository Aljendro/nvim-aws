-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: device-farm

local common = require("nvim-aws.wrappers.common")

--- AWS DEVICEFARM service functions
local M = {}

--- Creates a device pool
--- @param input table|nil The input table for the create_device_pool command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_device_pool(input)
	return common.execute_aws_command_with_input({ "devicefarm", "create-device-pool" }, input)
end

--- Creates a profile that can be applied to one or more private fleet device instances
--- @param input table|nil The input table for the create_instance_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_instance_profile(input)
	return common.execute_aws_command_with_input({ "devicefarm", "create-instance-profile" }, input)
end

--- Creates a network profile
--- @param input table|nil The input table for the create_network_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_network_profile(input)
	return common.execute_aws_command_with_input({ "devicefarm", "create-network-profile" }, input)
end

--- Creates a project
--- @param input table|nil The input table for the create_project command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_project(input)
	return common.execute_aws_command_with_input({ "devicefarm", "create-project" }, input)
end

--- Specifies and starts a remote access session
--- @param input table|nil The input table for the create_remote_access_session command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_remote_access_session(input)
	return common.execute_aws_command_with_input({ "devicefarm", "create-remote-access-session" }, input)
end

--- Creates a Selenium testing project
--- @param input table|nil The input table for the create_test_grid_project command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_test_grid_project(input)
	return common.execute_aws_command_with_input({ "devicefarm", "create-test-grid-project" }, input)
end

--- Creates a signed, short-term URL that can be passed to a Selenium RemoteWebDriver constructor
--- @param input table|nil The input table for the create_test_grid_url command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_test_grid_url(input)
	return common.execute_aws_command_with_input({ "devicefarm", "create-test-grid-url" }, input)
end

--- Uploads an app or test scripts
--- @param input table|nil The input table for the create_upload command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_upload(input)
	return common.execute_aws_command_with_input({ "devicefarm", "create-upload" }, input)
end

--- Creates a configuration record in Device Farm for your Amazon Virtual Private Cloud (VPC) endpoint
--- @param input table|nil The input table for the create_vpce_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_vpce_configuration(input)
	return common.execute_aws_command_with_input({ "devicefarm", "create-vpce-configuration" }, input)
end

--- Deletes a device pool given the pool ARN
--- @param input table|nil The input table for the delete_device_pool command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_device_pool(input)
	return common.execute_aws_command_with_input({ "devicefarm", "delete-device-pool" }, input)
end

--- Deletes a profile that can be applied to one or more private device instances
--- @param input table|nil The input table for the delete_instance_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_instance_profile(input)
	return common.execute_aws_command_with_input({ "devicefarm", "delete-instance-profile" }, input)
end

--- Deletes a network profile
--- @param input table|nil The input table for the delete_network_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_network_profile(input)
	return common.execute_aws_command_with_input({ "devicefarm", "delete-network-profile" }, input)
end

--- Deletes an AWS Device Farm project, given the project ARN
--- @param input table|nil The input table for the delete_project command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_project(input)
	return common.execute_aws_command_with_input({ "devicefarm", "delete-project" }, input)
end

--- Deletes a completed remote access session and its results
--- @param input table|nil The input table for the delete_remote_access_session command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_remote_access_session(input)
	return common.execute_aws_command_with_input({ "devicefarm", "delete-remote-access-session" }, input)
end

--- Deletes the run, given the run ARN
--- @param input table|nil The input table for the delete_run command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_run(input)
	return common.execute_aws_command_with_input({ "devicefarm", "delete-run" }, input)
end

--- Deletes a Selenium testing project and all content generated under it
--- @param input table|nil The input table for the delete_test_grid_project command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_test_grid_project(input)
	return common.execute_aws_command_with_input({ "devicefarm", "delete-test-grid-project" }, input)
end

--- Deletes an upload given the upload ARN
--- @param input table|nil The input table for the delete_upload command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_upload(input)
	return common.execute_aws_command_with_input({ "devicefarm", "delete-upload" }, input)
end

--- Deletes a configuration for your Amazon Virtual Private Cloud (VPC) endpoint
--- @param input table|nil The input table for the delete_vpce_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_vpce_configuration(input)
	return common.execute_aws_command_with_input({ "devicefarm", "delete-vpce-configuration" }, input)
end

--- Returns the number of unmetered iOS or unmetered Android devices that have been purchased by the account
--- @param input table|nil The input table for the get_account_settings command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_account_settings(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-account-settings" }, input)
end

--- Gets information about a unique device type
--- @param input table|nil The input table for the get_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_device(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-device" }, input)
end

--- Returns information about a device instance that belongs to a private device fleet
--- @param input table|nil The input table for the get_device_instance command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_device_instance(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-device-instance" }, input)
end

--- Gets information about a device pool
--- @param input table|nil The input table for the get_device_pool command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_device_pool(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-device-pool" }, input)
end

--- Gets information about compatibility with a device pool
--- @param input table|nil The input table for the get_device_pool_compatibility command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_device_pool_compatibility(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-device-pool-compatibility" }, input)
end

--- Returns information about the specified instance profile
--- @param input table|nil The input table for the get_instance_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_instance_profile(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-instance-profile" }, input)
end

--- Gets information about a job
--- @param input table|nil The input table for the get_job command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_job(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-job" }, input)
end

--- Returns information about a network profile
--- @param input table|nil The input table for the get_network_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_network_profile(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-network-profile" }, input)
end

--- Gets the current status and future status of all offerings purchased by an AWS account
--- @param input table|nil The input table for the get_offering_status command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_offering_status(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-offering-status" }, input)
end

--- Gets information about a project
--- @param input table|nil The input table for the get_project command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_project(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-project" }, input)
end

--- Returns a link to a currently running remote access session
--- @param input table|nil The input table for the get_remote_access_session command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_remote_access_session(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-remote-access-session" }, input)
end

--- Gets information about a run
--- @param input table|nil The input table for the get_run command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_run(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-run" }, input)
end

--- Gets information about a suite
--- @param input table|nil The input table for the get_suite command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_suite(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-suite" }, input)
end

--- Gets information about a test
--- @param input table|nil The input table for the get_test command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_test(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-test" }, input)
end

--- Retrieves information about a Selenium testing project
--- @param input table|nil The input table for the get_test_grid_project command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_test_grid_project(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-test-grid-project" }, input)
end

--- A session is an instance of a browser created through a RemoteWebDriver with the URL from CreateTestGridUrlResult$url
--- @param input table|nil The input table for the get_test_grid_session command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_test_grid_session(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-test-grid-session" }, input)
end

--- Gets information about an upload
--- @param input table|nil The input table for the get_upload command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_upload(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-upload" }, input)
end

--- Returns information about the configuration settings for your Amazon Virtual Private Cloud (VPC) endpoint
--- @param input table|nil The input table for the get_vpce_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_vpce_configuration(input)
	return common.execute_aws_command_with_input({ "devicefarm", "get-vpce-configuration" }, input)
end

--- Installs an application to the device in a remote access session
--- @param input table|nil The input table for the install_to_remote_access_session command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.install_to_remote_access_session(input)
	return common.execute_aws_command_with_input({ "devicefarm", "install-to-remote-access-session" }, input)
end

--- Gets information about artifacts
--- @param input table|nil The input table for the list_artifacts command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_artifacts(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-artifacts" }, input)
end

--- Returns information about the private device instances associated with one or more AWS accounts
--- @param input table|nil The input table for the list_device_instances command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_device_instances(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-device-instances" }, input)
end

--- Gets information about device pools
--- @param input table|nil The input table for the list_device_pools command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_device_pools(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-device-pools" }, input)
end

--- Gets information about unique device types
--- @param input table|nil The input table for the list_devices command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_devices(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-devices" }, input)
end

--- Returns information about all the instance profiles in an AWS account
--- @param input table|nil The input table for the list_instance_profiles command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_instance_profiles(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-instance-profiles" }, input)
end

--- Gets information about jobs for a given test run
--- @param input table|nil The input table for the list_jobs command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_jobs(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-jobs" }, input)
end

--- Returns the list of available network profiles
--- @param input table|nil The input table for the list_network_profiles command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_network_profiles(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-network-profiles" }, input)
end

--- Returns a list of offering promotions
--- @param input table|nil The input table for the list_offering_promotions command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_offering_promotions(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-offering-promotions" }, input)
end

--- Returns a list of all historical purchases, renewals, and system renewal transactions for an AWS account
--- @param input table|nil The input table for the list_offering_transactions command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_offering_transactions(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-offering-transactions" }, input)
end

--- Returns a list of products or offerings that the user can manage through the API
--- @param input table|nil The input table for the list_offerings command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_offerings(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-offerings" }, input)
end

--- Gets information about projects
--- @param input table|nil The input table for the list_projects command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_projects(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-projects" }, input)
end

--- Returns a list of all currently running remote access sessions
--- @param input table|nil The input table for the list_remote_access_sessions command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_remote_access_sessions(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-remote-access-sessions" }, input)
end

--- Gets information about runs, given an AWS Device Farm project ARN
--- @param input table|nil The input table for the list_runs command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_runs(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-runs" }, input)
end

--- Gets information about samples, given an AWS Device Farm job ARN
--- @param input table|nil The input table for the list_samples command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_samples(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-samples" }, input)
end

--- Gets information about test suites for a given job
--- @param input table|nil The input table for the list_suites command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_suites(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-suites" }, input)
end

--- List the tags for an AWS Device Farm resource
--- @param input table|nil The input table for the list_tags_for_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tags_for_resource(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-tags-for-resource" }, input)
end

--- Gets a list of all Selenium testing projects in your account
--- @param input table|nil The input table for the list_test_grid_projects command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_test_grid_projects(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-test-grid-projects" }, input)
end

--- Returns a list of the actions taken in a TestGridSession
--- @param input table|nil The input table for the list_test_grid_session_actions command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_test_grid_session_actions(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-test-grid-session-actions" }, input)
end

--- Retrieves a list of artifacts created during the session
--- @param input table|nil The input table for the list_test_grid_session_artifacts command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_test_grid_session_artifacts(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-test-grid-session-artifacts" }, input)
end

--- Retrieves a list of sessions for a TestGridProject
--- @param input table|nil The input table for the list_test_grid_sessions command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_test_grid_sessions(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-test-grid-sessions" }, input)
end

--- Gets information about tests in a given test suite
--- @param input table|nil The input table for the list_tests command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tests(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-tests" }, input)
end

--- Gets information about unique problems, such as exceptions or crashes
--- @param input table|nil The input table for the list_unique_problems command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_unique_problems(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-unique-problems" }, input)
end

--- Gets information about uploads, given an AWS Device Farm project ARN
--- @param input table|nil The input table for the list_uploads command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_uploads(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-uploads" }, input)
end

--- Returns information about all Amazon Virtual Private Cloud (VPC) endpoint configurations in the AWS account
--- @param input table|nil The input table for the list_vpce_configurations command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_vpce_configurations(input)
	return common.execute_aws_command_with_input({ "devicefarm", "list-vpce-configurations" }, input)
end

--- Immediately purchases offerings for an AWS account
--- @param input table|nil The input table for the purchase_offering command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.purchase_offering(input)
	return common.execute_aws_command_with_input({ "devicefarm", "purchase-offering" }, input)
end

--- Explicitly sets the quantity of devices to renew for an offering, starting from the effectiveDate of the next period
--- @param input table|nil The input table for the renew_offering command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.renew_offering(input)
	return common.execute_aws_command_with_input({ "devicefarm", "renew-offering" }, input)
end

--- Schedules a run
--- @param input table|nil The input table for the schedule_run command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.schedule_run(input)
	return common.execute_aws_command_with_input({ "devicefarm", "schedule-run" }, input)
end

--- Initiates a stop request for the current job
--- @param input table|nil The input table for the stop_job command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.stop_job(input)
	return common.execute_aws_command_with_input({ "devicefarm", "stop-job" }, input)
end

--- Ends a specified remote access session
--- @param input table|nil The input table for the stop_remote_access_session command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.stop_remote_access_session(input)
	return common.execute_aws_command_with_input({ "devicefarm", "stop-remote-access-session" }, input)
end

--- Initiates a stop request for the current test run
--- @param input table|nil The input table for the stop_run command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.stop_run(input)
	return common.execute_aws_command_with_input({ "devicefarm", "stop-run" }, input)
end

--- Associates the specified tags to a resource with the specified resourceArn
--- @param input table|nil The input table for the tag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_resource(input)
	return common.execute_aws_command_with_input({ "devicefarm", "tag-resource" }, input)
end

--- Deletes the specified tags from a resource
--- @param input table|nil The input table for the untag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_resource(input)
	return common.execute_aws_command_with_input({ "devicefarm", "untag-resource" }, input)
end

--- Updates information about a private device instance
--- @param input table|nil The input table for the update_device_instance command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_device_instance(input)
	return common.execute_aws_command_with_input({ "devicefarm", "update-device-instance" }, input)
end

--- Modifies the name, description, and rules in a device pool given the attributes and the pool ARN
--- @param input table|nil The input table for the update_device_pool command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_device_pool(input)
	return common.execute_aws_command_with_input({ "devicefarm", "update-device-pool" }, input)
end

--- Updates information about an existing private device instance profile
--- @param input table|nil The input table for the update_instance_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_instance_profile(input)
	return common.execute_aws_command_with_input({ "devicefarm", "update-instance-profile" }, input)
end

--- Updates the network profile
--- @param input table|nil The input table for the update_network_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_network_profile(input)
	return common.execute_aws_command_with_input({ "devicefarm", "update-network-profile" }, input)
end

--- Modifies the specified project name, given the project ARN and a new name
--- @param input table|nil The input table for the update_project command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_project(input)
	return common.execute_aws_command_with_input({ "devicefarm", "update-project" }, input)
end

--- Change details of a project
--- @param input table|nil The input table for the update_test_grid_project command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_test_grid_project(input)
	return common.execute_aws_command_with_input({ "devicefarm", "update-test-grid-project" }, input)
end

--- Updates an uploaded test spec
--- @param input table|nil The input table for the update_upload command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_upload(input)
	return common.execute_aws_command_with_input({ "devicefarm", "update-upload" }, input)
end

--- Updates information about an Amazon Virtual Private Cloud (VPC) endpoint configuration
--- @param input table|nil The input table for the update_vpce_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_vpce_configuration(input)
	return common.execute_aws_command_with_input({ "devicefarm", "update-vpce-configuration" }, input)
end

return M
