-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: iam

local common = require("nvim-aws.wrappers.common")

--- AWS IAM service functions
local M = {}

--- Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource
--- @param input table The input table for the add_client_id_to_open_id_connect_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.add_client_id_to_open_id_connect_provider(input)
	return common.execute_aws_command_with_input({ "iam", "add-client-id-to-open-id-connect-provider" }, input)
end

--- Adds the specified IAM role to the specified instance profile
--- @param input table The input table for the add_role_to_instance_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.add_role_to_instance_profile(input)
	return common.execute_aws_command_with_input({ "iam", "add-role-to-instance-profile" }, input)
end

--- Adds the specified user to the specified group
--- @param input table The input table for the add_user_to_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.add_user_to_group(input)
	return common.execute_aws_command_with_input({ "iam", "add-user-to-group" }, input)
end

--- Attaches the specified managed policy to the specified IAM group
--- @param input table The input table for the attach_group_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.attach_group_policy(input)
	return common.execute_aws_command_with_input({ "iam", "attach-group-policy" }, input)
end

--- Attaches the specified managed policy to the specified IAM role
--- @param input table The input table for the attach_role_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.attach_role_policy(input)
	return common.execute_aws_command_with_input({ "iam", "attach-role-policy" }, input)
end

--- Attaches the specified managed policy to the specified user
--- @param input table The input table for the attach_user_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.attach_user_policy(input)
	return common.execute_aws_command_with_input({ "iam", "attach-user-policy" }, input)
end

--- Changes the password of the IAM user who is calling this operation
--- @param input table The input table for the change_password command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.change_password(input)
	return common.execute_aws_command_with_input({ "iam", "change-password" }, input)
end

--- Creates a new Amazon Web Services secret access key and corresponding Amazon Web Services access key ID for the specified user
--- @param input table The input table for the create_access_key command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_access_key(input)
	return common.execute_aws_command_with_input({ "iam", "create-access-key" }, input)
end

--- Creates an alias for your Amazon Web Services account
--- @param input table The input table for the create_account_alias command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_account_alias(input)
	return common.execute_aws_command_with_input({ "iam", "create-account-alias" }, input)
end

--- Creates a new group
--- @param input table The input table for the create_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_group(input)
	return common.execute_aws_command_with_input({ "iam", "create-group" }, input)
end

--- Creates a new instance profile
--- @param input table The input table for the create_instance_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_instance_profile(input)
	return common.execute_aws_command_with_input({ "iam", "create-instance-profile" }, input)
end

--- Creates a password for the specified IAM user
--- @param input table The input table for the create_login_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_login_profile(input)
	return common.execute_aws_command_with_input({ "iam", "create-login-profile" }, input)
end

--- Creates an IAM entity to describe an identity provider (IdP) that supports OpenID Connect (OIDC)
--- @param input table The input table for the create_open_id_connect_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_open_id_connect_provider(input)
	return common.execute_aws_command_with_input({ "iam", "create-open-id-connect-provider" }, input)
end

--- Creates a new managed policy for your Amazon Web Services account
--- @param input table The input table for the create_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_policy(input)
	return common.execute_aws_command_with_input({ "iam", "create-policy" }, input)
end

--- Creates a new version of the specified managed policy
--- @param input table The input table for the create_policy_version command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_policy_version(input)
	return common.execute_aws_command_with_input({ "iam", "create-policy-version" }, input)
end

--- Creates a new role for your Amazon Web Services account
--- @param input table The input table for the create_role command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_role(input)
	return common.execute_aws_command_with_input({ "iam", "create-role" }, input)
end

--- Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2
--- @param input table The input table for the create_saml_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_saml_provider(input)
	return common.execute_aws_command_with_input({ "iam", "create-saml-provider" }, input)
end

--- Creates an IAM role that is linked to a specific Amazon Web Services service
--- @param input table The input table for the create_service_linked_role command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_service_linked_role(input)
	return common.execute_aws_command_with_input({ "iam", "create-service-linked-role" }, input)
end

--- Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request
--- @param input table The input table for the create_service_specific_credential command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_service_specific_credential(input)
	return common.execute_aws_command_with_input({ "iam", "create-service-specific-credential" }, input)
end

--- Creates a new IAM user for your Amazon Web Services account
--- @param input table The input table for the create_user command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_user(input)
	return common.execute_aws_command_with_input({ "iam", "create-user" }, input)
end

--- Creates a new virtual MFA device for the Amazon Web Services account
--- @param input table The input table for the create_virtual_mfa_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_virtual_mfa_device(input)
	return common.execute_aws_command_with_input({ "iam", "create-virtual-mfa-device" }, input)
end

--- Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled
--- @param input table The input table for the deactivate_mfa_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.deactivate_mfa_device(input)
	return common.execute_aws_command_with_input({ "iam", "deactivate-mfa-device" }, input)
end

--- Deletes the access key pair associated with the specified IAM user
--- @param input table The input table for the delete_access_key command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_access_key(input)
	return common.execute_aws_command_with_input({ "iam", "delete-access-key" }, input)
end

--- Deletes the specified Amazon Web Services account alias
--- @param input table The input table for the delete_account_alias command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_account_alias(input)
	return common.execute_aws_command_with_input({ "iam", "delete-account-alias" }, input)
end

--- Deletes the password policy for the Amazon Web Services account
--- @param input table Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_account_password_policy(input)
	return common.execute_aws_command_with_input({ "iam", "delete-account-password-policy" }, input)
end

--- Deletes the specified IAM group
--- @param input table The input table for the delete_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_group(input)
	return common.execute_aws_command_with_input({ "iam", "delete-group" }, input)
end

--- Deletes the specified inline policy that is embedded in the specified IAM group
--- @param input table The input table for the delete_group_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_group_policy(input)
	return common.execute_aws_command_with_input({ "iam", "delete-group-policy" }, input)
end

--- Deletes the specified instance profile
--- @param input table The input table for the delete_instance_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_instance_profile(input)
	return common.execute_aws_command_with_input({ "iam", "delete-instance-profile" }, input)
end

--- Deletes the password for the specified IAM user, For more information, see Managing passwords for IAM users
--- @param input table The input table for the delete_login_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_login_profile(input)
	return common.execute_aws_command_with_input({ "iam", "delete-login-profile" }, input)
end

--- Deletes an OpenID Connect identity provider (IdP) resource object in IAM
--- @param input table The input table for the delete_open_id_connect_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_open_id_connect_provider(input)
	return common.execute_aws_command_with_input({ "iam", "delete-open-id-connect-provider" }, input)
end

--- Deletes the specified managed policy
--- @param input table The input table for the delete_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_policy(input)
	return common.execute_aws_command_with_input({ "iam", "delete-policy" }, input)
end

--- Deletes the specified version from the specified managed policy
--- @param input table The input table for the delete_policy_version command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_policy_version(input)
	return common.execute_aws_command_with_input({ "iam", "delete-policy-version" }, input)
end

--- Deletes the specified role
--- @param input table The input table for the delete_role command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_role(input)
	return common.execute_aws_command_with_input({ "iam", "delete-role" }, input)
end

--- Deletes the permissions boundary for the specified IAM role
--- @param input table The input table for the delete_role_permissions_boundary command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_role_permissions_boundary(input)
	return common.execute_aws_command_with_input({ "iam", "delete-role-permissions-boundary" }, input)
end

--- Deletes the specified inline policy that is embedded in the specified IAM role
--- @param input table The input table for the delete_role_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_role_policy(input)
	return common.execute_aws_command_with_input({ "iam", "delete-role-policy" }, input)
end

--- Deletes a SAML provider resource in IAM
--- @param input table The input table for the delete_saml_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_saml_provider(input)
	return common.execute_aws_command_with_input({ "iam", "delete-saml-provider" }, input)
end

--- Deletes the specified SSH public key
--- @param input table The input table for the delete_ssh_public_key command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_ssh_public_key(input)
	return common.execute_aws_command_with_input({ "iam", "delete-ssh-public-key" }, input)
end

--- Deletes the specified server certificate
--- @param input table The input table for the delete_server_certificate command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_server_certificate(input)
	return common.execute_aws_command_with_input({ "iam", "delete-server-certificate" }, input)
end

--- Submits a service-linked role deletion request and returns a DeletionTaskId, which you can use to check the status of the deletion
--- @param input table The input table for the delete_service_linked_role command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_service_linked_role(input)
	return common.execute_aws_command_with_input({ "iam", "delete-service-linked-role" }, input)
end

--- Deletes the specified service-specific credential
--- @param input table The input table for the delete_service_specific_credential command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_service_specific_credential(input)
	return common.execute_aws_command_with_input({ "iam", "delete-service-specific-credential" }, input)
end

--- Deletes a signing certificate associated with the specified IAM user
--- @param input table The input table for the delete_signing_certificate command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_signing_certificate(input)
	return common.execute_aws_command_with_input({ "iam", "delete-signing-certificate" }, input)
end

--- Deletes the specified IAM user
--- @param input table The input table for the delete_user command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_user(input)
	return common.execute_aws_command_with_input({ "iam", "delete-user" }, input)
end

--- Deletes the permissions boundary for the specified IAM user
--- @param input table The input table for the delete_user_permissions_boundary command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_user_permissions_boundary(input)
	return common.execute_aws_command_with_input({ "iam", "delete-user-permissions-boundary" }, input)
end

--- Deletes the specified inline policy that is embedded in the specified IAM user
--- @param input table The input table for the delete_user_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_user_policy(input)
	return common.execute_aws_command_with_input({ "iam", "delete-user-policy" }, input)
end

--- Deletes a virtual MFA device
--- @param input table The input table for the delete_virtual_mfa_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_virtual_mfa_device(input)
	return common.execute_aws_command_with_input({ "iam", "delete-virtual-mfa-device" }, input)
end

--- Removes the specified managed policy from the specified IAM group
--- @param input table The input table for the detach_group_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.detach_group_policy(input)
	return common.execute_aws_command_with_input({ "iam", "detach-group-policy" }, input)
end

--- Removes the specified managed policy from the specified role
--- @param input table The input table for the detach_role_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.detach_role_policy(input)
	return common.execute_aws_command_with_input({ "iam", "detach-role-policy" }, input)
end

--- Removes the specified managed policy from the specified user
--- @param input table The input table for the detach_user_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.detach_user_policy(input)
	return common.execute_aws_command_with_input({ "iam", "detach-user-policy" }, input)
end

--- Disables the management of privileged root user credentials across member accounts in your organization
--- @param input table The input table for the disable_organizations_root_credentials_management command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.disable_organizations_root_credentials_management(input)
	return common.execute_aws_command_with_input({ "iam", "disable-organizations-root-credentials-management" }, input)
end

--- Disables root user sessions for privileged tasks across member accounts in your organization
--- @param input table The input table for the disable_organizations_root_sessions command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.disable_organizations_root_sessions(input)
	return common.execute_aws_command_with_input({ "iam", "disable-organizations-root-sessions" }, input)
end

--- Enables the specified MFA device and associates it with the specified IAM user
--- @param input table The input table for the enable_mfa_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.enable_mfa_device(input)
	return common.execute_aws_command_with_input({ "iam", "enable-mfa-device" }, input)
end

--- Enables the management of privileged root user credentials across member accounts in your organization
--- @param input table The input table for the enable_organizations_root_credentials_management command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.enable_organizations_root_credentials_management(input)
	return common.execute_aws_command_with_input({ "iam", "enable-organizations-root-credentials-management" }, input)
end

--- Allows the management account or delegated administrator to perform privileged tasks on member accounts in your organization
--- @param input table The input table for the enable_organizations_root_sessions command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.enable_organizations_root_sessions(input)
	return common.execute_aws_command_with_input({ "iam", "enable-organizations-root-sessions" }, input)
end

--- Generates a credential report for the Amazon Web Services account
--- @param input table Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.generate_credential_report(input)
	return common.execute_aws_command_with_input({ "iam", "generate-credential-report" }, input)
end

--- Generates a report for service last accessed data for Organizations
--- @param input table The input table for the generate_organizations_access_report command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.generate_organizations_access_report(input)
	return common.execute_aws_command_with_input({ "iam", "generate-organizations-access-report" }, input)
end

--- Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access Amazon Web Services services
--- @param input table The input table for the generate_service_last_accessed_details command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.generate_service_last_accessed_details(input)
	return common.execute_aws_command_with_input({ "iam", "generate-service-last-accessed-details" }, input)
end

--- Retrieves information about when the specified access key was last used
--- @param input table The input table for the get_access_key_last_used command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_access_key_last_used(input)
	return common.execute_aws_command_with_input({ "iam", "get-access-key-last-used" }, input)
end

--- Retrieves information about all IAM users, groups, roles, and policies in your Amazon Web Services account, including their relationships to one another
--- @param input table The input table for the get_account_authorization_details command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_account_authorization_details(input)
	return common.execute_aws_command_with_input({ "iam", "get-account-authorization-details" }, input)
end

--- Retrieves the password policy for the Amazon Web Services account
--- @param input table Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_account_password_policy(input)
	return common.execute_aws_command_with_input({ "iam", "get-account-password-policy" }, input)
end

--- Retrieves information about IAM entity usage and IAM quotas in the Amazon Web Services account
--- @param input table Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_account_summary(input)
	return common.execute_aws_command_with_input({ "iam", "get-account-summary" }, input)
end

--- Gets a list of all of the context keys referenced in the input policies
--- @param input table The input table for the get_context_keys_for_custom_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_context_keys_for_custom_policy(input)
	return common.execute_aws_command_with_input({ "iam", "get-context-keys-for-custom-policy" }, input)
end

--- Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity
--- @param input table The input table for the get_context_keys_for_principal_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_context_keys_for_principal_policy(input)
	return common.execute_aws_command_with_input({ "iam", "get-context-keys-for-principal-policy" }, input)
end

--- Retrieves a credential report for the Amazon Web Services account
--- @param input table Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_credential_report(input)
	return common.execute_aws_command_with_input({ "iam", "get-credential-report" }, input)
end

--- Returns a list of IAM users that are in the specified IAM group
--- @param input table The input table for the get_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_group(input)
	return common.execute_aws_command_with_input({ "iam", "get-group" }, input)
end

--- Retrieves the specified inline policy document that is embedded in the specified IAM group
--- @param input table The input table for the get_group_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_group_policy(input)
	return common.execute_aws_command_with_input({ "iam", "get-group-policy" }, input)
end

--- Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role
--- @param input table The input table for the get_instance_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_instance_profile(input)
	return common.execute_aws_command_with_input({ "iam", "get-instance-profile" }, input)
end

--- Retrieves the user name for the specified IAM user
--- @param input table The input table for the get_login_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_login_profile(input)
	return common.execute_aws_command_with_input({ "iam", "get-login-profile" }, input)
end

--- Retrieves information about an MFA device for a specified user
--- @param input table The input table for the get_mfa_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_mfa_device(input)
	return common.execute_aws_command_with_input({ "iam", "get-mfa-device" }, input)
end

--- Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM
--- @param input table The input table for the get_open_id_connect_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_open_id_connect_provider(input)
	return common.execute_aws_command_with_input({ "iam", "get-open-id-connect-provider" }, input)
end

--- Retrieves the service last accessed data report for Organizations that was previously generated using the GenerateOrganizationsAccessReport operation
--- @param input table The input table for the get_organizations_access_report command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_organizations_access_report(input)
	return common.execute_aws_command_with_input({ "iam", "get-organizations-access-report" }, input)
end

--- Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached
--- @param input table The input table for the get_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_policy(input)
	return common.execute_aws_command_with_input({ "iam", "get-policy" }, input)
end

--- Retrieves information about the specified version of the specified managed policy, including the policy document
--- @param input table The input table for the get_policy_version command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_policy_version(input)
	return common.execute_aws_command_with_input({ "iam", "get-policy-version" }, input)
end

--- Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role
--- @param input table The input table for the get_role command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_role(input)
	return common.execute_aws_command_with_input({ "iam", "get-role" }, input)
end

--- Retrieves the specified inline policy document that is embedded with the specified IAM role
--- @param input table The input table for the get_role_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_role_policy(input)
	return common.execute_aws_command_with_input({ "iam", "get-role-policy" }, input)
end

--- Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated
--- @param input table The input table for the get_saml_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_saml_provider(input)
	return common.execute_aws_command_with_input({ "iam", "get-saml-provider" }, input)
end

--- Retrieves the specified SSH public key, including metadata about the key
--- @param input table The input table for the get_ssh_public_key command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_ssh_public_key(input)
	return common.execute_aws_command_with_input({ "iam", "get-ssh-public-key" }, input)
end

--- Retrieves information about the specified server certificate stored in IAM
--- @param input table The input table for the get_server_certificate command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_server_certificate(input)
	return common.execute_aws_command_with_input({ "iam", "get-server-certificate" }, input)
end

--- Retrieves a service last accessed report that was created using the GenerateServiceLastAccessedDetails operation
--- @param input table The input table for the get_service_last_accessed_details command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_service_last_accessed_details(input)
	return common.execute_aws_command_with_input({ "iam", "get-service-last-accessed-details" }, input)
end

--- After you generate a group or policy report using the GenerateServiceLastAccessedDetails operation, you can use the JobId parameter in GetServiceLastAccessedDetailsWithEntities
--- @param input table The input table for the get_service_last_accessed_details_with_entities command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_service_last_accessed_details_with_entities(input)
	return common.execute_aws_command_with_input({ "iam", "get-service-last-accessed-details-with-entities" }, input)
end

--- Retrieves the status of your service-linked role deletion
--- @param input table The input table for the get_service_linked_role_deletion_status command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_service_linked_role_deletion_status(input)
	return common.execute_aws_command_with_input({ "iam", "get-service-linked-role-deletion-status" }, input)
end

--- Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN
--- @param input table The input table for the get_user command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_user(input)
	return common.execute_aws_command_with_input({ "iam", "get-user" }, input)
end

--- Retrieves the specified inline policy document that is embedded in the specified IAM user
--- @param input table The input table for the get_user_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_user_policy(input)
	return common.execute_aws_command_with_input({ "iam", "get-user-policy" }, input)
end

--- Returns information about the access key IDs associated with the specified IAM user
--- @param input table The input table for the list_access_keys command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_access_keys(input)
	return common.execute_aws_command_with_input({ "iam", "list-access-keys" }, input)
end

--- Lists the account alias associated with the Amazon Web Services account (Note: you can have only one)
--- @param input table The input table for the list_account_aliases command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_account_aliases(input)
	return common.execute_aws_command_with_input({ "iam", "list-account-aliases" }, input)
end

--- Lists all managed policies that are attached to the specified IAM group
--- @param input table The input table for the list_attached_group_policies command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_attached_group_policies(input)
	return common.execute_aws_command_with_input({ "iam", "list-attached-group-policies" }, input)
end

--- Lists all managed policies that are attached to the specified IAM role
--- @param input table The input table for the list_attached_role_policies command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_attached_role_policies(input)
	return common.execute_aws_command_with_input({ "iam", "list-attached-role-policies" }, input)
end

--- Lists all managed policies that are attached to the specified IAM user
--- @param input table The input table for the list_attached_user_policies command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_attached_user_policies(input)
	return common.execute_aws_command_with_input({ "iam", "list-attached-user-policies" }, input)
end

--- Lists all IAM users, groups, and roles that the specified managed policy is attached to
--- @param input table The input table for the list_entities_for_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_entities_for_policy(input)
	return common.execute_aws_command_with_input({ "iam", "list-entities-for-policy" }, input)
end

--- Lists the names of the inline policies that are embedded in the specified IAM group
--- @param input table The input table for the list_group_policies command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_group_policies(input)
	return common.execute_aws_command_with_input({ "iam", "list-group-policies" }, input)
end

--- Lists the IAM groups that have the specified path prefix
--- @param input table The input table for the list_groups command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_groups(input)
	return common.execute_aws_command_with_input({ "iam", "list-groups" }, input)
end

--- Lists the IAM groups that the specified IAM user belongs to
--- @param input table The input table for the list_groups_for_user command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_groups_for_user(input)
	return common.execute_aws_command_with_input({ "iam", "list-groups-for-user" }, input)
end

--- Lists the tags that are attached to the specified IAM instance profile
--- @param input table The input table for the list_instance_profile_tags command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_instance_profile_tags(input)
	return common.execute_aws_command_with_input({ "iam", "list-instance-profile-tags" }, input)
end

--- Lists the instance profiles that have the specified path prefix
--- @param input table The input table for the list_instance_profiles command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_instance_profiles(input)
	return common.execute_aws_command_with_input({ "iam", "list-instance-profiles" }, input)
end

--- Lists the instance profiles that have the specified associated IAM role
--- @param input table The input table for the list_instance_profiles_for_role command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_instance_profiles_for_role(input)
	return common.execute_aws_command_with_input({ "iam", "list-instance-profiles-for-role" }, input)
end

--- Lists the tags that are attached to the specified IAM virtual multi-factor authentication (MFA) device
--- @param input table The input table for the list_mfa_device_tags command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_mfa_device_tags(input)
	return common.execute_aws_command_with_input({ "iam", "list-mfa-device-tags" }, input)
end

--- Lists the MFA devices for an IAM user
--- @param input table The input table for the list_mfa_devices command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_mfa_devices(input)
	return common.execute_aws_command_with_input({ "iam", "list-mfa-devices" }, input)
end

--- Lists the tags that are attached to the specified OpenID Connect (OIDC)-compatible identity provider
--- @param input table The input table for the list_open_id_connect_provider_tags command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_open_id_connect_provider_tags(input)
	return common.execute_aws_command_with_input({ "iam", "list-open-id-connect-provider-tags" }, input)
end

--- Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the Amazon Web Services account
--- @param input table The input table for the list_open_id_connect_providers command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_open_id_connect_providers(input)
	return common.execute_aws_command_with_input({ "iam", "list-open-id-connect-providers" }, input)
end

--- Lists the centralized root access features enabled for your organization
--- @param input table The input table for the list_organizations_features command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_organizations_features(input)
	return common.execute_aws_command_with_input({ "iam", "list-organizations-features" }, input)
end

--- Lists all the managed policies that are available in your Amazon Web Services account, including your own customer-defined managed policies and all Amazon Web Services managed policies
--- @param input table The input table for the list_policies command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_policies(input)
	return common.execute_aws_command_with_input({ "iam", "list-policies" }, input)
end

--- Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service
--- @param input table The input table for the list_policies_granting_service_access command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_policies_granting_service_access(input)
	return common.execute_aws_command_with_input({ "iam", "list-policies-granting-service-access" }, input)
end

--- Lists the tags that are attached to the specified IAM customer managed policy
--- @param input table The input table for the list_policy_tags command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_policy_tags(input)
	return common.execute_aws_command_with_input({ "iam", "list-policy-tags" }, input)
end

--- Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version
--- @param input table The input table for the list_policy_versions command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_policy_versions(input)
	return common.execute_aws_command_with_input({ "iam", "list-policy-versions" }, input)
end

--- Lists the names of the inline policies that are embedded in the specified IAM role
--- @param input table The input table for the list_role_policies command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_role_policies(input)
	return common.execute_aws_command_with_input({ "iam", "list-role-policies" }, input)
end

--- Lists the tags that are attached to the specified role
--- @param input table The input table for the list_role_tags command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_role_tags(input)
	return common.execute_aws_command_with_input({ "iam", "list-role-tags" }, input)
end

--- Lists the IAM roles that have the specified path prefix
--- @param input table The input table for the list_roles command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_roles(input)
	return common.execute_aws_command_with_input({ "iam", "list-roles" }, input)
end

--- Lists the tags that are attached to the specified Security Assertion Markup Language (SAML) identity provider
--- @param input table The input table for the list_saml_provider_tags command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_saml_provider_tags(input)
	return common.execute_aws_command_with_input({ "iam", "list-saml-provider-tags" }, input)
end

--- Lists the SAML provider resource objects defined in IAM in the account
--- @param input table The input table for the list_saml_providers command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_saml_providers(input)
	return common.execute_aws_command_with_input({ "iam", "list-saml-providers" }, input)
end

--- Returns information about the SSH public keys associated with the specified IAM user
--- @param input table The input table for the list_ssh_public_keys command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_ssh_public_keys(input)
	return common.execute_aws_command_with_input({ "iam", "list-ssh-public-keys" }, input)
end

--- Lists the tags that are attached to the specified IAM server certificate
--- @param input table The input table for the list_server_certificate_tags command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_server_certificate_tags(input)
	return common.execute_aws_command_with_input({ "iam", "list-server-certificate-tags" }, input)
end

--- Lists the server certificates stored in IAM that have the specified path prefix
--- @param input table The input table for the list_server_certificates command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_server_certificates(input)
	return common.execute_aws_command_with_input({ "iam", "list-server-certificates" }, input)
end

--- Returns information about the service-specific credentials associated with the specified IAM user
--- @param input table The input table for the list_service_specific_credentials command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_service_specific_credentials(input)
	return common.execute_aws_command_with_input({ "iam", "list-service-specific-credentials" }, input)
end

--- Returns information about the signing certificates associated with the specified IAM user
--- @param input table The input table for the list_signing_certificates command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_signing_certificates(input)
	return common.execute_aws_command_with_input({ "iam", "list-signing-certificates" }, input)
end

--- Lists the names of the inline policies embedded in the specified IAM user
--- @param input table The input table for the list_user_policies command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_user_policies(input)
	return common.execute_aws_command_with_input({ "iam", "list-user-policies" }, input)
end

--- Lists the tags that are attached to the specified IAM user
--- @param input table The input table for the list_user_tags command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_user_tags(input)
	return common.execute_aws_command_with_input({ "iam", "list-user-tags" }, input)
end

--- Lists the IAM users that have the specified path prefix
--- @param input table The input table for the list_users command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_users(input)
	return common.execute_aws_command_with_input({ "iam", "list-users" }, input)
end

--- Lists the virtual MFA devices defined in the Amazon Web Services account by assignment status
--- @param input table The input table for the list_virtual_mfa_devices command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_virtual_mfa_devices(input)
	return common.execute_aws_command_with_input({ "iam", "list-virtual-mfa-devices" }, input)
end

--- Adds or updates an inline policy document that is embedded in the specified IAM group
--- @param input table The input table for the put_group_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.put_group_policy(input)
	return common.execute_aws_command_with_input({ "iam", "put-group-policy" }, input)
end

--- Adds or updates the policy that is specified as the IAM role's permissions boundary
--- @param input table The input table for the put_role_permissions_boundary command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.put_role_permissions_boundary(input)
	return common.execute_aws_command_with_input({ "iam", "put-role-permissions-boundary" }, input)
end

--- Adds or updates an inline policy document that is embedded in the specified IAM role
--- @param input table The input table for the put_role_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.put_role_policy(input)
	return common.execute_aws_command_with_input({ "iam", "put-role-policy" }, input)
end

--- Adds or updates the policy that is specified as the IAM user's permissions boundary
--- @param input table The input table for the put_user_permissions_boundary command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.put_user_permissions_boundary(input)
	return common.execute_aws_command_with_input({ "iam", "put-user-permissions-boundary" }, input)
end

--- Adds or updates an inline policy document that is embedded in the specified IAM user
--- @param input table The input table for the put_user_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.put_user_policy(input)
	return common.execute_aws_command_with_input({ "iam", "put-user-policy" }, input)
end

--- Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object
--- @param input table The input table for the remove_client_id_from_open_id_connect_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.remove_client_id_from_open_id_connect_provider(input)
	return common.execute_aws_command_with_input({ "iam", "remove-client-id-from-open-id-connect-provider" }, input)
end

--- Removes the specified IAM role from the specified Amazon EC2 instance profile
--- @param input table The input table for the remove_role_from_instance_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.remove_role_from_instance_profile(input)
	return common.execute_aws_command_with_input({ "iam", "remove-role-from-instance-profile" }, input)
end

--- Removes the specified user from the specified group
--- @param input table The input table for the remove_user_from_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.remove_user_from_group(input)
	return common.execute_aws_command_with_input({ "iam", "remove-user-from-group" }, input)
end

--- Resets the password for a service-specific credential
--- @param input table The input table for the reset_service_specific_credential command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.reset_service_specific_credential(input)
	return common.execute_aws_command_with_input({ "iam", "reset-service-specific-credential" }, input)
end

--- Synchronizes the specified MFA device with its IAM resource object on the Amazon Web Services servers
--- @param input table The input table for the resync_mfa_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.resync_mfa_device(input)
	return common.execute_aws_command_with_input({ "iam", "resync-mfa-device" }, input)
end

--- Sets the specified version of the specified policy as the policy's default (operative) version
--- @param input table The input table for the set_default_policy_version command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.set_default_policy_version(input)
	return common.execute_aws_command_with_input({ "iam", "set-default-policy-version" }, input)
end

--- Sets the specified version of the global endpoint token as the token version used for the Amazon Web Services account
--- @param input table The input table for the set_security_token_service_preferences command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.set_security_token_service_preferences(input)
	return common.execute_aws_command_with_input({ "iam", "set-security-token-service-preferences" }, input)
end

--- Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and Amazon Web Services resources to determine the policies' effective permissions
--- @param input table The input table for the simulate_custom_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.simulate_custom_policy(input)
	return common.execute_aws_command_with_input({ "iam", "simulate-custom-policy" }, input)
end

--- Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and Amazon Web Services resources to determine the policies' effective permissions
--- @param input table The input table for the simulate_principal_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.simulate_principal_policy(input)
	return common.execute_aws_command_with_input({ "iam", "simulate-principal-policy" }, input)
end

--- Adds one or more tags to an IAM instance profile
--- @param input table The input table for the tag_instance_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_instance_profile(input)
	return common.execute_aws_command_with_input({ "iam", "tag-instance-profile" }, input)
end

--- Adds one or more tags to an IAM virtual multi-factor authentication (MFA) device
--- @param input table The input table for the tag_mfa_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_mfa_device(input)
	return common.execute_aws_command_with_input({ "iam", "tag-mfa-device" }, input)
end

--- Adds one or more tags to an OpenID Connect (OIDC)-compatible identity provider
--- @param input table The input table for the tag_open_id_connect_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_open_id_connect_provider(input)
	return common.execute_aws_command_with_input({ "iam", "tag-open-id-connect-provider" }, input)
end

--- Adds one or more tags to an IAM customer managed policy
--- @param input table The input table for the tag_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_policy(input)
	return common.execute_aws_command_with_input({ "iam", "tag-policy" }, input)
end

--- Adds one or more tags to an IAM role
--- @param input table The input table for the tag_role command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_role(input)
	return common.execute_aws_command_with_input({ "iam", "tag-role" }, input)
end

--- Adds one or more tags to a Security Assertion Markup Language (SAML) identity provider
--- @param input table The input table for the tag_saml_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_saml_provider(input)
	return common.execute_aws_command_with_input({ "iam", "tag-saml-provider" }, input)
end

--- Adds one or more tags to an IAM server certificate
--- @param input table The input table for the tag_server_certificate command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_server_certificate(input)
	return common.execute_aws_command_with_input({ "iam", "tag-server-certificate" }, input)
end

--- Adds one or more tags to an IAM user
--- @param input table The input table for the tag_user command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_user(input)
	return common.execute_aws_command_with_input({ "iam", "tag-user" }, input)
end

--- Removes the specified tags from the IAM instance profile
--- @param input table The input table for the untag_instance_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_instance_profile(input)
	return common.execute_aws_command_with_input({ "iam", "untag-instance-profile" }, input)
end

--- Removes the specified tags from the IAM virtual multi-factor authentication (MFA) device
--- @param input table The input table for the untag_mfa_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_mfa_device(input)
	return common.execute_aws_command_with_input({ "iam", "untag-mfa-device" }, input)
end

--- Removes the specified tags from the specified OpenID Connect (OIDC)-compatible identity provider in IAM
--- @param input table The input table for the untag_open_id_connect_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_open_id_connect_provider(input)
	return common.execute_aws_command_with_input({ "iam", "untag-open-id-connect-provider" }, input)
end

--- Removes the specified tags from the customer managed policy
--- @param input table The input table for the untag_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_policy(input)
	return common.execute_aws_command_with_input({ "iam", "untag-policy" }, input)
end

--- Removes the specified tags from the role
--- @param input table The input table for the untag_role command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_role(input)
	return common.execute_aws_command_with_input({ "iam", "untag-role" }, input)
end

--- Removes the specified tags from the specified Security Assertion Markup Language (SAML) identity provider in IAM
--- @param input table The input table for the untag_saml_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_saml_provider(input)
	return common.execute_aws_command_with_input({ "iam", "untag-saml-provider" }, input)
end

--- Removes the specified tags from the IAM server certificate
--- @param input table The input table for the untag_server_certificate command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_server_certificate(input)
	return common.execute_aws_command_with_input({ "iam", "untag-server-certificate" }, input)
end

--- Removes the specified tags from the user
--- @param input table The input table for the untag_user command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_user(input)
	return common.execute_aws_command_with_input({ "iam", "untag-user" }, input)
end

--- Changes the status of the specified access key from Active to Inactive, or vice versa
--- @param input table The input table for the update_access_key command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_access_key(input)
	return common.execute_aws_command_with_input({ "iam", "update-access-key" }, input)
end

--- Updates the password policy settings for the Amazon Web Services account
--- @param input table The input table for the update_account_password_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_account_password_policy(input)
	return common.execute_aws_command_with_input({ "iam", "update-account-password-policy" }, input)
end

--- Updates the policy that grants an IAM entity permission to assume a role
--- @param input table The input table for the update_assume_role_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_assume_role_policy(input)
	return common.execute_aws_command_with_input({ "iam", "update-assume-role-policy" }, input)
end

--- Updates the name and/or the path of the specified IAM group
--- @param input table The input table for the update_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_group(input)
	return common.execute_aws_command_with_input({ "iam", "update-group" }, input)
end

--- Changes the password for the specified IAM user
--- @param input table The input table for the update_login_profile command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_login_profile(input)
	return common.execute_aws_command_with_input({ "iam", "update-login-profile" }, input)
end

--- Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints
--- @param input table The input table for the update_open_id_connect_provider_thumbprint command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_open_id_connect_provider_thumbprint(input)
	return common.execute_aws_command_with_input({ "iam", "update-open-id-connect-provider-thumbprint" }, input)
end

--- Updates the description or maximum session duration setting of a role
--- @param input table The input table for the update_role command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_role(input)
	return common.execute_aws_command_with_input({ "iam", "update-role" }, input)
end

--- Use UpdateRole instead
--- @param input table The input table for the update_role_description command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_role_description(input)
	return common.execute_aws_command_with_input({ "iam", "update-role-description" }, input)
end

--- Updates the metadata document, SAML encryption settings, and private keys for an existing SAML provider
--- @param input table The input table for the update_saml_provider command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_saml_provider(input)
	return common.execute_aws_command_with_input({ "iam", "update-saml-provider" }, input)
end

--- Sets the status of an IAM user's SSH public key to active or inactive
--- @param input table The input table for the update_ssh_public_key command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_ssh_public_key(input)
	return common.execute_aws_command_with_input({ "iam", "update-ssh-public-key" }, input)
end

--- Updates the name and/or the path of the specified server certificate stored in IAM
--- @param input table The input table for the update_server_certificate command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_server_certificate(input)
	return common.execute_aws_command_with_input({ "iam", "update-server-certificate" }, input)
end

--- Sets the status of a service-specific credential to Active or Inactive
--- @param input table The input table for the update_service_specific_credential command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_service_specific_credential(input)
	return common.execute_aws_command_with_input({ "iam", "update-service-specific-credential" }, input)
end

--- Changes the status of the specified user signing certificate from active to disabled, or vice versa
--- @param input table The input table for the update_signing_certificate command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_signing_certificate(input)
	return common.execute_aws_command_with_input({ "iam", "update-signing-certificate" }, input)
end

--- Updates the name and/or the path of the specified IAM user
--- @param input table The input table for the update_user command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_user(input)
	return common.execute_aws_command_with_input({ "iam", "update-user" }, input)
end

--- Uploads an SSH public key and associates it with the specified IAM user
--- @param input table The input table for the upload_ssh_public_key command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.upload_ssh_public_key(input)
	return common.execute_aws_command_with_input({ "iam", "upload-ssh-public-key" }, input)
end

--- Uploads a server certificate entity for the Amazon Web Services account
--- @param input table The input table for the upload_server_certificate command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.upload_server_certificate(input)
	return common.execute_aws_command_with_input({ "iam", "upload-server-certificate" }, input)
end

--- Uploads an X
--- @param input table The input table for the upload_signing_certificate command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.upload_signing_certificate(input)
	return common.execute_aws_command_with_input({ "iam", "upload-signing-certificate" }, input)
end

return M
