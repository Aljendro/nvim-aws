-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: iotevents-data

local common = require("nvim-aws.common")

--- AWS iotevents-data service functions
local M = {}

--- AWS iotevents-data batch-acknowledge-alarm operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.batch_acknowledge_alarm(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotevents-data", "batch-acknowledge-alarm" }, input, callbacks)
end

--- AWS iotevents-data batch-delete-detector operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.batch_delete_detector(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotevents-data", "batch-delete-detector" }, input, callbacks)
end

--- AWS iotevents-data batch-disable-alarm operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.batch_disable_alarm(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotevents-data", "batch-disable-alarm" }, input, callbacks)
end

--- AWS iotevents-data batch-enable-alarm operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.batch_enable_alarm(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotevents-data", "batch-enable-alarm" }, input, callbacks)
end

--- AWS iotevents-data batch-put-message operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.batch_put_message(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotevents-data", "batch-put-message" }, input, callbacks)
end

--- AWS iotevents-data batch-reset-alarm operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.batch_reset_alarm(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotevents-data", "batch-reset-alarm" }, input, callbacks)
end

--- AWS iotevents-data batch-snooze-alarm operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.batch_snooze_alarm(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotevents-data", "batch-snooze-alarm" }, input, callbacks)
end

--- AWS iotevents-data batch-update-detector operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.batch_update_detector(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotevents-data", "batch-update-detector" }, input, callbacks)
end

--- AWS iotevents-data describe-alarm operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_alarm(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotevents-data", "describe-alarm" }, input, callbacks)
end

--- AWS iotevents-data describe-detector operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_detector(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotevents-data", "describe-detector" }, input, callbacks)
end

--- AWS iotevents-data list-alarms operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_alarms(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotevents-data", "list-alarms" }, input, callbacks)
end

--- AWS iotevents-data list-detectors operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_detectors(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotevents-data", "list-detectors" }, input, callbacks)
end

return M
