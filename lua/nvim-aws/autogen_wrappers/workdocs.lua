-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: workdocs

local common = require("nvim-aws.common")

--- AWS workdocs service functions
local M = {}

--- AWS workdocs abort-document-version-upload operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.abort_document_version_upload(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "abort-document-version-upload" }, input, callbacks)
end

--- AWS workdocs activate-user operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.activate_user(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "activate-user" }, input, callbacks)
end

--- AWS workdocs add-resource-permissions operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.add_resource_permissions(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "add-resource-permissions" }, input, callbacks)
end

--- AWS workdocs create-comment operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_comment(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "create-comment" }, input, callbacks)
end

--- AWS workdocs create-custom-metadata operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_custom_metadata(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "create-custom-metadata" }, input, callbacks)
end

--- AWS workdocs create-folder operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_folder(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "create-folder" }, input, callbacks)
end

--- AWS workdocs create-labels operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_labels(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "create-labels" }, input, callbacks)
end

--- AWS workdocs create-notification-subscription operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_notification_subscription(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "create-notification-subscription" }, input, callbacks)
end

--- AWS workdocs create-user operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_user(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "create-user" }, input, callbacks)
end

--- AWS workdocs deactivate-user operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.deactivate_user(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "deactivate-user" }, input, callbacks)
end

--- AWS workdocs delete-comment operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_comment(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "delete-comment" }, input, callbacks)
end

--- AWS workdocs delete-custom-metadata operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_custom_metadata(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "delete-custom-metadata" }, input, callbacks)
end

--- AWS workdocs delete-document operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_document(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "delete-document" }, input, callbacks)
end

--- AWS workdocs delete-document-version operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_document_version(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "delete-document-version" }, input, callbacks)
end

--- AWS workdocs delete-folder operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_folder(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "delete-folder" }, input, callbacks)
end

--- AWS workdocs delete-folder-contents operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_folder_contents(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "delete-folder-contents" }, input, callbacks)
end

--- AWS workdocs delete-labels operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_labels(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "delete-labels" }, input, callbacks)
end

--- AWS workdocs delete-notification-subscription operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_notification_subscription(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "delete-notification-subscription" }, input, callbacks)
end

--- AWS workdocs delete-user operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_user(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "delete-user" }, input, callbacks)
end

--- AWS workdocs describe-activities operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_activities(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "describe-activities" }, input, callbacks)
end

--- AWS workdocs describe-comments operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_comments(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "describe-comments" }, input, callbacks)
end

--- AWS workdocs describe-document-versions operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_document_versions(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "describe-document-versions" }, input, callbacks)
end

--- AWS workdocs describe-folder-contents operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_folder_contents(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "describe-folder-contents" }, input, callbacks)
end

--- AWS workdocs describe-groups operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_groups(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "describe-groups" }, input, callbacks)
end

--- AWS workdocs describe-notification-subscriptions operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_notification_subscriptions(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "describe-notification-subscriptions" }, input, callbacks)
end

--- AWS workdocs describe-resource-permissions operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_resource_permissions(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "describe-resource-permissions" }, input, callbacks)
end

--- AWS workdocs describe-root-folders operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_root_folders(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "describe-root-folders" }, input, callbacks)
end

--- AWS workdocs describe-users operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_users(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "describe-users" }, input, callbacks)
end

--- AWS workdocs get-current-user operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_current_user(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "get-current-user" }, input, callbacks)
end

--- AWS workdocs get-document operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_document(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "get-document" }, input, callbacks)
end

--- AWS workdocs get-document-path operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_document_path(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "get-document-path" }, input, callbacks)
end

--- AWS workdocs get-document-version operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_document_version(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "get-document-version" }, input, callbacks)
end

--- AWS workdocs get-folder operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_folder(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "get-folder" }, input, callbacks)
end

--- AWS workdocs get-folder-path operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_folder_path(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "get-folder-path" }, input, callbacks)
end

--- AWS workdocs get-resources operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_resources(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "get-resources" }, input, callbacks)
end

--- AWS workdocs initiate-document-version-upload operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.initiate_document_version_upload(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "initiate-document-version-upload" }, input, callbacks)
end

--- AWS workdocs remove-all-resource-permissions operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.remove_all_resource_permissions(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "remove-all-resource-permissions" }, input, callbacks)
end

--- AWS workdocs remove-resource-permission operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.remove_resource_permission(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "remove-resource-permission" }, input, callbacks)
end

--- AWS workdocs restore-document-versions operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.restore_document_versions(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "restore-document-versions" }, input, callbacks)
end

--- AWS workdocs search-resources operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.search_resources(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "search-resources" }, input, callbacks)
end

--- AWS workdocs update-document operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_document(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "update-document" }, input, callbacks)
end

--- AWS workdocs update-document-version operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_document_version(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "update-document-version" }, input, callbacks)
end

--- AWS workdocs update-folder operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_folder(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "update-folder" }, input, callbacks)
end

--- AWS workdocs update-user operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_user(input, callbacks)
	return common.execute_aws_command_skeleton({ "workdocs", "update-user" }, input, callbacks)
end

return M
