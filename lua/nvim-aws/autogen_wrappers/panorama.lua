-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: panorama

local common = require("nvim-aws.wrappers.common")

--- AWS PANORAMA service functions
local M = {}

--- Creates an application instance and deploys it to a device
--- @param input table|nil The input table for the create_application_instance command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_application_instance(input)
	return common.execute_aws_command_with_input({ "panorama", "create-application-instance" }, input)
end

--- Creates a job to run on a device
--- @param input table|nil The input table for the create_job_for_devices command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_job_for_devices(input)
	return common.execute_aws_command_with_input({ "panorama", "create-job-for-devices" }, input)
end

--- Creates a camera stream node
--- @param input table|nil The input table for the create_node_from_template_job command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_node_from_template_job(input)
	return common.execute_aws_command_with_input({ "panorama", "create-node-from-template-job" }, input)
end

--- Creates a package and storage location in an Amazon S3 access point
--- @param input table|nil The input table for the create_package command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_package(input)
	return common.execute_aws_command_with_input({ "panorama", "create-package" }, input)
end

--- Imports a node package
--- @param input table|nil The input table for the create_package_import_job command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_package_import_job(input)
	return common.execute_aws_command_with_input({ "panorama", "create-package-import-job" }, input)
end

--- Deletes a device
--- @param input table|nil The input table for the delete_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_device(input)
	return common.execute_aws_command_with_input({ "panorama", "delete-device" }, input)
end

--- Deletes a package
--- @param input table|nil The input table for the delete_package command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_package(input)
	return common.execute_aws_command_with_input({ "panorama", "delete-package" }, input)
end

--- Deregisters a package version
--- @param input table|nil The input table for the deregister_package_version command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.deregister_package_version(input)
	return common.execute_aws_command_with_input({ "panorama", "deregister-package-version" }, input)
end

--- Returns information about an application instance on a device
--- @param input table|nil The input table for the describe_application_instance command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_application_instance(input)
	return common.execute_aws_command_with_input({ "panorama", "describe-application-instance" }, input)
end

--- Returns information about an application instance's configuration manifest
--- @param input table|nil The input table for the describe_application_instance_details command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_application_instance_details(input)
	return common.execute_aws_command_with_input({ "panorama", "describe-application-instance-details" }, input)
end

--- Returns information about a device
--- @param input table|nil The input table for the describe_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_device(input)
	return common.execute_aws_command_with_input({ "panorama", "describe-device" }, input)
end

--- Returns information about a device job
--- @param input table|nil The input table for the describe_device_job command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_device_job(input)
	return common.execute_aws_command_with_input({ "panorama", "describe-device-job" }, input)
end

--- Returns information about a node
--- @param input table|nil The input table for the describe_node command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_node(input)
	return common.execute_aws_command_with_input({ "panorama", "describe-node" }, input)
end

--- Returns information about a job to create a camera stream node
--- @param input table|nil The input table for the describe_node_from_template_job command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_node_from_template_job(input)
	return common.execute_aws_command_with_input({ "panorama", "describe-node-from-template-job" }, input)
end

--- Returns information about a package
--- @param input table|nil The input table for the describe_package command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_package(input)
	return common.execute_aws_command_with_input({ "panorama", "describe-package" }, input)
end

--- Returns information about a package import job
--- @param input table|nil The input table for the describe_package_import_job command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_package_import_job(input)
	return common.execute_aws_command_with_input({ "panorama", "describe-package-import-job" }, input)
end

--- Returns information about a package version
--- @param input table|nil The input table for the describe_package_version command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.describe_package_version(input)
	return common.execute_aws_command_with_input({ "panorama", "describe-package-version" }, input)
end

--- Returns a list of application instance dependencies
--- @param input table|nil The input table for the list_application_instance_dependencies command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_application_instance_dependencies(input)
	return common.execute_aws_command_with_input({ "panorama", "list-application-instance-dependencies" }, input)
end

--- Returns a list of application node instances
--- @param input table|nil The input table for the list_application_instance_node_instances command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_application_instance_node_instances(input)
	return common.execute_aws_command_with_input({ "panorama", "list-application-instance-node-instances" }, input)
end

--- Returns a list of application instances
--- @param input table|nil The input table for the list_application_instances command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_application_instances(input)
	return common.execute_aws_command_with_input({ "panorama", "list-application-instances" }, input)
end

--- Returns a list of devices
--- @param input table|nil The input table for the list_devices command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_devices(input)
	return common.execute_aws_command_with_input({ "panorama", "list-devices" }, input)
end

--- Returns a list of jobs
--- @param input table|nil The input table for the list_devices_jobs command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_devices_jobs(input)
	return common.execute_aws_command_with_input({ "panorama", "list-devices-jobs" }, input)
end

--- Returns a list of camera stream node jobs
--- @param input table|nil The input table for the list_node_from_template_jobs command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_node_from_template_jobs(input)
	return common.execute_aws_command_with_input({ "panorama", "list-node-from-template-jobs" }, input)
end

--- Returns a list of nodes
--- @param input table|nil The input table for the list_nodes command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_nodes(input)
	return common.execute_aws_command_with_input({ "panorama", "list-nodes" }, input)
end

--- Returns a list of package import jobs
--- @param input table|nil The input table for the list_package_import_jobs command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_package_import_jobs(input)
	return common.execute_aws_command_with_input({ "panorama", "list-package-import-jobs" }, input)
end

--- Returns a list of packages
--- @param input table|nil The input table for the list_packages command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_packages(input)
	return common.execute_aws_command_with_input({ "panorama", "list-packages" }, input)
end

--- Returns a list of tags for a resource
--- @param input table|nil The input table for the list_tags_for_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tags_for_resource(input)
	return common.execute_aws_command_with_input({ "panorama", "list-tags-for-resource" }, input)
end

--- Creates a device and returns a configuration archive
--- @param input table|nil The input table for the provision_device command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.provision_device(input)
	return common.execute_aws_command_with_input({ "panorama", "provision-device" }, input)
end

--- Registers a package version
--- @param input table|nil The input table for the register_package_version command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.register_package_version(input)
	return common.execute_aws_command_with_input({ "panorama", "register-package-version" }, input)
end

--- Removes an application instance
--- @param input table|nil The input table for the remove_application_instance command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.remove_application_instance(input)
	return common.execute_aws_command_with_input({ "panorama", "remove-application-instance" }, input)
end

--- Signal camera nodes to stop or resume
--- @param input table|nil The input table for the signal_application_instance_node_instances command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.signal_application_instance_node_instances(input)
	return common.execute_aws_command_with_input({ "panorama", "signal-application-instance-node-instances" }, input)
end

--- Tags a resource
--- @param input table|nil The input table for the tag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_resource(input)
	return common.execute_aws_command_with_input({ "panorama", "tag-resource" }, input)
end

--- Removes tags from a resource
--- @param input table|nil The input table for the untag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_resource(input)
	return common.execute_aws_command_with_input({ "panorama", "untag-resource" }, input)
end

--- Updates a device's metadata
--- @param input table|nil The input table for the update_device_metadata command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_device_metadata(input)
	return common.execute_aws_command_with_input({ "panorama", "update-device-metadata" }, input)
end

return M
