-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: meteringmarketplace

local common = require("nvim-aws.wrappers.common")

--- AWS METERINGMARKETPLACE service functions
local M = {}

--- AWS meteringmarketplace batch-meter-usage operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.batch_meter_usage(input)
	return common.execute_aws_command_with_input({ "meteringmarketplace", "batch-meter-usage" }, input)
end

--- AWS meteringmarketplace help operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.help(input)
	return common.execute_aws_command_with_input({ "meteringmarketplace", "help" }, input)
end

--- AWS meteringmarketplace meter-usage operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.meter_usage(input)
	return common.execute_aws_command_with_input({ "meteringmarketplace", "meter-usage" }, input)
end

--- AWS meteringmarketplace register-usage operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.register_usage(input)
	return common.execute_aws_command_with_input({ "meteringmarketplace", "register-usage" }, input)
end

--- AWS meteringmarketplace resolve-customer operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.resolve_customer(input)
	return common.execute_aws_command_with_input({ "meteringmarketplace", "resolve-customer" }, input)
end

return M
