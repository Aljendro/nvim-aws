-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: appmesh

local common = require("nvim-aws.common")

--- AWS appmesh service functions
local M = {}

--- AWS appmesh create-gateway-route operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_gateway_route(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "create-gateway-route" }, input, callbacks)
end

--- AWS appmesh create-mesh operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_mesh(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "create-mesh" }, input, callbacks)
end

--- AWS appmesh create-route operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_route(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "create-route" }, input, callbacks)
end

--- AWS appmesh create-virtual-gateway operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_virtual_gateway(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "create-virtual-gateway" }, input, callbacks)
end

--- AWS appmesh create-virtual-node operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_virtual_node(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "create-virtual-node" }, input, callbacks)
end

--- AWS appmesh create-virtual-router operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_virtual_router(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "create-virtual-router" }, input, callbacks)
end

--- AWS appmesh create-virtual-service operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_virtual_service(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "create-virtual-service" }, input, callbacks)
end

--- AWS appmesh delete-gateway-route operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_gateway_route(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "delete-gateway-route" }, input, callbacks)
end

--- AWS appmesh delete-mesh operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_mesh(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "delete-mesh" }, input, callbacks)
end

--- AWS appmesh delete-route operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_route(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "delete-route" }, input, callbacks)
end

--- AWS appmesh delete-virtual-gateway operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_virtual_gateway(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "delete-virtual-gateway" }, input, callbacks)
end

--- AWS appmesh delete-virtual-node operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_virtual_node(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "delete-virtual-node" }, input, callbacks)
end

--- AWS appmesh delete-virtual-router operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_virtual_router(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "delete-virtual-router" }, input, callbacks)
end

--- AWS appmesh delete-virtual-service operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_virtual_service(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "delete-virtual-service" }, input, callbacks)
end

--- AWS appmesh describe-gateway-route operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_gateway_route(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "describe-gateway-route" }, input, callbacks)
end

--- AWS appmesh describe-mesh operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_mesh(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "describe-mesh" }, input, callbacks)
end

--- AWS appmesh describe-route operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_route(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "describe-route" }, input, callbacks)
end

--- AWS appmesh describe-virtual-gateway operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_virtual_gateway(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "describe-virtual-gateway" }, input, callbacks)
end

--- AWS appmesh describe-virtual-node operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_virtual_node(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "describe-virtual-node" }, input, callbacks)
end

--- AWS appmesh describe-virtual-router operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_virtual_router(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "describe-virtual-router" }, input, callbacks)
end

--- AWS appmesh describe-virtual-service operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_virtual_service(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "describe-virtual-service" }, input, callbacks)
end

--- AWS appmesh list-gateway-routes operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_gateway_routes(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "list-gateway-routes" }, input, callbacks)
end

--- AWS appmesh list-meshes operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_meshes(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "list-meshes" }, input, callbacks)
end

--- AWS appmesh list-routes operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_routes(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "list-routes" }, input, callbacks)
end

--- AWS appmesh list-tags-for-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_tags_for_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "list-tags-for-resource" }, input, callbacks)
end

--- AWS appmesh list-virtual-gateways operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_virtual_gateways(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "list-virtual-gateways" }, input, callbacks)
end

--- AWS appmesh list-virtual-nodes operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_virtual_nodes(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "list-virtual-nodes" }, input, callbacks)
end

--- AWS appmesh list-virtual-routers operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_virtual_routers(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "list-virtual-routers" }, input, callbacks)
end

--- AWS appmesh list-virtual-services operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_virtual_services(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "list-virtual-services" }, input, callbacks)
end

--- AWS appmesh tag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.tag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "tag-resource" }, input, callbacks)
end

--- AWS appmesh untag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.untag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "untag-resource" }, input, callbacks)
end

--- AWS appmesh update-gateway-route operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_gateway_route(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "update-gateway-route" }, input, callbacks)
end

--- AWS appmesh update-mesh operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_mesh(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "update-mesh" }, input, callbacks)
end

--- AWS appmesh update-route operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_route(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "update-route" }, input, callbacks)
end

--- AWS appmesh update-virtual-gateway operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_virtual_gateway(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "update-virtual-gateway" }, input, callbacks)
end

--- AWS appmesh update-virtual-node operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_virtual_node(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "update-virtual-node" }, input, callbacks)
end

--- AWS appmesh update-virtual-router operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_virtual_router(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "update-virtual-router" }, input, callbacks)
end

--- AWS appmesh update-virtual-service operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_virtual_service(input, callbacks)
	return common.execute_aws_command_skeleton({ "appmesh", "update-virtual-service" }, input, callbacks)
end

return M
