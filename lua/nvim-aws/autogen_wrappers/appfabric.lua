-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: appfabric

local common = require("nvim-aws.common")

--- AWS APPFABRIC service functions
local M = {}

--- AWS appfabric batch-get-user-access-tasks operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.batch_get_user_access_tasks(input)
	return common.execute_aws_command_with_input({ "appfabric", "batch-get-user-access-tasks" }, input)
end

--- AWS appfabric connect-app-authorization operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.connect_app_authorization(input)
	return common.execute_aws_command_with_input({ "appfabric", "connect-app-authorization" }, input)
end

--- AWS appfabric create-app-authorization operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_app_authorization(input)
	return common.execute_aws_command_with_input({ "appfabric", "create-app-authorization" }, input)
end

--- AWS appfabric create-app-bundle operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_app_bundle(input)
	return common.execute_aws_command_with_input({ "appfabric", "create-app-bundle" }, input)
end

--- AWS appfabric create-ingestion operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_ingestion(input)
	return common.execute_aws_command_with_input({ "appfabric", "create-ingestion" }, input)
end

--- AWS appfabric create-ingestion-destination operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_ingestion_destination(input)
	return common.execute_aws_command_with_input({ "appfabric", "create-ingestion-destination" }, input)
end

--- AWS appfabric delete-app-authorization operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_app_authorization(input)
	return common.execute_aws_command_with_input({ "appfabric", "delete-app-authorization" }, input)
end

--- AWS appfabric delete-app-bundle operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_app_bundle(input)
	return common.execute_aws_command_with_input({ "appfabric", "delete-app-bundle" }, input)
end

--- AWS appfabric delete-ingestion operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_ingestion(input)
	return common.execute_aws_command_with_input({ "appfabric", "delete-ingestion" }, input)
end

--- AWS appfabric delete-ingestion-destination operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_ingestion_destination(input)
	return common.execute_aws_command_with_input({ "appfabric", "delete-ingestion-destination" }, input)
end

--- AWS appfabric get-app-authorization operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_app_authorization(input)
	return common.execute_aws_command_with_input({ "appfabric", "get-app-authorization" }, input)
end

--- AWS appfabric get-app-bundle operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_app_bundle(input)
	return common.execute_aws_command_with_input({ "appfabric", "get-app-bundle" }, input)
end

--- AWS appfabric get-ingestion operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_ingestion(input)
	return common.execute_aws_command_with_input({ "appfabric", "get-ingestion" }, input)
end

--- AWS appfabric get-ingestion-destination operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_ingestion_destination(input)
	return common.execute_aws_command_with_input({ "appfabric", "get-ingestion-destination" }, input)
end

--- AWS appfabric list-app-authorizations operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_app_authorizations(input)
	return common.execute_aws_command_with_input({ "appfabric", "list-app-authorizations" }, input)
end

--- AWS appfabric list-app-bundles operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_app_bundles(input)
	return common.execute_aws_command_with_input({ "appfabric", "list-app-bundles" }, input)
end

--- AWS appfabric list-ingestion-destinations operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_ingestion_destinations(input)
	return common.execute_aws_command_with_input({ "appfabric", "list-ingestion-destinations" }, input)
end

--- AWS appfabric list-ingestions operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_ingestions(input)
	return common.execute_aws_command_with_input({ "appfabric", "list-ingestions" }, input)
end

--- AWS appfabric list-tags-for-resource operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tags_for_resource(input)
	return common.execute_aws_command_with_input({ "appfabric", "list-tags-for-resource" }, input)
end

--- AWS appfabric start-ingestion operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.start_ingestion(input)
	return common.execute_aws_command_with_input({ "appfabric", "start-ingestion" }, input)
end

--- AWS appfabric start-user-access-tasks operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.start_user_access_tasks(input)
	return common.execute_aws_command_with_input({ "appfabric", "start-user-access-tasks" }, input)
end

--- AWS appfabric stop-ingestion operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.stop_ingestion(input)
	return common.execute_aws_command_with_input({ "appfabric", "stop-ingestion" }, input)
end

--- AWS appfabric tag-resource operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_resource(input)
	return common.execute_aws_command_with_input({ "appfabric", "tag-resource" }, input)
end

--- AWS appfabric untag-resource operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_resource(input)
	return common.execute_aws_command_with_input({ "appfabric", "untag-resource" }, input)
end

--- AWS appfabric update-app-authorization operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_app_authorization(input)
	return common.execute_aws_command_with_input({ "appfabric", "update-app-authorization" }, input)
end

--- AWS appfabric update-ingestion-destination operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_ingestion_destination(input)
	return common.execute_aws_command_with_input({ "appfabric", "update-ingestion-destination" }, input)
end

return M
