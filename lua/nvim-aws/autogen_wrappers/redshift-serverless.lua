-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-07 21:36:03
-- AWS Service: redshift-serverless

local common = require("nvim-aws.wrappers.common")

--- AWS REDSHIFT-SERVERLESS service functions
local M = {}

--- Creates a custom domain association for Amazon Redshift Serverless
--- @param input table The input table for the create_custom_domain_association command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_custom_domain_association(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "create-custom-domain-association" }, input)
end

--- Deletes a custom domain association for Amazon Redshift Serverless
--- @param input table The input table for the delete_custom_domain_association command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_custom_domain_association(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "delete-custom-domain-association" }, input)
end

--- Deletes the specified resource policy
--- @param input table The input table for the delete_resource_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_resource_policy(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "delete-resource-policy" }, input)
end

--- Returns a database user name and temporary password with temporary authorization to log in to Amazon Redshift Serverless
--- @param input table The input table for the get_credentials command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_credentials(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "get-credentials" }, input)
end

--- Gets information about a specific custom domain association
--- @param input table The input table for the get_custom_domain_association command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_custom_domain_association(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "get-custom-domain-association" }, input)
end

--- Returns a resource policy
--- @param input table The input table for the get_resource_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_resource_policy(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "get-resource-policy" }, input)
end

--- Get the Redshift Serverless version for a specified track
--- @param input table The input table for the get_track command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_track(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "get-track" }, input)
end

--- Lists custom domain associations for Amazon Redshift Serverless
--- @param input table The input table for the list_custom_domain_associations command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_custom_domain_associations(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "list-custom-domain-associations" }, input)
end

--- Lists the tags assigned to a resource
--- @param input table The input table for the list_tags_for_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tags_for_resource(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "list-tags-for-resource" }, input)
end

--- List the Amazon Redshift Serverless versions
--- @param input table The input table for the list_tracks command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tracks(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "list-tracks" }, input)
end

--- Creates or updates a resource policy
--- @param input table The input table for the put_resource_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.put_resource_policy(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "put-resource-policy" }, input)
end

--- Assigns one or more tags to a resource
--- @param input table The input table for the tag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_resource(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "tag-resource" }, input)
end

--- Removes a tag or set of tags from a resource
--- @param input table The input table for the untag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_resource(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "untag-resource" }, input)
end

--- Updates an Amazon Redshift Serverless certificate associated with a custom domain
--- @param input table The input table for the update_custom_domain_association command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_custom_domain_association(input)
	return common.execute_aws_command_with_input({ "redshift-serverless", "update-custom-domain-association" }, input)
end

return M
