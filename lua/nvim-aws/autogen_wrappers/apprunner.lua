-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: apprunner

local common = require("nvim-aws.common")

--- AWS apprunner service functions
local M = {}

--- AWS apprunner associate-custom-domain operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.associate_custom_domain(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "associate-custom-domain" }, input, callbacks)
end

--- AWS apprunner create-auto-scaling-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_auto_scaling_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "create-auto-scaling-configuration" }, input, callbacks)
end

--- AWS apprunner create-connection operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_connection(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "create-connection" }, input, callbacks)
end

--- AWS apprunner create-observability-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_observability_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "create-observability-configuration" }, input, callbacks)
end

--- AWS apprunner create-service operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_service(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "create-service" }, input, callbacks)
end

--- AWS apprunner create-vpc-connector operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_vpc_connector(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "create-vpc-connector" }, input, callbacks)
end

--- AWS apprunner create-vpc-ingress-connection operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_vpc_ingress_connection(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "create-vpc-ingress-connection" }, input, callbacks)
end

--- AWS apprunner delete-auto-scaling-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_auto_scaling_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "delete-auto-scaling-configuration" }, input, callbacks)
end

--- AWS apprunner delete-connection operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_connection(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "delete-connection" }, input, callbacks)
end

--- AWS apprunner delete-observability-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_observability_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "delete-observability-configuration" }, input, callbacks)
end

--- AWS apprunner delete-service operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_service(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "delete-service" }, input, callbacks)
end

--- AWS apprunner delete-vpc-connector operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_vpc_connector(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "delete-vpc-connector" }, input, callbacks)
end

--- AWS apprunner delete-vpc-ingress-connection operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_vpc_ingress_connection(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "delete-vpc-ingress-connection" }, input, callbacks)
end

--- AWS apprunner describe-auto-scaling-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_auto_scaling_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "describe-auto-scaling-configuration" }, input, callbacks)
end

--- AWS apprunner describe-custom-domains operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_custom_domains(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "describe-custom-domains" }, input, callbacks)
end

--- AWS apprunner describe-observability-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_observability_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "describe-observability-configuration" }, input, callbacks)
end

--- AWS apprunner describe-service operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_service(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "describe-service" }, input, callbacks)
end

--- AWS apprunner describe-vpc-connector operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_vpc_connector(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "describe-vpc-connector" }, input, callbacks)
end

--- AWS apprunner describe-vpc-ingress-connection operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_vpc_ingress_connection(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "describe-vpc-ingress-connection" }, input, callbacks)
end

--- AWS apprunner disassociate-custom-domain operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.disassociate_custom_domain(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "disassociate-custom-domain" }, input, callbacks)
end

--- AWS apprunner list-auto-scaling-configurations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_auto_scaling_configurations(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "list-auto-scaling-configurations" }, input, callbacks)
end

--- AWS apprunner list-connections operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_connections(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "list-connections" }, input, callbacks)
end

--- AWS apprunner list-observability-configurations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_observability_configurations(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "list-observability-configurations" }, input, callbacks)
end

--- AWS apprunner list-operations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_operations(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "list-operations" }, input, callbacks)
end

--- AWS apprunner list-services operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_services(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "list-services" }, input, callbacks)
end

--- AWS apprunner list-services-for-auto-scaling-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_services_for_auto_scaling_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "list-services-for-auto-scaling-configuration" }, input, callbacks)
end

--- AWS apprunner list-tags-for-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_tags_for_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "list-tags-for-resource" }, input, callbacks)
end

--- AWS apprunner list-vpc-connectors operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_vpc_connectors(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "list-vpc-connectors" }, input, callbacks)
end

--- AWS apprunner list-vpc-ingress-connections operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_vpc_ingress_connections(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "list-vpc-ingress-connections" }, input, callbacks)
end

--- AWS apprunner pause-service operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.pause_service(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "pause-service" }, input, callbacks)
end

--- AWS apprunner resume-service operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.resume_service(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "resume-service" }, input, callbacks)
end

--- AWS apprunner start-deployment operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.start_deployment(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "start-deployment" }, input, callbacks)
end

--- AWS apprunner tag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.tag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "tag-resource" }, input, callbacks)
end

--- AWS apprunner untag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.untag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "untag-resource" }, input, callbacks)
end

--- AWS apprunner update-default-auto-scaling-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_default_auto_scaling_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "update-default-auto-scaling-configuration" }, input, callbacks)
end

--- AWS apprunner update-service operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_service(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "update-service" }, input, callbacks)
end

--- AWS apprunner update-vpc-ingress-connection operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_vpc_ingress_connection(input, callbacks)
	return common.execute_aws_command_skeleton({ "apprunner", "update-vpc-ingress-connection" }, input, callbacks)
end

return M
