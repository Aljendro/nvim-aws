-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: iotfleetwise

local common = require("nvim-aws.common")

--- AWS iotfleetwise service functions
local M = {}

--- AWS iotfleetwise associate-vehicle-fleet operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.associate_vehicle_fleet(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "associate-vehicle-fleet" }, input, callbacks)
end

--- AWS iotfleetwise batch-create-vehicle operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.batch_create_vehicle(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "batch-create-vehicle" }, input, callbacks)
end

--- AWS iotfleetwise batch-update-vehicle operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.batch_update_vehicle(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "batch-update-vehicle" }, input, callbacks)
end

--- AWS iotfleetwise create-campaign operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_campaign(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "create-campaign" }, input, callbacks)
end

--- AWS iotfleetwise create-decoder-manifest operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_decoder_manifest(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "create-decoder-manifest" }, input, callbacks)
end

--- AWS iotfleetwise create-fleet operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_fleet(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "create-fleet" }, input, callbacks)
end

--- AWS iotfleetwise create-model-manifest operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_model_manifest(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "create-model-manifest" }, input, callbacks)
end

--- AWS iotfleetwise create-signal-catalog operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_signal_catalog(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "create-signal-catalog" }, input, callbacks)
end

--- AWS iotfleetwise create-state-template operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_state_template(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "create-state-template" }, input, callbacks)
end

--- AWS iotfleetwise create-vehicle operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_vehicle(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "create-vehicle" }, input, callbacks)
end

--- AWS iotfleetwise delete-campaign operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_campaign(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "delete-campaign" }, input, callbacks)
end

--- AWS iotfleetwise delete-decoder-manifest operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_decoder_manifest(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "delete-decoder-manifest" }, input, callbacks)
end

--- AWS iotfleetwise delete-fleet operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_fleet(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "delete-fleet" }, input, callbacks)
end

--- AWS iotfleetwise delete-model-manifest operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_model_manifest(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "delete-model-manifest" }, input, callbacks)
end

--- AWS iotfleetwise delete-signal-catalog operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_signal_catalog(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "delete-signal-catalog" }, input, callbacks)
end

--- AWS iotfleetwise delete-state-template operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_state_template(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "delete-state-template" }, input, callbacks)
end

--- AWS iotfleetwise delete-vehicle operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_vehicle(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "delete-vehicle" }, input, callbacks)
end

--- AWS iotfleetwise disassociate-vehicle-fleet operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.disassociate_vehicle_fleet(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "disassociate-vehicle-fleet" }, input, callbacks)
end

--- AWS iotfleetwise get-campaign operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_campaign(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "get-campaign" }, input, callbacks)
end

--- AWS iotfleetwise get-decoder-manifest operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_decoder_manifest(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "get-decoder-manifest" }, input, callbacks)
end

--- AWS iotfleetwise get-encryption-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_encryption_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "get-encryption-configuration" }, input, callbacks)
end

--- AWS iotfleetwise get-fleet operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_fleet(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "get-fleet" }, input, callbacks)
end

--- AWS iotfleetwise get-logging-options operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_logging_options(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "get-logging-options" }, input, callbacks)
end

--- AWS iotfleetwise get-model-manifest operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_model_manifest(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "get-model-manifest" }, input, callbacks)
end

--- AWS iotfleetwise get-register-account-status operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_register_account_status(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "get-register-account-status" }, input, callbacks)
end

--- AWS iotfleetwise get-signal-catalog operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_signal_catalog(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "get-signal-catalog" }, input, callbacks)
end

--- AWS iotfleetwise get-state-template operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_state_template(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "get-state-template" }, input, callbacks)
end

--- AWS iotfleetwise get-vehicle operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_vehicle(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "get-vehicle" }, input, callbacks)
end

--- AWS iotfleetwise get-vehicle-status operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_vehicle_status(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "get-vehicle-status" }, input, callbacks)
end

--- AWS iotfleetwise import-decoder-manifest operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.import_decoder_manifest(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "import-decoder-manifest" }, input, callbacks)
end

--- AWS iotfleetwise import-signal-catalog operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.import_signal_catalog(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "import-signal-catalog" }, input, callbacks)
end

--- AWS iotfleetwise list-campaigns operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_campaigns(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-campaigns" }, input, callbacks)
end

--- AWS iotfleetwise list-decoder-manifest-network-interfaces operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_decoder_manifest_network_interfaces(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-decoder-manifest-network-interfaces" }, input, callbacks)
end

--- AWS iotfleetwise list-decoder-manifest-signals operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_decoder_manifest_signals(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-decoder-manifest-signals" }, input, callbacks)
end

--- AWS iotfleetwise list-decoder-manifests operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_decoder_manifests(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-decoder-manifests" }, input, callbacks)
end

--- AWS iotfleetwise list-fleets operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_fleets(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-fleets" }, input, callbacks)
end

--- AWS iotfleetwise list-fleets-for-vehicle operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_fleets_for_vehicle(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-fleets-for-vehicle" }, input, callbacks)
end

--- AWS iotfleetwise list-model-manifest-nodes operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_model_manifest_nodes(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-model-manifest-nodes" }, input, callbacks)
end

--- AWS iotfleetwise list-model-manifests operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_model_manifests(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-model-manifests" }, input, callbacks)
end

--- AWS iotfleetwise list-signal-catalog-nodes operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_signal_catalog_nodes(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-signal-catalog-nodes" }, input, callbacks)
end

--- AWS iotfleetwise list-signal-catalogs operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_signal_catalogs(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-signal-catalogs" }, input, callbacks)
end

--- AWS iotfleetwise list-state-templates operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_state_templates(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-state-templates" }, input, callbacks)
end

--- AWS iotfleetwise list-tags-for-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_tags_for_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-tags-for-resource" }, input, callbacks)
end

--- AWS iotfleetwise list-vehicles operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_vehicles(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-vehicles" }, input, callbacks)
end

--- AWS iotfleetwise list-vehicles-in-fleet operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_vehicles_in_fleet(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "list-vehicles-in-fleet" }, input, callbacks)
end

--- AWS iotfleetwise put-encryption-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.put_encryption_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "put-encryption-configuration" }, input, callbacks)
end

--- AWS iotfleetwise put-logging-options operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.put_logging_options(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "put-logging-options" }, input, callbacks)
end

--- AWS iotfleetwise register-account operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.register_account(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "register-account" }, input, callbacks)
end

--- AWS iotfleetwise tag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.tag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "tag-resource" }, input, callbacks)
end

--- AWS iotfleetwise untag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.untag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "untag-resource" }, input, callbacks)
end

--- AWS iotfleetwise update-campaign operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_campaign(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "update-campaign" }, input, callbacks)
end

--- AWS iotfleetwise update-decoder-manifest operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_decoder_manifest(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "update-decoder-manifest" }, input, callbacks)
end

--- AWS iotfleetwise update-fleet operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_fleet(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "update-fleet" }, input, callbacks)
end

--- AWS iotfleetwise update-model-manifest operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_model_manifest(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "update-model-manifest" }, input, callbacks)
end

--- AWS iotfleetwise update-signal-catalog operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_signal_catalog(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "update-signal-catalog" }, input, callbacks)
end

--- AWS iotfleetwise update-state-template operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_state_template(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "update-state-template" }, input, callbacks)
end

--- AWS iotfleetwise update-vehicle operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_vehicle(input, callbacks)
	return common.execute_aws_command_skeleton({ "iotfleetwise", "update-vehicle" }, input, callbacks)
end

return M
