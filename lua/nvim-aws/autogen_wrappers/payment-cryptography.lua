-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-07 21:36:06
-- AWS Service: payment-cryptography

local common = require("nvim-aws.wrappers.common")

--- AWS PAYMENT-CRYPTOGRAPHY service functions
local M = {}

--- Exports a key from Amazon Web Services Payment Cryptography
--- @param input table The input table for the export_key command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.export_key(input)
	return common.execute_aws_command_with_input({ "payment-cryptography", "export-key" }, input)
end

--- Gets the export token and the signing key certificate to initiate a TR-34 key export from Amazon Web Services Payment Cryptography
--- @param input table The input table for the get_parameters_for_export command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_parameters_for_export(input)
	return common.execute_aws_command_with_input({ "payment-cryptography", "get-parameters-for-export" }, input)
end

--- Gets the import token and the wrapping key certificate in PEM format (base64 encoded) to initiate a TR-34 WrappedKeyBlock or a RSA WrappedKeyCryptogram import into Amazon Web Services Payment Cryptography
--- @param input table The input table for the get_parameters_for_import command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_parameters_for_import(input)
	return common.execute_aws_command_with_input({ "payment-cryptography", "get-parameters-for-import" }, input)
end

--- Gets the public key certificate of the asymmetric key pair that exists within Amazon Web Services Payment Cryptography
--- @param input table The input table for the get_public_key_certificate command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_public_key_certificate(input)
	return common.execute_aws_command_with_input({ "payment-cryptography", "get-public-key-certificate" }, input)
end

--- Imports symmetric keys and public key certificates in PEM format (base64 encoded) into Amazon Web Services Payment Cryptography
--- @param input table The input table for the import_key command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.import_key(input)
	return common.execute_aws_command_with_input({ "payment-cryptography", "import-key" }, input)
end

--- Lists the tags for an Amazon Web Services resource
--- @param input table The input table for the list_tags_for_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tags_for_resource(input)
	return common.execute_aws_command_with_input({ "payment-cryptography", "list-tags-for-resource" }, input)
end

--- Adds or edits tags on an Amazon Web Services Payment Cryptography key
--- @param input table The input table for the tag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_resource(input)
	return common.execute_aws_command_with_input({ "payment-cryptography", "tag-resource" }, input)
end

--- Deletes a tag from an Amazon Web Services Payment Cryptography key
--- @param input table The input table for the untag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_resource(input)
	return common.execute_aws_command_with_input({ "payment-cryptography", "untag-resource" }, input)
end

return M
