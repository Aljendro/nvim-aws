-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: ivs-realtime

local common = require("nvim-aws.wrappers.common")

--- AWS IVS-REALTIME service functions
local M = {}

--- Creates an EncoderConfiguration object
--- @param input table The input table for the create_encoder_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_encoder_configuration(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "create-encoder-configuration" }, input)
end

--- Creates a new IngestConfiguration resource, used to specify the ingest protocol for a stage
--- @param input table The input table for the create_ingest_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_ingest_configuration(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "create-ingest-configuration" }, input)
end

--- Creates an additional token for a specified stage
--- @param input table The input table for the create_participant_token command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_participant_token(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "create-participant-token" }, input)
end

--- Creates a new stage (and optionally participant tokens)
--- @param input table The input table for the create_stage command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_stage(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "create-stage" }, input)
end

--- Creates a new storage configuration, used to enable recording to Amazon S3
--- @param input table The input table for the create_storage_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_storage_configuration(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "create-storage-configuration" }, input)
end

--- Deletes an EncoderConfiguration resource
--- @param input table The input table for the delete_encoder_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_encoder_configuration(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "delete-encoder-configuration" }, input)
end

--- Deletes a specified IngestConfiguration, so it can no longer be used to broadcast
--- @param input table The input table for the delete_ingest_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_ingest_configuration(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "delete-ingest-configuration" }, input)
end

--- Deletes the specified public key used to sign stage participant tokens
--- @param input table The input table for the delete_public_key command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_public_key(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "delete-public-key" }, input)
end

--- Shuts down and deletes the specified stage (disconnecting all participants)
--- @param input table The input table for the delete_stage command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_stage(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "delete-stage" }, input)
end

--- Deletes the storage configuration for the specified ARN
--- @param input table The input table for the delete_storage_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_storage_configuration(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "delete-storage-configuration" }, input)
end

--- Disconnects a specified participant from a specified stage
--- @param input table The input table for the disconnect_participant command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.disconnect_participant(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "disconnect-participant" }, input)
end

--- Get information about the specified Composition resource
--- @param input table The input table for the get_composition command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_composition(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "get-composition" }, input)
end

--- Gets information about the specified EncoderConfiguration resource
--- @param input table The input table for the get_encoder_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_encoder_configuration(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "get-encoder-configuration" }, input)
end

--- Gets information about the specified IngestConfiguration
--- @param input table The input table for the get_ingest_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_ingest_configuration(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "get-ingest-configuration" }, input)
end

--- Gets information about the specified participant token
--- @param input table The input table for the get_participant command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_participant(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "get-participant" }, input)
end

--- Gets information for the specified public key
--- @param input table The input table for the get_public_key command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_public_key(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "get-public-key" }, input)
end

--- Gets information for the specified stage
--- @param input table The input table for the get_stage command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_stage(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "get-stage" }, input)
end

--- Gets information for the specified stage session
--- @param input table The input table for the get_stage_session command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_stage_session(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "get-stage-session" }, input)
end

--- Gets the storage configuration for the specified ARN
--- @param input table The input table for the get_storage_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_storage_configuration(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "get-storage-configuration" }, input)
end

--- Import a public key to be used for signing stage participant tokens
--- @param input table The input table for the import_public_key command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.import_public_key(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "import-public-key" }, input)
end

--- Gets summary information about all Compositions in your account, in the AWS region where the API request is processed
--- @param input table The input table for the list_compositions command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_compositions(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "list-compositions" }, input)
end

--- Gets summary information about all EncoderConfigurations in your account, in the AWS region where the API request is processed
--- @param input table The input table for the list_encoder_configurations command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_encoder_configurations(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "list-encoder-configurations" }, input)
end

--- Lists all IngestConfigurations in your account, in the AWS region where the API request is processed
--- @param input table The input table for the list_ingest_configurations command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_ingest_configurations(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "list-ingest-configurations" }, input)
end

--- Lists events for a specified participant that occurred during a specified stage session
--- @param input table The input table for the list_participant_events command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_participant_events(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "list-participant-events" }, input)
end

--- Lists all participants in a specified stage session
--- @param input table The input table for the list_participants command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_participants(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "list-participants" }, input)
end

--- Gets summary information about all public keys in your account, in the AWS region where the API request is processed
--- @param input table The input table for the list_public_keys command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_public_keys(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "list-public-keys" }, input)
end

--- Gets all sessions for a specified stage
--- @param input table The input table for the list_stage_sessions command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_stage_sessions(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "list-stage-sessions" }, input)
end

--- Gets summary information about all stages in your account, in the AWS region where the API request is processed
--- @param input table The input table for the list_stages command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_stages(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "list-stages" }, input)
end

--- Gets summary information about all storage configurations in your account, in the AWS region where the API request is processed
--- @param input table The input table for the list_storage_configurations command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_storage_configurations(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "list-storage-configurations" }, input)
end

--- Gets information about AWS tags for the specified ARN
--- @param input table The input table for the list_tags_for_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tags_for_resource(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "list-tags-for-resource" }, input)
end

--- Starts a Composition from a stage based on the configuration provided in the request
--- @param input table The input table for the start_composition command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.start_composition(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "start-composition" }, input)
end

--- Stops and deletes a Composition resource
--- @param input table The input table for the stop_composition command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.stop_composition(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "stop-composition" }, input)
end

--- Adds or updates tags for the AWS resource with the specified ARN
--- @param input table The input table for the tag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_resource(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "tag-resource" }, input)
end

--- Removes tags from the resource with the specified ARN
--- @param input table The input table for the untag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_resource(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "untag-resource" }, input)
end

--- Updates a specified IngestConfiguration
--- @param input table The input table for the update_ingest_configuration command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_ingest_configuration(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "update-ingest-configuration" }, input)
end

--- Updates a stage’s configuration
--- @param input table The input table for the update_stage command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_stage(input)
	return common.execute_aws_command_with_input({ "ivs-realtime", "update-stage" }, input)
end

return M
