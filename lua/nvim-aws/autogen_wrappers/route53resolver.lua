-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: route53resolver

local common = require("nvim-aws.wrappers.common")

--- AWS ROUTE53RESOLVER service functions
local M = {}

--- Associates a FirewallRuleGroup with a VPC, to provide DNS filtering for the VPC
--- @param input table The input table for the associate_firewall_rule_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.associate_firewall_rule_group(input)
	return common.execute_aws_command_with_input({ "route53resolver", "associate-firewall-rule-group" }, input)
end

--- Adds IP addresses to an inbound or an outbound Resolver endpoint
--- @param input table The input table for the associate_resolver_endpoint_ip_address command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.associate_resolver_endpoint_ip_address(input)
	return common.execute_aws_command_with_input({ "route53resolver", "associate-resolver-endpoint-ip-address" }, input)
end

--- Associates an Amazon VPC with a specified query logging configuration
--- @param input table The input table for the associate_resolver_query_log_config command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.associate_resolver_query_log_config(input)
	return common.execute_aws_command_with_input({ "route53resolver", "associate-resolver-query-log-config" }, input)
end

--- Associates a Resolver rule with a VPC
--- @param input table The input table for the associate_resolver_rule command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.associate_resolver_rule(input)
	return common.execute_aws_command_with_input({ "route53resolver", "associate-resolver-rule" }, input)
end

--- Creates an empty firewall domain list for use in DNS Firewall rules
--- @param input table The input table for the create_firewall_domain_list command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_firewall_domain_list(input)
	return common.execute_aws_command_with_input({ "route53resolver", "create-firewall-domain-list" }, input)
end

--- Creates a single DNS Firewall rule in the specified rule group, using the specified domain list
--- @param input table The input table for the create_firewall_rule command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_firewall_rule(input)
	return common.execute_aws_command_with_input({ "route53resolver", "create-firewall-rule" }, input)
end

--- Creates an empty DNS Firewall rule group for filtering DNS network traffic in a VPC
--- @param input table The input table for the create_firewall_rule_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_firewall_rule_group(input)
	return common.execute_aws_command_with_input({ "route53resolver", "create-firewall-rule-group" }, input)
end

--- Creates a Route 53 Resolver on an Outpost
--- @param input table The input table for the create_outpost_resolver command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_outpost_resolver(input)
	return common.execute_aws_command_with_input({ "route53resolver", "create-outpost-resolver" }, input)
end

--- Creates a Resolver endpoint
--- @param input table The input table for the create_resolver_endpoint command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_resolver_endpoint(input)
	return common.execute_aws_command_with_input({ "route53resolver", "create-resolver-endpoint" }, input)
end

--- Creates a Resolver query logging configuration, which defines where you want Resolver to save DNS query logs that originate in your VPCs
--- @param input table The input table for the create_resolver_query_log_config command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_resolver_query_log_config(input)
	return common.execute_aws_command_with_input({ "route53resolver", "create-resolver-query-log-config" }, input)
end

--- For DNS queries that originate in your VPCs, specifies which Resolver endpoint the queries pass through, one domain name that you want to forward to your network, and the IP addresses of the DNS resolvers in your network
--- @param input table The input table for the create_resolver_rule command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_resolver_rule(input)
	return common.execute_aws_command_with_input({ "route53resolver", "create-resolver-rule" }, input)
end

--- Deletes the specified domain list
--- @param input table The input table for the delete_firewall_domain_list command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_firewall_domain_list(input)
	return common.execute_aws_command_with_input({ "route53resolver", "delete-firewall-domain-list" }, input)
end

--- Deletes the specified firewall rule
--- @param input table The input table for the delete_firewall_rule command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_firewall_rule(input)
	return common.execute_aws_command_with_input({ "route53resolver", "delete-firewall-rule" }, input)
end

--- Deletes the specified firewall rule group
--- @param input table The input table for the delete_firewall_rule_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_firewall_rule_group(input)
	return common.execute_aws_command_with_input({ "route53resolver", "delete-firewall-rule-group" }, input)
end

--- Deletes a Resolver on the Outpost
--- @param input table The input table for the delete_outpost_resolver command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_outpost_resolver(input)
	return common.execute_aws_command_with_input({ "route53resolver", "delete-outpost-resolver" }, input)
end

--- Deletes a Resolver endpoint
--- @param input table The input table for the delete_resolver_endpoint command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_resolver_endpoint(input)
	return common.execute_aws_command_with_input({ "route53resolver", "delete-resolver-endpoint" }, input)
end

--- Deletes a query logging configuration
--- @param input table The input table for the delete_resolver_query_log_config command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_resolver_query_log_config(input)
	return common.execute_aws_command_with_input({ "route53resolver", "delete-resolver-query-log-config" }, input)
end

--- Deletes a Resolver rule
--- @param input table The input table for the delete_resolver_rule command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_resolver_rule(input)
	return common.execute_aws_command_with_input({ "route53resolver", "delete-resolver-rule" }, input)
end

--- Disassociates a FirewallRuleGroup from a VPC, to remove DNS filtering from the VPC
--- @param input table The input table for the disassociate_firewall_rule_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.disassociate_firewall_rule_group(input)
	return common.execute_aws_command_with_input({ "route53resolver", "disassociate-firewall-rule-group" }, input)
end

--- Removes IP addresses from an inbound or an outbound Resolver endpoint
--- @param input table The input table for the disassociate_resolver_endpoint_ip_address command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.disassociate_resolver_endpoint_ip_address(input)
	return common.execute_aws_command_with_input({ "route53resolver", "disassociate-resolver-endpoint-ip-address" }, input)
end

--- Disassociates a VPC from a query logging configuration
--- @param input table The input table for the disassociate_resolver_query_log_config command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.disassociate_resolver_query_log_config(input)
	return common.execute_aws_command_with_input({ "route53resolver", "disassociate-resolver-query-log-config" }, input)
end

--- Removes the association between a specified Resolver rule and a specified VPC
--- @param input table The input table for the disassociate_resolver_rule command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.disassociate_resolver_rule(input)
	return common.execute_aws_command_with_input({ "route53resolver", "disassociate-resolver-rule" }, input)
end

--- Retrieves the configuration of the firewall behavior provided by DNS Firewall for a single VPC from Amazon Virtual Private Cloud (Amazon VPC)
--- @param input table The input table for the get_firewall_config command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_firewall_config(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-firewall-config" }, input)
end

--- Retrieves the specified firewall domain list
--- @param input table The input table for the get_firewall_domain_list command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_firewall_domain_list(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-firewall-domain-list" }, input)
end

--- Retrieves the specified firewall rule group
--- @param input table The input table for the get_firewall_rule_group command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_firewall_rule_group(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-firewall-rule-group" }, input)
end

--- Retrieves a firewall rule group association, which enables DNS filtering for a VPC with one rule group
--- @param input table The input table for the get_firewall_rule_group_association command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_firewall_rule_group_association(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-firewall-rule-group-association" }, input)
end

--- Returns the Identity and Access Management (Amazon Web Services IAM) policy for sharing the specified rule group
--- @param input table The input table for the get_firewall_rule_group_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_firewall_rule_group_policy(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-firewall-rule-group-policy" }, input)
end

--- Gets information about a specified Resolver on the Outpost, such as its instance count and type, name, and the current status of the Resolver
--- @param input table The input table for the get_outpost_resolver command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_outpost_resolver(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-outpost-resolver" }, input)
end

--- Retrieves the behavior configuration of Route 53 Resolver behavior for a single VPC from Amazon Virtual Private Cloud
--- @param input table The input table for the get_resolver_config command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_resolver_config(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-resolver-config" }, input)
end

--- Gets DNSSEC validation information for a specified resource
--- @param input table The input table for the get_resolver_dnssec_config command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_resolver_dnssec_config(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-resolver-dnssec-config" }, input)
end

--- Gets information about a specified Resolver endpoint, such as whether it's an inbound or an outbound Resolver endpoint, and the current status of the endpoint
--- @param input table The input table for the get_resolver_endpoint command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_resolver_endpoint(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-resolver-endpoint" }, input)
end

--- Gets information about a specified Resolver query logging configuration, such as the number of VPCs that the configuration is logging queries for and the location that logs are sent to
--- @param input table The input table for the get_resolver_query_log_config command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_resolver_query_log_config(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-resolver-query-log-config" }, input)
end

--- Gets information about a specified association between a Resolver query logging configuration and an Amazon VPC
--- @param input table The input table for the get_resolver_query_log_config_association command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_resolver_query_log_config_association(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-resolver-query-log-config-association" }, input)
end

--- Gets information about a query logging policy
--- @param input table The input table for the get_resolver_query_log_config_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_resolver_query_log_config_policy(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-resolver-query-log-config-policy" }, input)
end

--- Gets information about a specified Resolver rule, such as the domain name that the rule forwards DNS queries for and the ID of the outbound Resolver endpoint that the rule is associated with
--- @param input table The input table for the get_resolver_rule command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_resolver_rule(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-resolver-rule" }, input)
end

--- Gets information about an association between a specified Resolver rule and a VPC
--- @param input table The input table for the get_resolver_rule_association command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_resolver_rule_association(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-resolver-rule-association" }, input)
end

--- Gets information about the Resolver rule policy for a specified rule
--- @param input table The input table for the get_resolver_rule_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_resolver_rule_policy(input)
	return common.execute_aws_command_with_input({ "route53resolver", "get-resolver-rule-policy" }, input)
end

--- Imports domain names from a file into a domain list, for use in a DNS firewall rule group
--- @param input table The input table for the import_firewall_domains command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.import_firewall_domains(input)
	return common.execute_aws_command_with_input({ "route53resolver", "import-firewall-domains" }, input)
end

--- Retrieves the firewall configurations that you have defined
--- @param input table The input table for the list_firewall_configs command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_firewall_configs(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-firewall-configs" }, input)
end

--- Retrieves the firewall domain lists that you have defined
--- @param input table The input table for the list_firewall_domain_lists command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_firewall_domain_lists(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-firewall-domain-lists" }, input)
end

--- Retrieves the domains that you have defined for the specified firewall domain list
--- @param input table The input table for the list_firewall_domains command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_firewall_domains(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-firewall-domains" }, input)
end

--- Retrieves the firewall rule group associations that you have defined
--- @param input table The input table for the list_firewall_rule_group_associations command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_firewall_rule_group_associations(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-firewall-rule-group-associations" }, input)
end

--- Retrieves the minimal high-level information for the rule groups that you have defined
--- @param input table The input table for the list_firewall_rule_groups command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_firewall_rule_groups(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-firewall-rule-groups" }, input)
end

--- Retrieves the firewall rules that you have defined for the specified firewall rule group
--- @param input table The input table for the list_firewall_rules command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_firewall_rules(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-firewall-rules" }, input)
end

--- Lists all the Resolvers on Outposts that were created using the current Amazon Web Services account
--- @param input table The input table for the list_outpost_resolvers command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_outpost_resolvers(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-outpost-resolvers" }, input)
end

--- Retrieves the Resolver configurations that you have defined
--- @param input table The input table for the list_resolver_configs command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_resolver_configs(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-resolver-configs" }, input)
end

--- Lists the configurations for DNSSEC validation that are associated with the current Amazon Web Services account
--- @param input table The input table for the list_resolver_dnssec_configs command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_resolver_dnssec_configs(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-resolver-dnssec-configs" }, input)
end

--- Gets the IP addresses for a specified Resolver endpoint
--- @param input table The input table for the list_resolver_endpoint_ip_addresses command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_resolver_endpoint_ip_addresses(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-resolver-endpoint-ip-addresses" }, input)
end

--- Lists all the Resolver endpoints that were created using the current Amazon Web Services account
--- @param input table The input table for the list_resolver_endpoints command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_resolver_endpoints(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-resolver-endpoints" }, input)
end

--- Lists information about associations between Amazon VPCs and query logging configurations
--- @param input table The input table for the list_resolver_query_log_config_associations command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_resolver_query_log_config_associations(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-resolver-query-log-config-associations" }, input)
end

--- Lists information about the specified query logging configurations
--- @param input table The input table for the list_resolver_query_log_configs command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_resolver_query_log_configs(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-resolver-query-log-configs" }, input)
end

--- Lists the associations that were created between Resolver rules and VPCs using the current Amazon Web Services account
--- @param input table The input table for the list_resolver_rule_associations command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_resolver_rule_associations(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-resolver-rule-associations" }, input)
end

--- Lists the Resolver rules that were created using the current Amazon Web Services account
--- @param input table The input table for the list_resolver_rules command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_resolver_rules(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-resolver-rules" }, input)
end

--- Lists the tags that you associated with the specified resource
--- @param input table The input table for the list_tags_for_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_tags_for_resource(input)
	return common.execute_aws_command_with_input({ "route53resolver", "list-tags-for-resource" }, input)
end

--- Attaches an Identity and Access Management (Amazon Web Services IAM) policy for sharing the rule group
--- @param input table The input table for the put_firewall_rule_group_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.put_firewall_rule_group_policy(input)
	return common.execute_aws_command_with_input({ "route53resolver", "put-firewall-rule-group-policy" }, input)
end

--- Specifies an Amazon Web Services account that you want to share a query logging configuration with, the query logging configuration that you want to share, and the operations that you want the account to be able to perform on the configuration
--- @param input table The input table for the put_resolver_query_log_config_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.put_resolver_query_log_config_policy(input)
	return common.execute_aws_command_with_input({ "route53resolver", "put-resolver-query-log-config-policy" }, input)
end

--- Specifies an Amazon Web Services rule that you want to share with another account, the account that you want to share the rule with, and the operations that you want the account to be able to perform on the rule
--- @param input table The input table for the put_resolver_rule_policy command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.put_resolver_rule_policy(input)
	return common.execute_aws_command_with_input({ "route53resolver", "put-resolver-rule-policy" }, input)
end

--- Adds one or more tags to a specified resource
--- @param input table The input table for the tag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.tag_resource(input)
	return common.execute_aws_command_with_input({ "route53resolver", "tag-resource" }, input)
end

--- Removes one or more tags from a specified resource
--- @param input table The input table for the untag_resource command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.untag_resource(input)
	return common.execute_aws_command_with_input({ "route53resolver", "untag-resource" }, input)
end

--- Updates the configuration of the firewall behavior provided by DNS Firewall for a single VPC from Amazon Virtual Private Cloud (Amazon VPC)
--- @param input table The input table for the update_firewall_config command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_firewall_config(input)
	return common.execute_aws_command_with_input({ "route53resolver", "update-firewall-config" }, input)
end

--- Updates the firewall domain list from an array of domain specifications
--- @param input table The input table for the update_firewall_domains command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_firewall_domains(input)
	return common.execute_aws_command_with_input({ "route53resolver", "update-firewall-domains" }, input)
end

--- Updates the specified firewall rule
--- @param input table The input table for the update_firewall_rule command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_firewall_rule(input)
	return common.execute_aws_command_with_input({ "route53resolver", "update-firewall-rule" }, input)
end

--- Changes the association of a FirewallRuleGroup with a VPC
--- @param input table The input table for the update_firewall_rule_group_association command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_firewall_rule_group_association(input)
	return common.execute_aws_command_with_input({ "route53resolver", "update-firewall-rule-group-association" }, input)
end

--- You can use UpdateOutpostResolver to update the instance count, type, or name of a Resolver on an Outpost
--- @param input table The input table for the update_outpost_resolver command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_outpost_resolver(input)
	return common.execute_aws_command_with_input({ "route53resolver", "update-outpost-resolver" }, input)
end

--- Updates the behavior configuration of Route 53 Resolver behavior for a single VPC from Amazon Virtual Private Cloud
--- @param input table The input table for the update_resolver_config command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_resolver_config(input)
	return common.execute_aws_command_with_input({ "route53resolver", "update-resolver-config" }, input)
end

--- Updates an existing DNSSEC validation configuration
--- @param input table The input table for the update_resolver_dnssec_config command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_resolver_dnssec_config(input)
	return common.execute_aws_command_with_input({ "route53resolver", "update-resolver-dnssec-config" }, input)
end

--- Updates the name, or endpoint type for an inbound or an outbound Resolver endpoint
--- @param input table The input table for the update_resolver_endpoint command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_resolver_endpoint(input)
	return common.execute_aws_command_with_input({ "route53resolver", "update-resolver-endpoint" }, input)
end

--- Updates settings for a specified Resolver rule
--- @param input table The input table for the update_resolver_rule command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_resolver_rule(input)
	return common.execute_aws_command_with_input({ "route53resolver", "update-resolver-rule" }, input)
end

return M
