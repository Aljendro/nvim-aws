-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: route53resolver

local common = require("nvim-aws.common")

--- AWS route53resolver service functions
local M = {}

--- AWS route53resolver associate-firewall-rule-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.associate_firewall_rule_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "associate-firewall-rule-group" }, input, callbacks)
end

--- AWS route53resolver associate-resolver-endpoint-ip-address operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.associate_resolver_endpoint_ip_address(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "associate-resolver-endpoint-ip-address" }, input, callbacks)
end

--- AWS route53resolver associate-resolver-query-log-config operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.associate_resolver_query_log_config(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "associate-resolver-query-log-config" }, input, callbacks)
end

--- AWS route53resolver associate-resolver-rule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.associate_resolver_rule(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "associate-resolver-rule" }, input, callbacks)
end

--- AWS route53resolver create-firewall-domain-list operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_firewall_domain_list(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "create-firewall-domain-list" }, input, callbacks)
end

--- AWS route53resolver create-firewall-rule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_firewall_rule(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "create-firewall-rule" }, input, callbacks)
end

--- AWS route53resolver create-firewall-rule-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_firewall_rule_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "create-firewall-rule-group" }, input, callbacks)
end

--- AWS route53resolver create-outpost-resolver operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_outpost_resolver(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "create-outpost-resolver" }, input, callbacks)
end

--- AWS route53resolver create-resolver-endpoint operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_resolver_endpoint(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "create-resolver-endpoint" }, input, callbacks)
end

--- AWS route53resolver create-resolver-query-log-config operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_resolver_query_log_config(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "create-resolver-query-log-config" }, input, callbacks)
end

--- AWS route53resolver create-resolver-rule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_resolver_rule(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "create-resolver-rule" }, input, callbacks)
end

--- AWS route53resolver delete-firewall-domain-list operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_firewall_domain_list(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "delete-firewall-domain-list" }, input, callbacks)
end

--- AWS route53resolver delete-firewall-rule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_firewall_rule(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "delete-firewall-rule" }, input, callbacks)
end

--- AWS route53resolver delete-firewall-rule-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_firewall_rule_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "delete-firewall-rule-group" }, input, callbacks)
end

--- AWS route53resolver delete-outpost-resolver operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_outpost_resolver(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "delete-outpost-resolver" }, input, callbacks)
end

--- AWS route53resolver delete-resolver-endpoint operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_resolver_endpoint(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "delete-resolver-endpoint" }, input, callbacks)
end

--- AWS route53resolver delete-resolver-query-log-config operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_resolver_query_log_config(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "delete-resolver-query-log-config" }, input, callbacks)
end

--- AWS route53resolver delete-resolver-rule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_resolver_rule(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "delete-resolver-rule" }, input, callbacks)
end

--- AWS route53resolver disassociate-firewall-rule-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.disassociate_firewall_rule_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "disassociate-firewall-rule-group" }, input, callbacks)
end

--- AWS route53resolver disassociate-resolver-endpoint-ip-address operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.disassociate_resolver_endpoint_ip_address(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "disassociate-resolver-endpoint-ip-address" }, input, callbacks)
end

--- AWS route53resolver disassociate-resolver-query-log-config operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.disassociate_resolver_query_log_config(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "disassociate-resolver-query-log-config" }, input, callbacks)
end

--- AWS route53resolver disassociate-resolver-rule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.disassociate_resolver_rule(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "disassociate-resolver-rule" }, input, callbacks)
end

--- AWS route53resolver get-firewall-config operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_firewall_config(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-firewall-config" }, input, callbacks)
end

--- AWS route53resolver get-firewall-domain-list operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_firewall_domain_list(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-firewall-domain-list" }, input, callbacks)
end

--- AWS route53resolver get-firewall-rule-group operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_firewall_rule_group(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-firewall-rule-group" }, input, callbacks)
end

--- AWS route53resolver get-firewall-rule-group-association operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_firewall_rule_group_association(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-firewall-rule-group-association" }, input, callbacks)
end

--- AWS route53resolver get-firewall-rule-group-policy operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_firewall_rule_group_policy(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-firewall-rule-group-policy" }, input, callbacks)
end

--- AWS route53resolver get-outpost-resolver operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_outpost_resolver(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-outpost-resolver" }, input, callbacks)
end

--- AWS route53resolver get-resolver-config operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_resolver_config(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-resolver-config" }, input, callbacks)
end

--- AWS route53resolver get-resolver-dnssec-config operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_resolver_dnssec_config(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-resolver-dnssec-config" }, input, callbacks)
end

--- AWS route53resolver get-resolver-endpoint operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_resolver_endpoint(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-resolver-endpoint" }, input, callbacks)
end

--- AWS route53resolver get-resolver-query-log-config operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_resolver_query_log_config(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-resolver-query-log-config" }, input, callbacks)
end

--- AWS route53resolver get-resolver-query-log-config-association operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_resolver_query_log_config_association(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-resolver-query-log-config-association" }, input, callbacks)
end

--- AWS route53resolver get-resolver-query-log-config-policy operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_resolver_query_log_config_policy(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-resolver-query-log-config-policy" }, input, callbacks)
end

--- AWS route53resolver get-resolver-rule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_resolver_rule(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-resolver-rule" }, input, callbacks)
end

--- AWS route53resolver get-resolver-rule-association operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_resolver_rule_association(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-resolver-rule-association" }, input, callbacks)
end

--- AWS route53resolver get-resolver-rule-policy operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_resolver_rule_policy(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "get-resolver-rule-policy" }, input, callbacks)
end

--- AWS route53resolver import-firewall-domains operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.import_firewall_domains(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "import-firewall-domains" }, input, callbacks)
end

--- AWS route53resolver list-firewall-configs operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_firewall_configs(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-firewall-configs" }, input, callbacks)
end

--- AWS route53resolver list-firewall-domain-lists operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_firewall_domain_lists(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-firewall-domain-lists" }, input, callbacks)
end

--- AWS route53resolver list-firewall-domains operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_firewall_domains(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-firewall-domains" }, input, callbacks)
end

--- AWS route53resolver list-firewall-rule-group-associations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_firewall_rule_group_associations(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-firewall-rule-group-associations" }, input, callbacks)
end

--- AWS route53resolver list-firewall-rule-groups operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_firewall_rule_groups(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-firewall-rule-groups" }, input, callbacks)
end

--- AWS route53resolver list-firewall-rules operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_firewall_rules(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-firewall-rules" }, input, callbacks)
end

--- AWS route53resolver list-outpost-resolvers operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_outpost_resolvers(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-outpost-resolvers" }, input, callbacks)
end

--- AWS route53resolver list-resolver-configs operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_resolver_configs(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-resolver-configs" }, input, callbacks)
end

--- AWS route53resolver list-resolver-dnssec-configs operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_resolver_dnssec_configs(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-resolver-dnssec-configs" }, input, callbacks)
end

--- AWS route53resolver list-resolver-endpoint-ip-addresses operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_resolver_endpoint_ip_addresses(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-resolver-endpoint-ip-addresses" }, input, callbacks)
end

--- AWS route53resolver list-resolver-endpoints operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_resolver_endpoints(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-resolver-endpoints" }, input, callbacks)
end

--- AWS route53resolver list-resolver-query-log-config-associations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_resolver_query_log_config_associations(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-resolver-query-log-config-associations" }, input, callbacks)
end

--- AWS route53resolver list-resolver-query-log-configs operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_resolver_query_log_configs(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-resolver-query-log-configs" }, input, callbacks)
end

--- AWS route53resolver list-resolver-rule-associations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_resolver_rule_associations(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-resolver-rule-associations" }, input, callbacks)
end

--- AWS route53resolver list-resolver-rules operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_resolver_rules(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-resolver-rules" }, input, callbacks)
end

--- AWS route53resolver list-tags-for-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_tags_for_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "list-tags-for-resource" }, input, callbacks)
end

--- AWS route53resolver put-firewall-rule-group-policy operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.put_firewall_rule_group_policy(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "put-firewall-rule-group-policy" }, input, callbacks)
end

--- AWS route53resolver put-resolver-query-log-config-policy operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.put_resolver_query_log_config_policy(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "put-resolver-query-log-config-policy" }, input, callbacks)
end

--- AWS route53resolver put-resolver-rule-policy operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.put_resolver_rule_policy(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "put-resolver-rule-policy" }, input, callbacks)
end

--- AWS route53resolver tag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.tag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "tag-resource" }, input, callbacks)
end

--- AWS route53resolver untag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.untag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "untag-resource" }, input, callbacks)
end

--- AWS route53resolver update-firewall-config operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_firewall_config(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "update-firewall-config" }, input, callbacks)
end

--- AWS route53resolver update-firewall-domains operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_firewall_domains(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "update-firewall-domains" }, input, callbacks)
end

--- AWS route53resolver update-firewall-rule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_firewall_rule(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "update-firewall-rule" }, input, callbacks)
end

--- AWS route53resolver update-firewall-rule-group-association operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_firewall_rule_group_association(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "update-firewall-rule-group-association" }, input, callbacks)
end

--- AWS route53resolver update-outpost-resolver operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_outpost_resolver(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "update-outpost-resolver" }, input, callbacks)
end

--- AWS route53resolver update-resolver-config operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_resolver_config(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "update-resolver-config" }, input, callbacks)
end

--- AWS route53resolver update-resolver-dnssec-config operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_resolver_dnssec_config(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "update-resolver-dnssec-config" }, input, callbacks)
end

--- AWS route53resolver update-resolver-endpoint operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_resolver_endpoint(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "update-resolver-endpoint" }, input, callbacks)
end

--- AWS route53resolver update-resolver-rule operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_resolver_rule(input, callbacks)
	return common.execute_aws_command_skeleton({ "route53resolver", "update-resolver-rule" }, input, callbacks)
end

return M
