-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: pca-connector-scep

local common = require("nvim-aws.common")

--- AWS pca-connector-scep service functions
local M = {}

--- AWS pca-connector-scep create-challenge operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_challenge(input, callbacks)
	return common.execute_aws_command_skeleton({ "pca-connector-scep", "create-challenge" }, input, callbacks)
end

--- AWS pca-connector-scep create-connector operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_connector(input, callbacks)
	return common.execute_aws_command_skeleton({ "pca-connector-scep", "create-connector" }, input, callbacks)
end

--- AWS pca-connector-scep delete-challenge operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_challenge(input, callbacks)
	return common.execute_aws_command_skeleton({ "pca-connector-scep", "delete-challenge" }, input, callbacks)
end

--- AWS pca-connector-scep delete-connector operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_connector(input, callbacks)
	return common.execute_aws_command_skeleton({ "pca-connector-scep", "delete-connector" }, input, callbacks)
end

--- AWS pca-connector-scep get-challenge-metadata operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_challenge_metadata(input, callbacks)
	return common.execute_aws_command_skeleton({ "pca-connector-scep", "get-challenge-metadata" }, input, callbacks)
end

--- AWS pca-connector-scep get-challenge-password operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_challenge_password(input, callbacks)
	return common.execute_aws_command_skeleton({ "pca-connector-scep", "get-challenge-password" }, input, callbacks)
end

--- AWS pca-connector-scep get-connector operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_connector(input, callbacks)
	return common.execute_aws_command_skeleton({ "pca-connector-scep", "get-connector" }, input, callbacks)
end

--- AWS pca-connector-scep list-challenge-metadata operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_challenge_metadata(input, callbacks)
	return common.execute_aws_command_skeleton({ "pca-connector-scep", "list-challenge-metadata" }, input, callbacks)
end

--- AWS pca-connector-scep list-connectors operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_connectors(input, callbacks)
	return common.execute_aws_command_skeleton({ "pca-connector-scep", "list-connectors" }, input, callbacks)
end

--- AWS pca-connector-scep list-tags-for-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_tags_for_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "pca-connector-scep", "list-tags-for-resource" }, input, callbacks)
end

--- AWS pca-connector-scep tag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.tag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "pca-connector-scep", "tag-resource" }, input, callbacks)
end

--- AWS pca-connector-scep untag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.untag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "pca-connector-scep", "untag-resource" }, input, callbacks)
end

return M
