-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: elastic-transcoder

local common = require("nvim-aws.wrappers.common")

--- AWS ELASTICTRANSCODER service functions
local M = {}

--- The CancelJob operation cancels an unfinished job
--- @param input table|nil The input table for the cancel_job command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.cancel_job(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "cancel-job" }, input)
end

--- When you create a job, Elastic Transcoder returns JSON data that includes the values that you specified plus information about the job that is created
--- @param input table|nil The input table for the create_job command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_job(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "create-job" }, input)
end

--- The CreatePipeline operation creates a pipeline with settings that you specify
--- @param input table|nil The input table for the create_pipeline command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_pipeline(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "create-pipeline" }, input)
end

--- The CreatePreset operation creates a preset with settings that you specify
--- @param input table|nil The input table for the create_preset command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.create_preset(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "create-preset" }, input)
end

--- The DeletePipeline operation removes a pipeline
--- @param input table|nil The input table for the delete_pipeline command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_pipeline(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "delete-pipeline" }, input)
end

--- The DeletePreset operation removes a preset that you've added in an AWS region
--- @param input table|nil The input table for the delete_preset command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.delete_preset(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "delete-preset" }, input)
end

--- The ListJobsByPipeline operation gets a list of the jobs currently in a pipeline
--- @param input table|nil The input table for the list_jobs_by_pipeline command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_jobs_by_pipeline(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "list-jobs-by-pipeline" }, input)
end

--- The ListJobsByStatus operation gets a list of jobs that have a specified status
--- @param input table|nil The input table for the list_jobs_by_status command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_jobs_by_status(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "list-jobs-by-status" }, input)
end

--- The ListPipelines operation gets a list of the pipelines associated with the current AWS account
--- @param input table|nil The input table for the list_pipelines command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_pipelines(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "list-pipelines" }, input)
end

--- The ListPresets operation gets a list of the default presets included with Elastic Transcoder and the presets that you've added in an AWS region
--- @param input table|nil The input table for the list_presets command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_presets(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "list-presets" }, input)
end

--- The ReadJob operation returns detailed information about a job
--- @param input table|nil The input table for the read_job command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.read_job(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "read-job" }, input)
end

--- The ReadPipeline operation gets detailed information about a pipeline
--- @param input table|nil The input table for the read_pipeline command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.read_pipeline(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "read-pipeline" }, input)
end

--- The ReadPreset operation gets detailed information about a preset
--- @param input table|nil The input table for the read_preset command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.read_preset(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "read-preset" }, input)
end

--- The TestRole operation tests the IAM role used to create the pipeline
--- @param input table|nil The input table for the test_role command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.test_role(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "test-role" }, input)
end

--- Use the UpdatePipeline operation to update settings for a pipeline
--- @param input table|nil The input table for the update_pipeline command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_pipeline(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "update-pipeline" }, input)
end

--- With the UpdatePipelineNotifications operation, you can update Amazon Simple Notification Service (Amazon SNS) notifications for a pipeline
--- @param input table|nil The input table for the update_pipeline_notifications command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_pipeline_notifications(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "update-pipeline-notifications" }, input)
end

--- The UpdatePipelineStatus operation pauses or reactivates a pipeline, so that the pipeline stops or restarts the processing of jobs
--- @param input table|nil The input table for the update_pipeline_status command
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.update_pipeline_status(input)
	return common.execute_aws_command_with_input({ "elastictranscoder", "update-pipeline-status" }, input)
end

return M
