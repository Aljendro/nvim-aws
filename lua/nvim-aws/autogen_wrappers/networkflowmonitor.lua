-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: networkflowmonitor

local common = require("nvim-aws.common")

--- AWS networkflowmonitor service functions
local M = {}

--- AWS networkflowmonitor create-monitor operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_monitor(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "create-monitor" }, input, callbacks)
end

--- AWS networkflowmonitor create-scope operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_scope(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "create-scope" }, input, callbacks)
end

--- AWS networkflowmonitor delete-monitor operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_monitor(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "delete-monitor" }, input, callbacks)
end

--- AWS networkflowmonitor delete-scope operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_scope(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "delete-scope" }, input, callbacks)
end

--- AWS networkflowmonitor get-monitor operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_monitor(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "get-monitor" }, input, callbacks)
end

--- AWS networkflowmonitor get-query-results-monitor-top-contributors operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_query_results_monitor_top_contributors(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "get-query-results-monitor-top-contributors" }, input, callbacks)
end

--- AWS networkflowmonitor get-query-results-workload-insights-top-contributors operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_query_results_workload_insights_top_contributors(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "get-query-results-workload-insights-top-contributors" }, input, callbacks)
end

--- AWS networkflowmonitor get-query-results-workload-insights-top-contributors-data operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_query_results_workload_insights_top_contributors_data(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "get-query-results-workload-insights-top-contributors-data" }, input, callbacks)
end

--- AWS networkflowmonitor get-query-status-monitor-top-contributors operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_query_status_monitor_top_contributors(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "get-query-status-monitor-top-contributors" }, input, callbacks)
end

--- AWS networkflowmonitor get-query-status-workload-insights-top-contributors operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_query_status_workload_insights_top_contributors(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "get-query-status-workload-insights-top-contributors" }, input, callbacks)
end

--- AWS networkflowmonitor get-query-status-workload-insights-top-contributors-data operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_query_status_workload_insights_top_contributors_data(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "get-query-status-workload-insights-top-contributors-data" }, input, callbacks)
end

--- AWS networkflowmonitor get-scope operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_scope(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "get-scope" }, input, callbacks)
end

--- AWS networkflowmonitor list-monitors operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_monitors(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "list-monitors" }, input, callbacks)
end

--- AWS networkflowmonitor list-scopes operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_scopes(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "list-scopes" }, input, callbacks)
end

--- AWS networkflowmonitor list-tags-for-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_tags_for_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "list-tags-for-resource" }, input, callbacks)
end

--- AWS networkflowmonitor start-query-monitor-top-contributors operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.start_query_monitor_top_contributors(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "start-query-monitor-top-contributors" }, input, callbacks)
end

--- AWS networkflowmonitor start-query-workload-insights-top-contributors operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.start_query_workload_insights_top_contributors(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "start-query-workload-insights-top-contributors" }, input, callbacks)
end

--- AWS networkflowmonitor start-query-workload-insights-top-contributors-data operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.start_query_workload_insights_top_contributors_data(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "start-query-workload-insights-top-contributors-data" }, input, callbacks)
end

--- AWS networkflowmonitor stop-query-monitor-top-contributors operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.stop_query_monitor_top_contributors(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "stop-query-monitor-top-contributors" }, input, callbacks)
end

--- AWS networkflowmonitor stop-query-workload-insights-top-contributors operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.stop_query_workload_insights_top_contributors(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "stop-query-workload-insights-top-contributors" }, input, callbacks)
end

--- AWS networkflowmonitor stop-query-workload-insights-top-contributors-data operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.stop_query_workload_insights_top_contributors_data(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "stop-query-workload-insights-top-contributors-data" }, input, callbacks)
end

--- AWS networkflowmonitor tag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.tag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "tag-resource" }, input, callbacks)
end

--- AWS networkflowmonitor untag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.untag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "untag-resource" }, input, callbacks)
end

--- AWS networkflowmonitor update-monitor operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_monitor(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "update-monitor" }, input, callbacks)
end

--- AWS networkflowmonitor update-scope operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_scope(input, callbacks)
	return common.execute_aws_command_skeleton({ "networkflowmonitor", "update-scope" }, input, callbacks)
end

return M
