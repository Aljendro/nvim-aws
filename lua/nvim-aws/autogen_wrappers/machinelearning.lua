-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: machinelearning

local common = require("nvim-aws.common")

--- AWS machinelearning service functions
local M = {}

--- AWS machinelearning add-tags operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.add_tags(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "add-tags" }, input, callbacks)
end

--- AWS machinelearning create-batch-prediction operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_batch_prediction(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "create-batch-prediction" }, input, callbacks)
end

--- AWS machinelearning create-data-source-from-rds operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_data_source_from_rds(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "create-data-source-from-rds" }, input, callbacks)
end

--- AWS machinelearning create-data-source-from-redshift operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_data_source_from_redshift(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "create-data-source-from-redshift" }, input, callbacks)
end

--- AWS machinelearning create-data-source-from-s3 operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_data_source_from_s3(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "create-data-source-from-s3" }, input, callbacks)
end

--- AWS machinelearning create-evaluation operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_evaluation(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "create-evaluation" }, input, callbacks)
end

--- AWS machinelearning create-ml-model operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_ml_model(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "create-ml-model" }, input, callbacks)
end

--- AWS machinelearning create-realtime-endpoint operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_realtime_endpoint(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "create-realtime-endpoint" }, input, callbacks)
end

--- AWS machinelearning delete-batch-prediction operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_batch_prediction(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "delete-batch-prediction" }, input, callbacks)
end

--- AWS machinelearning delete-data-source operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_data_source(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "delete-data-source" }, input, callbacks)
end

--- AWS machinelearning delete-evaluation operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_evaluation(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "delete-evaluation" }, input, callbacks)
end

--- AWS machinelearning delete-ml-model operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_ml_model(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "delete-ml-model" }, input, callbacks)
end

--- AWS machinelearning delete-realtime-endpoint operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_realtime_endpoint(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "delete-realtime-endpoint" }, input, callbacks)
end

--- AWS machinelearning delete-tags operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_tags(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "delete-tags" }, input, callbacks)
end

--- AWS machinelearning describe-batch-predictions operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_batch_predictions(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "describe-batch-predictions" }, input, callbacks)
end

--- AWS machinelearning describe-data-sources operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_data_sources(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "describe-data-sources" }, input, callbacks)
end

--- AWS machinelearning describe-evaluations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_evaluations(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "describe-evaluations" }, input, callbacks)
end

--- AWS machinelearning describe-ml-models operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_ml_models(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "describe-ml-models" }, input, callbacks)
end

--- AWS machinelearning describe-tags operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_tags(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "describe-tags" }, input, callbacks)
end

--- AWS machinelearning get-batch-prediction operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_batch_prediction(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "get-batch-prediction" }, input, callbacks)
end

--- AWS machinelearning get-data-source operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_data_source(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "get-data-source" }, input, callbacks)
end

--- AWS machinelearning get-evaluation operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_evaluation(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "get-evaluation" }, input, callbacks)
end

--- AWS machinelearning get-ml-model operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.get_ml_model(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "get-ml-model" }, input, callbacks)
end

--- AWS machinelearning predict operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.predict(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "predict" }, input, callbacks)
end

--- AWS machinelearning update-batch-prediction operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_batch_prediction(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "update-batch-prediction" }, input, callbacks)
end

--- AWS machinelearning update-data-source operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_data_source(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "update-data-source" }, input, callbacks)
end

--- AWS machinelearning update-evaluation operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_evaluation(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "update-evaluation" }, input, callbacks)
end

--- AWS machinelearning update-ml-model operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_ml_model(input, callbacks)
	return common.execute_aws_command_skeleton({ "machinelearning", "update-ml-model" }, input, callbacks)
end

--- AWS machinelearning wait operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.wait(input, callbacks)
	return common.execute_aws_command({ "machinelearning", "wait" }, input, callbacks)
end

return M
