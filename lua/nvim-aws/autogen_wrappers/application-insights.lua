-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: application-insights

local common = require("nvim-aws.common")

--- AWS application-insights service functions
local M = {}

--- AWS application-insights add-workload operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.add_workload(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "add-workload" }, input, callbacks)
end

--- AWS application-insights create-application operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_application(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "create-application" }, input, callbacks)
end

--- AWS application-insights create-component operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_component(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "create-component" }, input, callbacks)
end

--- AWS application-insights create-log-pattern operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.create_log_pattern(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "create-log-pattern" }, input, callbacks)
end

--- AWS application-insights delete-application operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_application(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "delete-application" }, input, callbacks)
end

--- AWS application-insights delete-component operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_component(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "delete-component" }, input, callbacks)
end

--- AWS application-insights delete-log-pattern operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.delete_log_pattern(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "delete-log-pattern" }, input, callbacks)
end

--- AWS application-insights describe-application operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_application(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "describe-application" }, input, callbacks)
end

--- AWS application-insights describe-component operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_component(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "describe-component" }, input, callbacks)
end

--- AWS application-insights describe-component-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_component_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "describe-component-configuration" }, input, callbacks)
end

--- AWS application-insights describe-component-configuration-recommendation operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_component_configuration_recommendation(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "describe-component-configuration-recommendation" }, input, callbacks)
end

--- AWS application-insights describe-log-pattern operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_log_pattern(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "describe-log-pattern" }, input, callbacks)
end

--- AWS application-insights describe-observation operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_observation(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "describe-observation" }, input, callbacks)
end

--- AWS application-insights describe-problem operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_problem(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "describe-problem" }, input, callbacks)
end

--- AWS application-insights describe-problem-observations operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_problem_observations(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "describe-problem-observations" }, input, callbacks)
end

--- AWS application-insights describe-workload operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.describe_workload(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "describe-workload" }, input, callbacks)
end

--- AWS application-insights list-applications operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_applications(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "list-applications" }, input, callbacks)
end

--- AWS application-insights list-components operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_components(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "list-components" }, input, callbacks)
end

--- AWS application-insights list-configuration-history operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_configuration_history(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "list-configuration-history" }, input, callbacks)
end

--- AWS application-insights list-log-pattern-sets operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_log_pattern_sets(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "list-log-pattern-sets" }, input, callbacks)
end

--- AWS application-insights list-log-patterns operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_log_patterns(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "list-log-patterns" }, input, callbacks)
end

--- AWS application-insights list-problems operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_problems(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "list-problems" }, input, callbacks)
end

--- AWS application-insights list-tags-for-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_tags_for_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "list-tags-for-resource" }, input, callbacks)
end

--- AWS application-insights list-workloads operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.list_workloads(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "list-workloads" }, input, callbacks)
end

--- AWS application-insights remove-workload operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.remove_workload(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "remove-workload" }, input, callbacks)
end

--- AWS application-insights tag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.tag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "tag-resource" }, input, callbacks)
end

--- AWS application-insights untag-resource operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.untag_resource(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "untag-resource" }, input, callbacks)
end

--- AWS application-insights update-application operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_application(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "update-application" }, input, callbacks)
end

--- AWS application-insights update-component operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_component(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "update-component" }, input, callbacks)
end

--- AWS application-insights update-component-configuration operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_component_configuration(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "update-component-configuration" }, input, callbacks)
end

--- AWS application-insights update-log-pattern operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_log_pattern(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "update-log-pattern" }, input, callbacks)
end

--- AWS application-insights update-problem operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_problem(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "update-problem" }, input, callbacks)
end

--- AWS application-insights update-workload operation
--- @param input table|nil input parameters
--- @param callbacks table|nil {on_start = function(), on_stdout = function(line), on_stderr = function(err), on_exit = function(code)}
--- @return {success: boolean, data: table|nil, error: string|nil }|{success: boolean, job: Job }
function M.update_workload(input, callbacks)
	return common.execute_aws_command_skeleton({ "application-insights", "update-workload" }, input, callbacks)
end

return M
