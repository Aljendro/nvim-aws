-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: iot-data

local common = require("nvim-aws.wrappers.common")

--- AWS IOT-DATA service functions
local M = {}

--- AWS iot-data get-retained-message operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.get_retained_message(input)
	return common.execute_aws_command_with_input({ "iot-data", "get-retained-message" }, input)
end

--- AWS iot-data help operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.help(input)
	return common.execute_aws_command_with_input({ "iot-data", "help" }, input)
end

--- AWS iot-data list-named-shadows-for-thing operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_named_shadows_for_thing(input)
	return common.execute_aws_command_with_input({ "iot-data", "list-named-shadows-for-thing" }, input)
end

--- AWS iot-data list-retained-messages operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.list_retained_messages(input)
	return common.execute_aws_command_with_input({ "iot-data", "list-retained-messages" }, input)
end

--- AWS iot-data publish operation
--- @param input table|nil Optional input parameters
--- @return {success: boolean, data: table|nil, error: string|nil} Result table
function M.publish(input)
	return common.execute_aws_command_with_input({ "iot-data", "publish" }, input)
end

return M
