-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: emr-containers

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.emr-containers")

describe("AWS emr-containers service testing", function()
	it("should generate a cli skeleton with cancel_job_run", function()
		local result = service.cancel_job_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_job_template", function()
		local result = service.create_job_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_managed_endpoint", function()
		local result = service.create_managed_endpoint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_security_configuration", function()
		local result = service.create_security_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_virtual_cluster", function()
		local result = service.create_virtual_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_job_template", function()
		local result = service.delete_job_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_managed_endpoint", function()
		local result = service.delete_managed_endpoint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_virtual_cluster", function()
		local result = service.delete_virtual_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_job_run", function()
		local result = service.describe_job_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_job_template", function()
		local result = service.describe_job_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_managed_endpoint", function()
		local result = service.describe_managed_endpoint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_security_configuration", function()
		local result = service.describe_security_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_virtual_cluster", function()
		local result = service.describe_virtual_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_managed_endpoint_session_credentials", function()
		local result = service.get_managed_endpoint_session_credentials()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_job_runs", function()
		local result = service.list_job_runs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_job_templates", function()
		local result = service.list_job_templates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_managed_endpoints", function()
		local result = service.list_managed_endpoints()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_security_configurations", function()
		local result = service.list_security_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_virtual_clusters", function()
		local result = service.list_virtual_clusters()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_job_run", function()
		local result = service.start_job_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

end)