-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: location

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS location service testing", function()
	it("should generate a cli skeleton for associate-tracker-consumer", function()
		local result = common.execute_aws_command_with_input({ "location", "associate-tracker-consumer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-delete-device-position-history", function()
		local result = common.execute_aws_command_with_input({ "location", "batch-delete-device-position-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-delete-geofence", function()
		local result = common.execute_aws_command_with_input({ "location", "batch-delete-geofence" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-evaluate-geofences", function()
		local result = common.execute_aws_command_with_input({ "location", "batch-evaluate-geofences" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-device-position", function()
		local result = common.execute_aws_command_with_input({ "location", "batch-get-device-position" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-put-geofence", function()
		local result = common.execute_aws_command_with_input({ "location", "batch-put-geofence" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-update-device-position", function()
		local result = common.execute_aws_command_with_input({ "location", "batch-update-device-position" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for calculate-route", function()
		local result = common.execute_aws_command_with_input({ "location", "calculate-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for calculate-route-matrix", function()
		local result = common.execute_aws_command_with_input({ "location", "calculate-route-matrix" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-geofence-collection", function()
		local result = common.execute_aws_command_with_input({ "location", "create-geofence-collection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-key", function()
		local result = common.execute_aws_command_with_input({ "location", "create-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-map", function()
		local result = common.execute_aws_command_with_input({ "location", "create-map" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-place-index", function()
		local result = common.execute_aws_command_with_input({ "location", "create-place-index" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-route-calculator", function()
		local result = common.execute_aws_command_with_input({ "location", "create-route-calculator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-tracker", function()
		local result = common.execute_aws_command_with_input({ "location", "create-tracker" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-geofence-collection", function()
		local result = common.execute_aws_command_with_input({ "location", "delete-geofence-collection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-key", function()
		local result = common.execute_aws_command_with_input({ "location", "delete-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-map", function()
		local result = common.execute_aws_command_with_input({ "location", "delete-map" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-place-index", function()
		local result = common.execute_aws_command_with_input({ "location", "delete-place-index" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-route-calculator", function()
		local result = common.execute_aws_command_with_input({ "location", "delete-route-calculator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-tracker", function()
		local result = common.execute_aws_command_with_input({ "location", "delete-tracker" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-geofence-collection", function()
		local result = common.execute_aws_command_with_input({ "location", "describe-geofence-collection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-key", function()
		local result = common.execute_aws_command_with_input({ "location", "describe-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-map", function()
		local result = common.execute_aws_command_with_input({ "location", "describe-map" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-place-index", function()
		local result = common.execute_aws_command_with_input({ "location", "describe-place-index" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-route-calculator", function()
		local result = common.execute_aws_command_with_input({ "location", "describe-route-calculator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-tracker", function()
		local result = common.execute_aws_command_with_input({ "location", "describe-tracker" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-tracker-consumer", function()
		local result = common.execute_aws_command_with_input({ "location", "disassociate-tracker-consumer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for forecast-geofence-events", function()
		local result = common.execute_aws_command_with_input({ "location", "forecast-geofence-events" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-device-position", function()
		local result = common.execute_aws_command_with_input({ "location", "get-device-position" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-device-position-history", function()
		local result = common.execute_aws_command_with_input({ "location", "get-device-position-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-geofence", function()
		local result = common.execute_aws_command_with_input({ "location", "get-geofence" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-map-glyphs", function()
		local result = common.execute_aws_command_with_input({ "location", "get-map-glyphs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-map-sprites", function()
		local result = common.execute_aws_command_with_input({ "location", "get-map-sprites" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-map-style-descriptor", function()
		local result = common.execute_aws_command_with_input({ "location", "get-map-style-descriptor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-map-tile", function()
		local result = common.execute_aws_command_with_input({ "location", "get-map-tile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-place", function()
		local result = common.execute_aws_command_with_input({ "location", "get-place" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-device-positions", function()
		local result = common.execute_aws_command_with_input({ "location", "list-device-positions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-geofence-collections", function()
		local result = common.execute_aws_command_with_input({ "location", "list-geofence-collections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-geofences", function()
		local result = common.execute_aws_command_with_input({ "location", "list-geofences" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-keys", function()
		local result = common.execute_aws_command_with_input({ "location", "list-keys" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-maps", function()
		local result = common.execute_aws_command_with_input({ "location", "list-maps" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-place-indexes", function()
		local result = common.execute_aws_command_with_input({ "location", "list-place-indexes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-route-calculators", function()
		local result = common.execute_aws_command_with_input({ "location", "list-route-calculators" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "location", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tracker-consumers", function()
		local result = common.execute_aws_command_with_input({ "location", "list-tracker-consumers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-trackers", function()
		local result = common.execute_aws_command_with_input({ "location", "list-trackers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-geofence", function()
		local result = common.execute_aws_command_with_input({ "location", "put-geofence" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-place-index-for-position", function()
		local result = common.execute_aws_command_with_input({ "location", "search-place-index-for-position" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-place-index-for-suggestions", function()
		local result = common.execute_aws_command_with_input({ "location", "search-place-index-for-suggestions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-place-index-for-text", function()
		local result = common.execute_aws_command_with_input({ "location", "search-place-index-for-text" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "location", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "location", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-geofence-collection", function()
		local result = common.execute_aws_command_with_input({ "location", "update-geofence-collection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-key", function()
		local result = common.execute_aws_command_with_input({ "location", "update-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-map", function()
		local result = common.execute_aws_command_with_input({ "location", "update-map" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-place-index", function()
		local result = common.execute_aws_command_with_input({ "location", "update-place-index" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-route-calculator", function()
		local result = common.execute_aws_command_with_input({ "location", "update-route-calculator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-tracker", function()
		local result = common.execute_aws_command_with_input({ "location", "update-tracker" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for verify-device-position", function()
		local result = common.execute_aws_command_with_input({ "location", "verify-device-position" })
		assert.is_true(result.success)
	end)

end)