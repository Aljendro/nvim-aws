-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: panorama

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS panorama service testing", function()
	it("should generate a cli skeleton for create-application-instance", function()
		local result = common.execute_aws_command_with_input({ "panorama", "create-application-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-job-for-devices", function()
		local result = common.execute_aws_command_with_input({ "panorama", "create-job-for-devices" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-node-from-template-job", function()
		local result = common.execute_aws_command_with_input({ "panorama", "create-node-from-template-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-package", function()
		local result = common.execute_aws_command_with_input({ "panorama", "create-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-package-import-job", function()
		local result = common.execute_aws_command_with_input({ "panorama", "create-package-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-device", function()
		local result = common.execute_aws_command_with_input({ "panorama", "delete-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-package", function()
		local result = common.execute_aws_command_with_input({ "panorama", "delete-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-package-version", function()
		local result = common.execute_aws_command_with_input({ "panorama", "deregister-package-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-application-instance", function()
		local result = common.execute_aws_command_with_input({ "panorama", "describe-application-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-application-instance-details", function()
		local result = common.execute_aws_command_with_input({ "panorama", "describe-application-instance-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-device", function()
		local result = common.execute_aws_command_with_input({ "panorama", "describe-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-device-job", function()
		local result = common.execute_aws_command_with_input({ "panorama", "describe-device-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-node", function()
		local result = common.execute_aws_command_with_input({ "panorama", "describe-node" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-node-from-template-job", function()
		local result = common.execute_aws_command_with_input({ "panorama", "describe-node-from-template-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-package", function()
		local result = common.execute_aws_command_with_input({ "panorama", "describe-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-package-import-job", function()
		local result = common.execute_aws_command_with_input({ "panorama", "describe-package-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-package-version", function()
		local result = common.execute_aws_command_with_input({ "panorama", "describe-package-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-application-instance-dependencies", function()
		local result = common.execute_aws_command_with_input({ "panorama", "list-application-instance-dependencies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-application-instance-node-instances", function()
		local result = common.execute_aws_command_with_input({ "panorama", "list-application-instance-node-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-application-instances", function()
		local result = common.execute_aws_command_with_input({ "panorama", "list-application-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-devices", function()
		local result = common.execute_aws_command_with_input({ "panorama", "list-devices" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-devices-jobs", function()
		local result = common.execute_aws_command_with_input({ "panorama", "list-devices-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-node-from-template-jobs", function()
		local result = common.execute_aws_command_with_input({ "panorama", "list-node-from-template-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-nodes", function()
		local result = common.execute_aws_command_with_input({ "panorama", "list-nodes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-package-import-jobs", function()
		local result = common.execute_aws_command_with_input({ "panorama", "list-package-import-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-packages", function()
		local result = common.execute_aws_command_with_input({ "panorama", "list-packages" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "panorama", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for provision-device", function()
		local result = common.execute_aws_command_with_input({ "panorama", "provision-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-package-version", function()
		local result = common.execute_aws_command_with_input({ "panorama", "register-package-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-application-instance", function()
		local result = common.execute_aws_command_with_input({ "panorama", "remove-application-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for signal-application-instance-node-instances", function()
		local result = common.execute_aws_command_with_input({ "panorama", "signal-application-instance-node-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "panorama", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "panorama", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-device-metadata", function()
		local result = common.execute_aws_command_with_input({ "panorama", "update-device-metadata" })
		assert.is_true(result.success)
	end)

end)