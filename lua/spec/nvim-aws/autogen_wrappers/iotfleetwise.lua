-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: iotfleetwise

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS iotfleetwise service testing", function()
	it("should generate a cli skeleton for associate-vehicle-fleet", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "associate-vehicle-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-create-vehicle", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "batch-create-vehicle" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-update-vehicle", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "batch-update-vehicle" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-campaign", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "create-campaign" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-decoder-manifest", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "create-decoder-manifest" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-fleet", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "create-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-model-manifest", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "create-model-manifest" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-signal-catalog", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "create-signal-catalog" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-state-template", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "create-state-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vehicle", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "create-vehicle" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-campaign", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "delete-campaign" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-decoder-manifest", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "delete-decoder-manifest" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-fleet", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "delete-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-model-manifest", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "delete-model-manifest" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-signal-catalog", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "delete-signal-catalog" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-state-template", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "delete-state-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vehicle", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "delete-vehicle" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-vehicle-fleet", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "disassociate-vehicle-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-campaign", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "get-campaign" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-decoder-manifest", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "get-decoder-manifest" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-encryption-configuration", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "get-encryption-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-fleet", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "get-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-logging-options", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "get-logging-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-model-manifest", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "get-model-manifest" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-register-account-status", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "get-register-account-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-signal-catalog", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "get-signal-catalog" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-state-template", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "get-state-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-vehicle", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "get-vehicle" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-vehicle-status", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "get-vehicle-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-decoder-manifest", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "import-decoder-manifest" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-signal-catalog", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "import-signal-catalog" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-campaigns", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "list-campaigns" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-decoder-manifest-network-interfaces", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "list-decoder-manifest-network-interfaces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-decoder-manifest-signals", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "list-decoder-manifest-signals" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-decoder-manifests", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "list-decoder-manifests" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-fleets", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "list-fleets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-model-manifest-nodes", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "list-model-manifest-nodes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-model-manifests", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "list-model-manifests" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-signal-catalog-nodes", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "list-signal-catalog-nodes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-signal-catalogs", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "list-signal-catalogs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-state-templates", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "list-state-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-vehicles", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "list-vehicles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-encryption-configuration", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "put-encryption-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-logging-options", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "put-logging-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-account", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "register-account" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-campaign", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "update-campaign" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-decoder-manifest", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "update-decoder-manifest" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-fleet", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "update-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-model-manifest", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "update-model-manifest" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-signal-catalog", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "update-signal-catalog" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-state-template", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "update-state-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-vehicle", function()
		local result = common.execute_aws_command_with_input({ "iotfleetwise", "update-vehicle" })
		assert.is_true(result.success)
	end)

end)