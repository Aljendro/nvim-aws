-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: gamelift

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS gamelift service testing", function()
	it("should generate a cli skeleton for accept-match", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "accept-match" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for claim-game-server", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "claim-game-server" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-alias", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-build", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-build" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-container-fleet", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-container-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-container-group-definition", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-container-group-definition" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-fleet", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-fleet-locations", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-fleet-locations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-game-server-group", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-game-server-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-game-session", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-game-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-game-session-queue", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-game-session-queue" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-location", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-location" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-matchmaking-configuration", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-matchmaking-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-matchmaking-rule-set", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-matchmaking-rule-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-player-session", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-player-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-player-sessions", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-player-sessions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-script", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-script" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc-peering-authorization", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-vpc-peering-authorization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc-peering-connection", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "create-vpc-peering-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-alias", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-build", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-build" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-container-fleet", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-container-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-container-group-definition", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-container-group-definition" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-fleet", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-fleet-locations", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-fleet-locations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-game-server-group", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-game-server-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-game-session-queue", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-game-session-queue" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-location", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-location" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-matchmaking-configuration", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-matchmaking-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-matchmaking-rule-set", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-matchmaking-rule-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-scaling-policy", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-scaling-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-script", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-script" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpc-peering-authorization", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-vpc-peering-authorization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpc-peering-connection", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "delete-vpc-peering-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-compute", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "deregister-compute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-game-server", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "deregister-game-server" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-alias", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-build", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-build" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-compute", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-compute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-container-fleet", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-container-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-container-group-definition", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-container-group-definition" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ec2-instance-limits", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-ec2-instance-limits" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-attributes", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-fleet-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-capacity", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-fleet-capacity" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-deployment", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-fleet-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-events", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-fleet-events" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-location-attributes", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-fleet-location-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-location-capacity", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-fleet-location-capacity" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-location-utilization", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-fleet-location-utilization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-port-settings", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-fleet-port-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-utilization", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-fleet-utilization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-game-server", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-game-server" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-game-server-group", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-game-server-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-game-server-instances", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-game-server-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-game-session-details", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-game-session-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-game-session-placement", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-game-session-placement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-game-session-queues", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-game-session-queues" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-game-sessions", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-game-sessions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instances", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-matchmaking", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-matchmaking" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-matchmaking-configurations", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-matchmaking-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-matchmaking-rule-sets", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-matchmaking-rule-sets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-player-sessions", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-player-sessions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-runtime-configuration", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-runtime-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-scaling-policies", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-scaling-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-script", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-script" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-peering-authorizations", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-vpc-peering-authorizations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-peering-connections", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "describe-vpc-peering-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-compute-access", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "get-compute-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-compute-auth-token", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "get-compute-auth-token" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-game-session-log-url", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "get-game-session-log-url" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance-access", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "get-instance-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-aliases", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-aliases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-builds", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-builds" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-compute", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-compute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-container-fleets", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-container-fleets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-container-group-definition-versions", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-container-group-definition-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-container-group-definitions", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-container-group-definitions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-fleet-deployments", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-fleet-deployments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-fleets", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-fleets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-game-server-groups", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-game-server-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-game-servers", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-game-servers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-locations", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-locations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-scripts", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-scripts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-scaling-policy", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "put-scaling-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-compute", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "register-compute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-game-server", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "register-game-server" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for request-upload-credentials", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "request-upload-credentials" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for resolve-alias", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "resolve-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for resume-game-server-group", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "resume-game-server-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-game-sessions", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "search-game-sessions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-fleet-actions", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "start-fleet-actions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-game-session-placement", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "start-game-session-placement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-match-backfill", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "start-match-backfill" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-matchmaking", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "start-matchmaking" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-fleet-actions", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "stop-fleet-actions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-game-session-placement", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "stop-game-session-placement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-matchmaking", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "stop-matchmaking" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for suspend-game-server-group", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "suspend-game-server-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for terminate-game-session", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "terminate-game-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-alias", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-build", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-build" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-container-fleet", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-container-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-container-group-definition", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-container-group-definition" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-fleet-attributes", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-fleet-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-fleet-capacity", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-fleet-capacity" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-fleet-port-settings", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-fleet-port-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-game-server", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-game-server" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-game-server-group", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-game-server-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-game-session", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-game-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-game-session-queue", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-game-session-queue" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-matchmaking-configuration", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-matchmaking-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-runtime-configuration", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-runtime-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-script", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "update-script" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for validate-matchmaking-rule-set", function()
		local result = common.execute_aws_command_with_input({ "gamelift", "validate-matchmaking-rule-set" })
		assert.is_true(result.success)
	end)

end)