-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: cloudwatch-logs

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS cloudwatch-logs service testing", function()
	it("should generate a cli skeleton for associate-kms-key", function()
		local result = common.execute_aws_command_with_input({ "logs", "associate-kms-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-export-task", function()
		local result = common.execute_aws_command_with_input({ "logs", "cancel-export-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-delivery", function()
		local result = common.execute_aws_command_with_input({ "logs", "create-delivery" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-export-task", function()
		local result = common.execute_aws_command_with_input({ "logs", "create-export-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-log-anomaly-detector", function()
		local result = common.execute_aws_command_with_input({ "logs", "create-log-anomaly-detector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-log-group", function()
		local result = common.execute_aws_command_with_input({ "logs", "create-log-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-log-stream", function()
		local result = common.execute_aws_command_with_input({ "logs", "create-log-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-account-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-account-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-data-protection-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-data-protection-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-delivery", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-delivery" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-delivery-destination", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-delivery-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-delivery-destination-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-delivery-destination-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-delivery-source", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-delivery-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-destination", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-index-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-index-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-integration", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-integration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-log-anomaly-detector", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-log-anomaly-detector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-log-group", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-log-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-log-stream", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-log-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-metric-filter", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-metric-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-query-definition", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-query-definition" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-retention-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-retention-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-subscription-filter", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-subscription-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transformer", function()
		local result = common.execute_aws_command_with_input({ "logs", "delete-transformer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-account-policies", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-account-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-configuration-templates", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-configuration-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-deliveries", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-deliveries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-delivery-destinations", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-delivery-destinations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-delivery-sources", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-delivery-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-destinations", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-destinations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-export-tasks", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-export-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-field-indexes", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-field-indexes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-index-policies", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-index-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-log-groups", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-log-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-log-streams", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-log-streams" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-metric-filters", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-metric-filters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-queries", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-queries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-query-definitions", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-query-definitions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-resource-policies", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-resource-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-subscription-filters", function()
		local result = common.execute_aws_command_with_input({ "logs", "describe-subscription-filters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-kms-key", function()
		local result = common.execute_aws_command_with_input({ "logs", "disassociate-kms-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for filter-log-events", function()
		local result = common.execute_aws_command_with_input({ "logs", "filter-log-events" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-protection-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "get-data-protection-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-delivery", function()
		local result = common.execute_aws_command_with_input({ "logs", "get-delivery" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-delivery-destination", function()
		local result = common.execute_aws_command_with_input({ "logs", "get-delivery-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-delivery-destination-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "get-delivery-destination-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-delivery-source", function()
		local result = common.execute_aws_command_with_input({ "logs", "get-delivery-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-integration", function()
		local result = common.execute_aws_command_with_input({ "logs", "get-integration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-log-anomaly-detector", function()
		local result = common.execute_aws_command_with_input({ "logs", "get-log-anomaly-detector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-log-events", function()
		local result = common.execute_aws_command_with_input({ "logs", "get-log-events" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-log-group-fields", function()
		local result = common.execute_aws_command_with_input({ "logs", "get-log-group-fields" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-log-record", function()
		local result = common.execute_aws_command_with_input({ "logs", "get-log-record" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-results", function()
		local result = common.execute_aws_command_with_input({ "logs", "get-query-results" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transformer", function()
		local result = common.execute_aws_command_with_input({ "logs", "get-transformer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-anomalies", function()
		local result = common.execute_aws_command_with_input({ "logs", "list-anomalies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-integrations", function()
		local result = common.execute_aws_command_with_input({ "logs", "list-integrations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-log-anomaly-detectors", function()
		local result = common.execute_aws_command_with_input({ "logs", "list-log-anomaly-detectors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-log-groups-for-query", function()
		local result = common.execute_aws_command_with_input({ "logs", "list-log-groups-for-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "logs", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-log-group", function()
		local result = common.execute_aws_command_with_input({ "logs", "list-tags-log-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-account-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-account-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-data-protection-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-data-protection-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-delivery-destination", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-delivery-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-delivery-destination-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-delivery-destination-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-delivery-source", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-delivery-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-destination", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-destination-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-destination-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-index-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-index-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-integration", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-integration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-log-events", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-log-events" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-metric-filter", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-metric-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-query-definition", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-query-definition" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-retention-policy", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-retention-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-subscription-filter", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-subscription-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-transformer", function()
		local result = common.execute_aws_command_with_input({ "logs", "put-transformer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-live-tail", function()
		local result = common.execute_aws_command_with_input({ "logs", "start-live-tail" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-query", function()
		local result = common.execute_aws_command_with_input({ "logs", "start-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-query", function()
		local result = common.execute_aws_command_with_input({ "logs", "stop-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-log-group", function()
		local result = common.execute_aws_command_with_input({ "logs", "tag-log-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "logs", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for test-metric-filter", function()
		local result = common.execute_aws_command_with_input({ "logs", "test-metric-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for test-transformer", function()
		local result = common.execute_aws_command_with_input({ "logs", "test-transformer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-log-group", function()
		local result = common.execute_aws_command_with_input({ "logs", "untag-log-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "logs", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-anomaly", function()
		local result = common.execute_aws_command_with_input({ "logs", "update-anomaly" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-delivery-configuration", function()
		local result = common.execute_aws_command_with_input({ "logs", "update-delivery-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-log-anomaly-detector", function()
		local result = common.execute_aws_command_with_input({ "logs", "update-log-anomaly-detector" })
		assert.is_true(result.success)
	end)

end)