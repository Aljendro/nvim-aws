-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: license-manager

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.license-manager")

describe("AWS license-manager service testing", function()
	it("should generate a cli skeleton with accept_grant", function()
		local result = service.accept_grant()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with check_in_license", function()
		local result = service.check_in_license()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with checkout_borrow_license", function()
		local result = service.checkout_borrow_license()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with checkout_license", function()
		local result = service.checkout_license()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_grant", function()
		local result = service.create_grant()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_grant_version", function()
		local result = service.create_grant_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_license", function()
		local result = service.create_license()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_license_configuration", function()
		local result = service.create_license_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_license_conversion_task_for_resource", function()
		local result = service.create_license_conversion_task_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_license_manager_report_generator", function()
		local result = service.create_license_manager_report_generator()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_license_version", function()
		local result = service.create_license_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_token", function()
		local result = service.create_token()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_grant", function()
		local result = service.delete_grant()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_license", function()
		local result = service.delete_license()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_license_configuration", function()
		local result = service.delete_license_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_license_manager_report_generator", function()
		local result = service.delete_license_manager_report_generator()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_token", function()
		local result = service.delete_token()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with extend_license_consumption", function()
		local result = service.extend_license_consumption()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_access_token", function()
		local result = service.get_access_token()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_grant", function()
		local result = service.get_grant()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_license", function()
		local result = service.get_license()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_license_configuration", function()
		local result = service.get_license_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_license_conversion_task", function()
		local result = service.get_license_conversion_task()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_license_manager_report_generator", function()
		local result = service.get_license_manager_report_generator()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_license_usage", function()
		local result = service.get_license_usage()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_service_settings", function()
		local result = service.get_service_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_associations_for_license_configuration", function()
		local result = service.list_associations_for_license_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_distributed_grants", function()
		local result = service.list_distributed_grants()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_failures_for_license_configuration_operations", function()
		local result = service.list_failures_for_license_configuration_operations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_license_configurations", function()
		local result = service.list_license_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_license_conversion_tasks", function()
		local result = service.list_license_conversion_tasks()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_license_manager_report_generators", function()
		local result = service.list_license_manager_report_generators()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_license_specifications_for_resource", function()
		local result = service.list_license_specifications_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_license_versions", function()
		local result = service.list_license_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_licenses", function()
		local result = service.list_licenses()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_received_grants", function()
		local result = service.list_received_grants()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_received_grants_for_organization", function()
		local result = service.list_received_grants_for_organization()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_received_licenses", function()
		local result = service.list_received_licenses()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_received_licenses_for_organization", function()
		local result = service.list_received_licenses_for_organization()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_resource_inventory", function()
		local result = service.list_resource_inventory()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tokens", function()
		local result = service.list_tokens()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_usage_for_license_configuration", function()
		local result = service.list_usage_for_license_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reject_grant", function()
		local result = service.reject_grant()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_license_configuration", function()
		local result = service.update_license_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_license_manager_report_generator", function()
		local result = service.update_license_manager_report_generator()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_license_specifications_for_resource", function()
		local result = service.update_license_specifications_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_service_settings", function()
		local result = service.update_service_settings()
		assert.is_true(result.success)
	end)

end)