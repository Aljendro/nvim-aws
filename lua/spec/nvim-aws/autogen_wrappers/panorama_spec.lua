-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: panorama

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.panorama")

describe("AWS panorama service testing", function()
	it("should generate a cli skeleton with create_application_instance", function()
		local result = service.create_application_instance()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_job_for_devices", function()
		local result = service.create_job_for_devices()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_node_from_template_job", function()
		local result = service.create_node_from_template_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_package", function()
		local result = service.create_package()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_package_import_job", function()
		local result = service.create_package_import_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_device", function()
		local result = service.delete_device()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_package", function()
		local result = service.delete_package()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with deregister_package_version", function()
		local result = service.deregister_package_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_application_instance", function()
		local result = service.describe_application_instance()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_application_instance_details", function()
		local result = service.describe_application_instance_details()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_device", function()
		local result = service.describe_device()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_device_job", function()
		local result = service.describe_device_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_node", function()
		local result = service.describe_node()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_node_from_template_job", function()
		local result = service.describe_node_from_template_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_package", function()
		local result = service.describe_package()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_package_import_job", function()
		local result = service.describe_package_import_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_package_version", function()
		local result = service.describe_package_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_application_instance_dependencies", function()
		local result = service.list_application_instance_dependencies()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_application_instance_node_instances", function()
		local result = service.list_application_instance_node_instances()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_application_instances", function()
		local result = service.list_application_instances()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_devices", function()
		local result = service.list_devices()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_devices_jobs", function()
		local result = service.list_devices_jobs()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_node_from_template_jobs", function()
		local result = service.list_node_from_template_jobs()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_nodes", function()
		local result = service.list_nodes()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_package_import_jobs", function()
		local result = service.list_package_import_jobs()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_packages", function()
		local result = service.list_packages()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with provision_device", function()
		local result = service.provision_device()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with register_package_version", function()
		local result = service.register_package_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with remove_application_instance", function()
		local result = service.remove_application_instance()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with signal_application_instance_node_instances", function()
		local result = service.signal_application_instance_node_instances()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_device_metadata", function()
		local result = service.update_device_metadata()
		assert.is_true(result.success)
	end)
end)