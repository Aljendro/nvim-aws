-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: resource-explorer-2

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.resource-explorer-2")

describe("AWS resource-explorer-2 service testing", function()
	it("should generate a cli skeleton with associate_default_view", function()
		local result = service.associate_default_view()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with batch_get_view", function()
		local result = service.batch_get_view()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_index", function()
		local result = service.create_index()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_view", function()
		local result = service.create_view()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_index", function()
		local result = service.delete_index()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_view", function()
		local result = service.delete_view()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with disassociate_default_view", function()
		local result = service.disassociate_default_view()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_account_level_service_configuration", function()
		local result = service.get_account_level_service_configuration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_default_view", function()
		local result = service.get_default_view()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_index", function()
		local result = service.get_index()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_managed_view", function()
		local result = service.get_managed_view()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_view", function()
		local result = service.get_view()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_indexes", function()
		local result = service.list_indexes()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_indexes_for_members", function()
		local result = service.list_indexes_for_members()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_managed_views", function()
		local result = service.list_managed_views()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_resources", function()
		local result = service.list_resources()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_supported_resource_types", function()
		local result = service.list_supported_resource_types()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_views", function()
		local result = service.list_views()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with search", function()
		local result = service.search()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_index_type", function()
		local result = service.update_index_type()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_view", function()
		local result = service.update_view()
		assert.is_true(result.success)
	end)
end)