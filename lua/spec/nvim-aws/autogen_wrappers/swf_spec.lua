-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: swf

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.swf")

describe("AWS swf service testing", function()
	it("should generate a cli skeleton with count_closed_workflow_executions", function()
		local result = service.count_closed_workflow_executions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with count_open_workflow_executions", function()
		local result = service.count_open_workflow_executions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with count_pending_activity_tasks", function()
		local result = service.count_pending_activity_tasks()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with count_pending_decision_tasks", function()
		local result = service.count_pending_decision_tasks()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_activity_type", function()
		local result = service.delete_activity_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_workflow_type", function()
		local result = service.delete_workflow_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deprecate_activity_type", function()
		local result = service.deprecate_activity_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deprecate_domain", function()
		local result = service.deprecate_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deprecate_workflow_type", function()
		local result = service.deprecate_workflow_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_activity_type", function()
		local result = service.describe_activity_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_domain", function()
		local result = service.describe_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_workflow_execution", function()
		local result = service.describe_workflow_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_workflow_type", function()
		local result = service.describe_workflow_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_workflow_execution_history", function()
		local result = service.get_workflow_execution_history()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_activity_types", function()
		local result = service.list_activity_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_closed_workflow_executions", function()
		local result = service.list_closed_workflow_executions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_domains", function()
		local result = service.list_domains()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_open_workflow_executions", function()
		local result = service.list_open_workflow_executions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_workflow_types", function()
		local result = service.list_workflow_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with poll_for_activity_task", function()
		local result = service.poll_for_activity_task()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with poll_for_decision_task", function()
		local result = service.poll_for_decision_task()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with record_activity_task_heartbeat", function()
		local result = service.record_activity_task_heartbeat()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with register_activity_type", function()
		local result = service.register_activity_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with register_domain", function()
		local result = service.register_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with register_workflow_type", function()
		local result = service.register_workflow_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with request_cancel_workflow_execution", function()
		local result = service.request_cancel_workflow_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with respond_activity_task_canceled", function()
		local result = service.respond_activity_task_canceled()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with respond_activity_task_completed", function()
		local result = service.respond_activity_task_completed()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with respond_activity_task_failed", function()
		local result = service.respond_activity_task_failed()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with respond_decision_task_completed", function()
		local result = service.respond_decision_task_completed()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with signal_workflow_execution", function()
		local result = service.signal_workflow_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_workflow_execution", function()
		local result = service.start_workflow_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with terminate_workflow_execution", function()
		local result = service.terminate_workflow_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with undeprecate_activity_type", function()
		local result = service.undeprecate_activity_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with undeprecate_domain", function()
		local result = service.undeprecate_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with undeprecate_workflow_type", function()
		local result = service.undeprecate_workflow_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

end)