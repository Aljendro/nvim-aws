-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: route-53

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS route-53 service testing", function()
	it("should generate a cli skeleton for activate-key-signing-key", function()
		local result = common.execute_aws_command_with_input({ "route53", "activate-key-signing-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-vpc-with-hosted-zone", function()
		local result = common.execute_aws_command_with_input({ "route53", "associate-vpc-with-hosted-zone" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for change-cidr-collection", function()
		local result = common.execute_aws_command_with_input({ "route53", "change-cidr-collection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for change-resource-record-sets", function()
		local result = common.execute_aws_command_with_input({ "route53", "change-resource-record-sets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for change-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "route53", "change-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cidr-collection", function()
		local result = common.execute_aws_command_with_input({ "route53", "create-cidr-collection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-health-check", function()
		local result = common.execute_aws_command_with_input({ "route53", "create-health-check" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-hosted-zone", function()
		local result = common.execute_aws_command_with_input({ "route53", "create-hosted-zone" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-key-signing-key", function()
		local result = common.execute_aws_command_with_input({ "route53", "create-key-signing-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-query-logging-config", function()
		local result = common.execute_aws_command_with_input({ "route53", "create-query-logging-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-reusable-delegation-set", function()
		local result = common.execute_aws_command_with_input({ "route53", "create-reusable-delegation-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-traffic-policy", function()
		local result = common.execute_aws_command_with_input({ "route53", "create-traffic-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-traffic-policy-instance", function()
		local result = common.execute_aws_command_with_input({ "route53", "create-traffic-policy-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-traffic-policy-version", function()
		local result = common.execute_aws_command_with_input({ "route53", "create-traffic-policy-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc-association-authorization", function()
		local result = common.execute_aws_command_with_input({ "route53", "create-vpc-association-authorization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deactivate-key-signing-key", function()
		local result = common.execute_aws_command_with_input({ "route53", "deactivate-key-signing-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cidr-collection", function()
		local result = common.execute_aws_command_with_input({ "route53", "delete-cidr-collection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-health-check", function()
		local result = common.execute_aws_command_with_input({ "route53", "delete-health-check" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-hosted-zone", function()
		local result = common.execute_aws_command_with_input({ "route53", "delete-hosted-zone" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-key-signing-key", function()
		local result = common.execute_aws_command_with_input({ "route53", "delete-key-signing-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-query-logging-config", function()
		local result = common.execute_aws_command_with_input({ "route53", "delete-query-logging-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-reusable-delegation-set", function()
		local result = common.execute_aws_command_with_input({ "route53", "delete-reusable-delegation-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-traffic-policy", function()
		local result = common.execute_aws_command_with_input({ "route53", "delete-traffic-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-traffic-policy-instance", function()
		local result = common.execute_aws_command_with_input({ "route53", "delete-traffic-policy-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpc-association-authorization", function()
		local result = common.execute_aws_command_with_input({ "route53", "delete-vpc-association-authorization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-hosted-zone-dnssec", function()
		local result = common.execute_aws_command_with_input({ "route53", "disable-hosted-zone-dnssec" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-vpc-from-hosted-zone", function()
		local result = common.execute_aws_command_with_input({ "route53", "disassociate-vpc-from-hosted-zone" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-hosted-zone-dnssec", function()
		local result = common.execute_aws_command_with_input({ "route53", "enable-hosted-zone-dnssec" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-account-limit", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-account-limit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-change", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-change" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-checker-ip-ranges", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-checker-ip-ranges" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-dnssec", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-dnssec" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-geo-location", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-geo-location" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-health-check", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-health-check" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-health-check-count", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-health-check-count" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-health-check-last-failure-reason", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-health-check-last-failure-reason" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-health-check-status", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-health-check-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-hosted-zone", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-hosted-zone" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-hosted-zone-count", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-hosted-zone-count" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-hosted-zone-limit", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-hosted-zone-limit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-logging-config", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-query-logging-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-reusable-delegation-set", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-reusable-delegation-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-reusable-delegation-set-limit", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-reusable-delegation-set-limit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-traffic-policy", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-traffic-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-traffic-policy-instance", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-traffic-policy-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-traffic-policy-instance-count", function()
		local result = common.execute_aws_command_with_input({ "route53", "get-traffic-policy-instance-count" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-cidr-blocks", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-cidr-blocks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-cidr-collections", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-cidr-collections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-cidr-locations", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-cidr-locations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-geo-locations", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-geo-locations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-health-checks", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-health-checks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-hosted-zones", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-hosted-zones" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-hosted-zones-by-name", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-hosted-zones-by-name" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-hosted-zones-by-vpc", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-hosted-zones-by-vpc" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-query-logging-configs", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-query-logging-configs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resource-record-sets", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-resource-record-sets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-reusable-delegation-sets", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-reusable-delegation-sets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resources", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-tags-for-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-traffic-policies", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-traffic-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-traffic-policy-instances", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-traffic-policy-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-traffic-policy-instances-by-hosted-zone", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-traffic-policy-instances-by-hosted-zone" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-traffic-policy-instances-by-policy", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-traffic-policy-instances-by-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-traffic-policy-versions", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-traffic-policy-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-vpc-association-authorizations", function()
		local result = common.execute_aws_command_with_input({ "route53", "list-vpc-association-authorizations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for test-dns-answer", function()
		local result = common.execute_aws_command_with_input({ "route53", "test-dns-answer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-health-check", function()
		local result = common.execute_aws_command_with_input({ "route53", "update-health-check" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-hosted-zone-comment", function()
		local result = common.execute_aws_command_with_input({ "route53", "update-hosted-zone-comment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-traffic-policy-comment", function()
		local result = common.execute_aws_command_with_input({ "route53", "update-traffic-policy-comment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-traffic-policy-instance", function()
		local result = common.execute_aws_command_with_input({ "route53", "update-traffic-policy-instance" })
		assert.is_true(result.success)
	end)

end)