-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: iotanalytics

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.iotanalytics")

describe("AWS iotanalytics service testing", function()
	it("should generate a cli skeleton with batch_put_message", function()
		local result = service.batch_put_message()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_pipeline_reprocessing", function()
		local result = service.cancel_pipeline_reprocessing()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_channel", function()
		local result = service.create_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_dataset", function()
		local result = service.create_dataset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_dataset_content", function()
		local result = service.create_dataset_content()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_datastore", function()
		local result = service.create_datastore()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_pipeline", function()
		local result = service.create_pipeline()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_channel", function()
		local result = service.delete_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_dataset", function()
		local result = service.delete_dataset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_dataset_content", function()
		local result = service.delete_dataset_content()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_datastore", function()
		local result = service.delete_datastore()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_pipeline", function()
		local result = service.delete_pipeline()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_channel", function()
		local result = service.describe_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_dataset", function()
		local result = service.describe_dataset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_datastore", function()
		local result = service.describe_datastore()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_logging_options", function()
		local result = service.describe_logging_options()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_pipeline", function()
		local result = service.describe_pipeline()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_dataset_content", function()
		local result = service.get_dataset_content()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_channels", function()
		local result = service.list_channels()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_dataset_contents", function()
		local result = service.list_dataset_contents()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_datasets", function()
		local result = service.list_datasets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_datastores", function()
		local result = service.list_datastores()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_pipelines", function()
		local result = service.list_pipelines()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_logging_options", function()
		local result = service.put_logging_options()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with run_pipeline_activity", function()
		local result = service.run_pipeline_activity()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with sample_channel_data", function()
		local result = service.sample_channel_data()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_pipeline_reprocessing", function()
		local result = service.start_pipeline_reprocessing()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_channel", function()
		local result = service.update_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_dataset", function()
		local result = service.update_dataset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_datastore", function()
		local result = service.update_datastore()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_pipeline", function()
		local result = service.update_pipeline()
		assert.is_true(result.success)
	end)

end)
