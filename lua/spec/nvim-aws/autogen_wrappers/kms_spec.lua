-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: kms

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.kms")

describe("AWS kms service testing", function()
	it("should generate a cli skeleton with cancel_key_deletion", function()
		local result = service.cancel_key_deletion()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with connect_custom_key_store", function()
		local result = service.connect_custom_key_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_alias", function()
		local result = service.create_alias()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_custom_key_store", function()
		local result = service.create_custom_key_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_grant", function()
		local result = service.create_grant()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_key", function()
		local result = service.create_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with decrypt", function()
		local result = service.decrypt()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_alias", function()
		local result = service.delete_alias()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_custom_key_store", function()
		local result = service.delete_custom_key_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_imported_key_material", function()
		local result = service.delete_imported_key_material()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with derive_shared_secret", function()
		local result = service.derive_shared_secret()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_custom_key_stores", function()
		local result = service.describe_custom_key_stores()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_key", function()
		local result = service.describe_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disable_key", function()
		local result = service.disable_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disable_key_rotation", function()
		local result = service.disable_key_rotation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disconnect_custom_key_store", function()
		local result = service.disconnect_custom_key_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_key", function()
		local result = service.enable_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_key_rotation", function()
		local result = service.enable_key_rotation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with encrypt", function()
		local result = service.encrypt()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_data_key", function()
		local result = service.generate_data_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_data_key_pair", function()
		local result = service.generate_data_key_pair()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_data_key_pair_without_plaintext", function()
		local result = service.generate_data_key_pair_without_plaintext()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_data_key_without_plaintext", function()
		local result = service.generate_data_key_without_plaintext()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_mac", function()
		local result = service.generate_mac()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_random", function()
		local result = service.generate_random()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_key_policy", function()
		local result = service.get_key_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_key_rotation_status", function()
		local result = service.get_key_rotation_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_parameters_for_import", function()
		local result = service.get_parameters_for_import()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_public_key", function()
		local result = service.get_public_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_key_material", function()
		local result = service.import_key_material()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_aliases", function()
		local result = service.list_aliases()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_grants", function()
		local result = service.list_grants()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_key_policies", function()
		local result = service.list_key_policies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_key_rotations", function()
		local result = service.list_key_rotations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_keys", function()
		local result = service.list_keys()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_resource_tags", function()
		local result = service.list_resource_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_retirable_grants", function()
		local result = service.list_retirable_grants()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_key_policy", function()
		local result = service.put_key_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with re_encrypt", function()
		local result = service.re_encrypt()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with replicate_key", function()
		local result = service.replicate_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with retire_grant", function()
		local result = service.retire_grant()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with revoke_grant", function()
		local result = service.revoke_grant()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with rotate_key_on_demand", function()
		local result = service.rotate_key_on_demand()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with schedule_key_deletion", function()
		local result = service.schedule_key_deletion()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with sign", function()
		local result = service.sign()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_alias", function()
		local result = service.update_alias()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_custom_key_store", function()
		local result = service.update_custom_key_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_key_description", function()
		local result = service.update_key_description()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_primary_region", function()
		local result = service.update_primary_region()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with verify", function()
		local result = service.verify()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with verify_mac", function()
		local result = service.verify_mac()
		assert.is_true(result.success)
	end)

end)