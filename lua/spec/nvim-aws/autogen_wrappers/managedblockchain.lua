-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: managedblockchain

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS managedblockchain service testing", function()
	it("should generate a cli skeleton for create-accessor", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "create-accessor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-member", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "create-member" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-network", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "create-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-node", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "create-node" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-proposal", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "create-proposal" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-accessor", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "delete-accessor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-member", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "delete-member" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-node", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "delete-node" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-accessor", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "get-accessor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-member", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "get-member" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-network", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "get-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-node", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "get-node" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-proposal", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "get-proposal" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-accessors", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "list-accessors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-invitations", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "list-invitations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-members", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "list-members" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-networks", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "list-networks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-nodes", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "list-nodes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-proposal-votes", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "list-proposal-votes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-proposals", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "list-proposals" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-invitation", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "reject-invitation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-member", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "update-member" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-node", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "update-node" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for vote-on-proposal", function()
		local result = common.execute_aws_command_with_input({ "managedblockchain", "vote-on-proposal" })
		assert.is_true(result.success)
	end)

end)