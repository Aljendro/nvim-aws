-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: redshift-serverless

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS redshift-serverless service testing", function()
	it("should generate a cli skeleton for convert-recovery-point-to-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "convert-recovery-point-to-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-custom-domain-association", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "create-custom-domain-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "create-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-namespace", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "create-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-scheduled-action", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "create-scheduled-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "create-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-snapshot-copy-configuration", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "create-snapshot-copy-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-usage-limit", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "create-usage-limit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-workgroup", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "create-workgroup" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-custom-domain-association", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "delete-custom-domain-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "delete-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-namespace", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "delete-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "delete-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-scheduled-action", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "delete-scheduled-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "delete-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-snapshot-copy-configuration", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "delete-snapshot-copy-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-usage-limit", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "delete-usage-limit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-workgroup", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "delete-workgroup" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-credentials", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "get-credentials" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-custom-domain-association", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "get-custom-domain-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "get-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-namespace", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "get-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-recovery-point", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "get-recovery-point" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "get-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-scheduled-action", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "get-scheduled-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "get-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-table-restore-status", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "get-table-restore-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-track", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "get-track" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-usage-limit", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "get-usage-limit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-workgroup", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "get-workgroup" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-custom-domain-associations", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-custom-domain-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-managed-workgroups", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-managed-workgroups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-namespaces", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-namespaces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-recovery-points", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-recovery-points" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-scheduled-actions", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-scheduled-actions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-snapshot-copy-configurations", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-snapshot-copy-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-snapshots", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-snapshots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-table-restore-status", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-table-restore-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tracks", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-tracks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-usage-limits", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-usage-limits" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-workgroups", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "list-workgroups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "put-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-from-recovery-point", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "restore-from-recovery-point" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-from-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "restore-from-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-table-from-recovery-point", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "restore-table-from-recovery-point" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-table-from-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "restore-table-from-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-custom-domain-association", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "update-custom-domain-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "update-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-namespace", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "update-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-scheduled-action", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "update-scheduled-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "update-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-snapshot-copy-configuration", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "update-snapshot-copy-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-usage-limit", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "update-usage-limit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-workgroup", function()
		local result = common.execute_aws_command_with_input({ "redshift-serverless", "update-workgroup" })
		assert.is_true(result.success)
	end)

end)