-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: s3

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS s3 service testing", function()
	it("should generate a cli skeleton for abort-multipart-upload", function()
		local result = common.execute_aws_command_with_input({ "s3api", "abort-multipart-upload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for complete-multipart-upload", function()
		local result = common.execute_aws_command_with_input({ "s3api", "complete-multipart-upload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for copy-object", function()
		local result = common.execute_aws_command_with_input({ "s3api", "copy-object" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-bucket", function()
		local result = common.execute_aws_command_with_input({ "s3api", "create-bucket" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-bucket-metadata-table-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "create-bucket-metadata-table-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-multipart-upload", function()
		local result = common.execute_aws_command_with_input({ "s3api", "create-multipart-upload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-session", function()
		local result = common.execute_aws_command_with_input({ "s3api", "create-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-analytics-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-analytics-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-cors", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-cors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-encryption", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-encryption" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-intelligent-tiering-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-intelligent-tiering-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-inventory-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-inventory-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-lifecycle", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-lifecycle" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-metadata-table-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-metadata-table-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-metrics-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-metrics-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-ownership-controls", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-ownership-controls" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-policy", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-replication", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-replication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-website", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-bucket-website" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-object", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-object" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-object-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-object-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-objects", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-objects" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-public-access-block", function()
		local result = common.execute_aws_command_with_input({ "s3api", "delete-public-access-block" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-accelerate-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-accelerate-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-acl", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-acl" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-analytics-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-analytics-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-cors", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-cors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-encryption", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-encryption" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-intelligent-tiering-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-intelligent-tiering-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-inventory-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-inventory-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-lifecycle-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-lifecycle-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-location", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-location" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-logging", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-logging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-metadata-table-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-metadata-table-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-metrics-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-metrics-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-notification-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-notification-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-ownership-controls", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-ownership-controls" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-policy", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-policy-status", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-policy-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-replication", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-replication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-request-payment", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-request-payment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-versioning", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-versioning" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-website", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-bucket-website" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-object", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-object" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-object-acl", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-object-acl" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-object-attributes", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-object-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-object-legal-hold", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-object-legal-hold" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-object-lock-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-object-lock-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-object-retention", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-object-retention" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-object-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-object-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-object-torrent", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-object-torrent" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-public-access-block", function()
		local result = common.execute_aws_command_with_input({ "s3api", "get-public-access-block" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for head-bucket", function()
		local result = common.execute_aws_command_with_input({ "s3api", "head-bucket" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for head-object", function()
		local result = common.execute_aws_command_with_input({ "s3api", "head-object" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bucket-analytics-configurations", function()
		local result = common.execute_aws_command_with_input({ "s3api", "list-bucket-analytics-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bucket-intelligent-tiering-configurations", function()
		local result = common.execute_aws_command_with_input({ "s3api", "list-bucket-intelligent-tiering-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bucket-inventory-configurations", function()
		local result = common.execute_aws_command_with_input({ "s3api", "list-bucket-inventory-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bucket-metrics-configurations", function()
		local result = common.execute_aws_command_with_input({ "s3api", "list-bucket-metrics-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-buckets", function()
		local result = common.execute_aws_command_with_input({ "s3api", "list-buckets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-directory-buckets", function()
		local result = common.execute_aws_command_with_input({ "s3api", "list-directory-buckets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-multipart-uploads", function()
		local result = common.execute_aws_command_with_input({ "s3api", "list-multipart-uploads" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-object-versions", function()
		local result = common.execute_aws_command_with_input({ "s3api", "list-object-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-objects", function()
		local result = common.execute_aws_command_with_input({ "s3api", "list-objects" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-objects-v2", function()
		local result = common.execute_aws_command_with_input({ "s3api", "list-objects-v2" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-parts", function()
		local result = common.execute_aws_command_with_input({ "s3api", "list-parts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-accelerate-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-accelerate-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-acl", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-acl" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-analytics-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-analytics-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-cors", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-cors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-encryption", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-encryption" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-intelligent-tiering-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-intelligent-tiering-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-inventory-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-inventory-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-lifecycle-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-lifecycle-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-logging", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-logging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-metrics-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-metrics-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-notification-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-notification-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-ownership-controls", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-ownership-controls" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-policy", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-replication", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-replication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-request-payment", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-request-payment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-versioning", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-versioning" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-website", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-bucket-website" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-object", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-object" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-object-acl", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-object-acl" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-object-legal-hold", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-object-legal-hold" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-object-lock-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-object-lock-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-object-retention", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-object-retention" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-object-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-object-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-public-access-block", function()
		local result = common.execute_aws_command_with_input({ "s3api", "put-public-access-block" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-object", function()
		local result = common.execute_aws_command_with_input({ "s3api", "restore-object" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for select-object-content", function()
		local result = common.execute_aws_command_with_input({ "s3api", "select-object-content" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for upload-part", function()
		local result = common.execute_aws_command_with_input({ "s3api", "upload-part" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for upload-part-copy", function()
		local result = common.execute_aws_command_with_input({ "s3api", "upload-part-copy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for write-get-object-response", function()
		local result = common.execute_aws_command_with_input({ "s3api", "write-get-object-response" })
		assert.is_true(result.success)
	end)

end)