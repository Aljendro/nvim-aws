-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: sms

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS sms service testing", function()
	it("should generate a cli skeleton for create-app", function()
		local result = common.execute_aws_command_with_input({ "sms", "create-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-replication-job", function()
		local result = common.execute_aws_command_with_input({ "sms", "create-replication-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-app", function()
		local result = common.execute_aws_command_with_input({ "sms", "delete-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-app-launch-configuration", function()
		local result = common.execute_aws_command_with_input({ "sms", "delete-app-launch-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-app-replication-configuration", function()
		local result = common.execute_aws_command_with_input({ "sms", "delete-app-replication-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-app-validation-configuration", function()
		local result = common.execute_aws_command_with_input({ "sms", "delete-app-validation-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-replication-job", function()
		local result = common.execute_aws_command_with_input({ "sms", "delete-replication-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-server-catalog", function()
		local result = common.execute_aws_command_with_input({ "sms", "delete-server-catalog" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-connector", function()
		local result = common.execute_aws_command_with_input({ "sms", "disassociate-connector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-change-set", function()
		local result = common.execute_aws_command_with_input({ "sms", "generate-change-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-template", function()
		local result = common.execute_aws_command_with_input({ "sms", "generate-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-app", function()
		local result = common.execute_aws_command_with_input({ "sms", "get-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-app-launch-configuration", function()
		local result = common.execute_aws_command_with_input({ "sms", "get-app-launch-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-app-replication-configuration", function()
		local result = common.execute_aws_command_with_input({ "sms", "get-app-replication-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-app-validation-configuration", function()
		local result = common.execute_aws_command_with_input({ "sms", "get-app-validation-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-app-validation-output", function()
		local result = common.execute_aws_command_with_input({ "sms", "get-app-validation-output" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-connectors", function()
		local result = common.execute_aws_command_with_input({ "sms", "get-connectors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-replication-jobs", function()
		local result = common.execute_aws_command_with_input({ "sms", "get-replication-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-replication-runs", function()
		local result = common.execute_aws_command_with_input({ "sms", "get-replication-runs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-servers", function()
		local result = common.execute_aws_command_with_input({ "sms", "get-servers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-app-catalog", function()
		local result = common.execute_aws_command_with_input({ "sms", "import-app-catalog" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-server-catalog", function()
		local result = common.execute_aws_command_with_input({ "sms", "import-server-catalog" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for launch-app", function()
		local result = common.execute_aws_command_with_input({ "sms", "launch-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-apps", function()
		local result = common.execute_aws_command_with_input({ "sms", "list-apps" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for notify-app-validation-output", function()
		local result = common.execute_aws_command_with_input({ "sms", "notify-app-validation-output" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-app-launch-configuration", function()
		local result = common.execute_aws_command_with_input({ "sms", "put-app-launch-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-app-replication-configuration", function()
		local result = common.execute_aws_command_with_input({ "sms", "put-app-replication-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-app-validation-configuration", function()
		local result = common.execute_aws_command_with_input({ "sms", "put-app-validation-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-app-replication", function()
		local result = common.execute_aws_command_with_input({ "sms", "start-app-replication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-on-demand-app-replication", function()
		local result = common.execute_aws_command_with_input({ "sms", "start-on-demand-app-replication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-on-demand-replication-run", function()
		local result = common.execute_aws_command_with_input({ "sms", "start-on-demand-replication-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-app-replication", function()
		local result = common.execute_aws_command_with_input({ "sms", "stop-app-replication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for terminate-app", function()
		local result = common.execute_aws_command_with_input({ "sms", "terminate-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-app", function()
		local result = common.execute_aws_command_with_input({ "sms", "update-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-replication-job", function()
		local result = common.execute_aws_command_with_input({ "sms", "update-replication-job" })
		assert.is_true(result.success)
	end)

end)