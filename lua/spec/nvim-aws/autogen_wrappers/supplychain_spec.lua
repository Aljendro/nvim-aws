-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: supplychain

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.supplychain")

describe("AWS supplychain service testing", function()
	it("should generate a cli skeleton with create_bill_of_materials_import_job", function()
		local result = service.create_bill_of_materials_import_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_data_integration_flow", function()
		local result = service.create_data_integration_flow()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_data_lake_dataset", function()
		local result = service.create_data_lake_dataset()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_instance", function()
		local result = service.create_instance()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_data_integration_flow", function()
		local result = service.delete_data_integration_flow()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_data_lake_dataset", function()
		local result = service.delete_data_lake_dataset()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_instance", function()
		local result = service.delete_instance()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_bill_of_materials_import_job", function()
		local result = service.get_bill_of_materials_import_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_data_integration_flow", function()
		local result = service.get_data_integration_flow()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_data_lake_dataset", function()
		local result = service.get_data_lake_dataset()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_instance", function()
		local result = service.get_instance()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_data_integration_flows", function()
		local result = service.list_data_integration_flows()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_data_lake_datasets", function()
		local result = service.list_data_lake_datasets()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_instances", function()
		local result = service.list_instances()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with send_data_integration_event", function()
		local result = service.send_data_integration_event()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_data_integration_flow", function()
		local result = service.update_data_integration_flow()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_data_lake_dataset", function()
		local result = service.update_data_lake_dataset()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_instance", function()
		local result = service.update_instance()
		assert.is_true(result.success)
	end)
end)