-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: datasync

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.datasync")

describe("AWS datasync service testing", function()
	it("should generate a cli skeleton with add_storage_system", function()
		local result = service.add_storage_system()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_task_execution", function()
		local result = service.cancel_task_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_agent", function()
		local result = service.create_agent()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_location_azure_blob", function()
		local result = service.create_location_azure_blob()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_location_efs", function()
		local result = service.create_location_efs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_location_fsx_lustre", function()
		local result = service.create_location_fsx_lustre()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_location_fsx_ontap", function()
		local result = service.create_location_fsx_ontap()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_location_fsx_open_zfs", function()
		local result = service.create_location_fsx_open_zfs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_location_fsx_windows", function()
		local result = service.create_location_fsx_windows()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_location_hdfs", function()
		local result = service.create_location_hdfs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_location_nfs", function()
		local result = service.create_location_nfs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_location_object_storage", function()
		local result = service.create_location_object_storage()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_location_s3", function()
		local result = service.create_location_s3()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_location_smb", function()
		local result = service.create_location_smb()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_task", function()
		local result = service.create_task()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_agent", function()
		local result = service.delete_agent()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_location", function()
		local result = service.delete_location()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_task", function()
		local result = service.delete_task()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_agent", function()
		local result = service.describe_agent()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_discovery_job", function()
		local result = service.describe_discovery_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_location_azure_blob", function()
		local result = service.describe_location_azure_blob()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_location_efs", function()
		local result = service.describe_location_efs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_location_fsx_lustre", function()
		local result = service.describe_location_fsx_lustre()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_location_fsx_ontap", function()
		local result = service.describe_location_fsx_ontap()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_location_fsx_open_zfs", function()
		local result = service.describe_location_fsx_open_zfs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_location_fsx_windows", function()
		local result = service.describe_location_fsx_windows()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_location_hdfs", function()
		local result = service.describe_location_hdfs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_location_nfs", function()
		local result = service.describe_location_nfs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_location_object_storage", function()
		local result = service.describe_location_object_storage()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_location_s3", function()
		local result = service.describe_location_s3()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_location_smb", function()
		local result = service.describe_location_smb()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_storage_system", function()
		local result = service.describe_storage_system()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_storage_system_resource_metrics", function()
		local result = service.describe_storage_system_resource_metrics()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_storage_system_resources", function()
		local result = service.describe_storage_system_resources()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_task", function()
		local result = service.describe_task()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_task_execution", function()
		local result = service.describe_task_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_recommendations", function()
		local result = service.generate_recommendations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_agents", function()
		local result = service.list_agents()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_discovery_jobs", function()
		local result = service.list_discovery_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_locations", function()
		local result = service.list_locations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_storage_systems", function()
		local result = service.list_storage_systems()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_task_executions", function()
		local result = service.list_task_executions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tasks", function()
		local result = service.list_tasks()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with remove_storage_system", function()
		local result = service.remove_storage_system()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_discovery_job", function()
		local result = service.start_discovery_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_task_execution", function()
		local result = service.start_task_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_discovery_job", function()
		local result = service.stop_discovery_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_agent", function()
		local result = service.update_agent()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_discovery_job", function()
		local result = service.update_discovery_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_location_azure_blob", function()
		local result = service.update_location_azure_blob()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_location_efs", function()
		local result = service.update_location_efs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_location_fsx_lustre", function()
		local result = service.update_location_fsx_lustre()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_location_fsx_ontap", function()
		local result = service.update_location_fsx_ontap()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_location_fsx_open_zfs", function()
		local result = service.update_location_fsx_open_zfs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_location_fsx_windows", function()
		local result = service.update_location_fsx_windows()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_location_hdfs", function()
		local result = service.update_location_hdfs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_location_nfs", function()
		local result = service.update_location_nfs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_location_object_storage", function()
		local result = service.update_location_object_storage()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_location_s3", function()
		local result = service.update_location_s3()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_location_smb", function()
		local result = service.update_location_smb()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_storage_system", function()
		local result = service.update_storage_system()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_task", function()
		local result = service.update_task()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_task_execution", function()
		local result = service.update_task_execution()
		assert.is_true(result.success)
	end)

end)
