-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: docdb-elastic

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.docdb-elastic")

describe("AWS docdb-elastic service testing", function()
	it("should generate a cli skeleton with apply_pending_maintenance_action", function()
		local result = service.apply_pending_maintenance_action()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with copy_cluster_snapshot", function()
		local result = service.copy_cluster_snapshot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_cluster", function()
		local result = service.create_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_cluster_snapshot", function()
		local result = service.create_cluster_snapshot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_cluster", function()
		local result = service.delete_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_cluster_snapshot", function()
		local result = service.delete_cluster_snapshot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_cluster", function()
		local result = service.get_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_cluster_snapshot", function()
		local result = service.get_cluster_snapshot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_pending_maintenance_action", function()
		local result = service.get_pending_maintenance_action()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_cluster_snapshots", function()
		local result = service.list_cluster_snapshots()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_clusters", function()
		local result = service.list_clusters()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_pending_maintenance_actions", function()
		local result = service.list_pending_maintenance_actions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with restore_cluster_from_snapshot", function()
		local result = service.restore_cluster_from_snapshot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_cluster", function()
		local result = service.start_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_cluster", function()
		local result = service.stop_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_cluster", function()
		local result = service.update_cluster()
		assert.is_true(result.success)
	end)

end)
