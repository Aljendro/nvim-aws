-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: networkmanager

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.networkmanager")

describe("AWS networkmanager service testing", function()
	it("should generate a cli skeleton with accept_attachment", function()
		local result = service.accept_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_connect_peer", function()
		local result = service.associate_connect_peer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_customer_gateway", function()
		local result = service.associate_customer_gateway()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_link", function()
		local result = service.associate_link()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_transit_gateway_connect_peer", function()
		local result = service.associate_transit_gateway_connect_peer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_connect_attachment", function()
		local result = service.create_connect_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_connect_peer", function()
		local result = service.create_connect_peer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_connection", function()
		local result = service.create_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_core_network", function()
		local result = service.create_core_network()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_device", function()
		local result = service.create_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_direct_connect_gateway_attachment", function()
		local result = service.create_direct_connect_gateway_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_global_network", function()
		local result = service.create_global_network()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_link", function()
		local result = service.create_link()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_site", function()
		local result = service.create_site()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_site_to_site_vpn_attachment", function()
		local result = service.create_site_to_site_vpn_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_transit_gateway_peering", function()
		local result = service.create_transit_gateway_peering()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_transit_gateway_route_table_attachment", function()
		local result = service.create_transit_gateway_route_table_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_vpc_attachment", function()
		local result = service.create_vpc_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_attachment", function()
		local result = service.delete_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_connect_peer", function()
		local result = service.delete_connect_peer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_connection", function()
		local result = service.delete_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_core_network", function()
		local result = service.delete_core_network()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_core_network_policy_version", function()
		local result = service.delete_core_network_policy_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_device", function()
		local result = service.delete_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_global_network", function()
		local result = service.delete_global_network()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_link", function()
		local result = service.delete_link()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_peering", function()
		local result = service.delete_peering()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_resource_policy", function()
		local result = service.delete_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_site", function()
		local result = service.delete_site()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deregister_transit_gateway", function()
		local result = service.deregister_transit_gateway()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_global_networks", function()
		local result = service.describe_global_networks()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_connect_peer", function()
		local result = service.disassociate_connect_peer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_customer_gateway", function()
		local result = service.disassociate_customer_gateway()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_link", function()
		local result = service.disassociate_link()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_transit_gateway_connect_peer", function()
		local result = service.disassociate_transit_gateway_connect_peer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with execute_core_network_change_set", function()
		local result = service.execute_core_network_change_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_connect_attachment", function()
		local result = service.get_connect_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_connect_peer", function()
		local result = service.get_connect_peer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_connect_peer_associations", function()
		local result = service.get_connect_peer_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_connections", function()
		local result = service.get_connections()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_core_network", function()
		local result = service.get_core_network()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_core_network_change_events", function()
		local result = service.get_core_network_change_events()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_core_network_change_set", function()
		local result = service.get_core_network_change_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_core_network_policy", function()
		local result = service.get_core_network_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_customer_gateway_associations", function()
		local result = service.get_customer_gateway_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_devices", function()
		local result = service.get_devices()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_direct_connect_gateway_attachment", function()
		local result = service.get_direct_connect_gateway_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_link_associations", function()
		local result = service.get_link_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_links", function()
		local result = service.get_links()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_network_resource_counts", function()
		local result = service.get_network_resource_counts()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_network_resource_relationships", function()
		local result = service.get_network_resource_relationships()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_network_resources", function()
		local result = service.get_network_resources()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_network_routes", function()
		local result = service.get_network_routes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_network_telemetry", function()
		local result = service.get_network_telemetry()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_resource_policy", function()
		local result = service.get_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_route_analysis", function()
		local result = service.get_route_analysis()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_site_to_site_vpn_attachment", function()
		local result = service.get_site_to_site_vpn_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_sites", function()
		local result = service.get_sites()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_transit_gateway_connect_peer_associations", function()
		local result = service.get_transit_gateway_connect_peer_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_transit_gateway_peering", function()
		local result = service.get_transit_gateway_peering()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_transit_gateway_registrations", function()
		local result = service.get_transit_gateway_registrations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_transit_gateway_route_table_attachment", function()
		local result = service.get_transit_gateway_route_table_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_vpc_attachment", function()
		local result = service.get_vpc_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_attachments", function()
		local result = service.list_attachments()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_connect_peers", function()
		local result = service.list_connect_peers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_core_network_policy_versions", function()
		local result = service.list_core_network_policy_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_core_networks", function()
		local result = service.list_core_networks()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_organization_service_access_status", function()
		local result = service.list_organization_service_access_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_peerings", function()
		local result = service.list_peerings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_core_network_policy", function()
		local result = service.put_core_network_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_resource_policy", function()
		local result = service.put_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with register_transit_gateway", function()
		local result = service.register_transit_gateway()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reject_attachment", function()
		local result = service.reject_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with restore_core_network_policy_version", function()
		local result = service.restore_core_network_policy_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_organization_service_access_update", function()
		local result = service.start_organization_service_access_update()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_route_analysis", function()
		local result = service.start_route_analysis()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_connection", function()
		local result = service.update_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_core_network", function()
		local result = service.update_core_network()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_device", function()
		local result = service.update_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_direct_connect_gateway_attachment", function()
		local result = service.update_direct_connect_gateway_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_global_network", function()
		local result = service.update_global_network()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_link", function()
		local result = service.update_link()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_network_resource_metadata", function()
		local result = service.update_network_resource_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_site", function()
		local result = service.update_site()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_vpc_attachment", function()
		local result = service.update_vpc_attachment()
		assert.is_true(result.success)
	end)

end)