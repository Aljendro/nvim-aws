-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: transcribe

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS transcribe service testing", function()
	it("should generate a cli skeleton for create-call-analytics-category", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "create-call-analytics-category" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-language-model", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "create-language-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-medical-vocabulary", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "create-medical-vocabulary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vocabulary", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "create-vocabulary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vocabulary-filter", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "create-vocabulary-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-call-analytics-category", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "delete-call-analytics-category" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-call-analytics-job", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "delete-call-analytics-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-language-model", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "delete-language-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-medical-scribe-job", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "delete-medical-scribe-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-medical-transcription-job", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "delete-medical-transcription-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-medical-vocabulary", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "delete-medical-vocabulary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transcription-job", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "delete-transcription-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vocabulary", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "delete-vocabulary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vocabulary-filter", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "delete-vocabulary-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-language-model", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "describe-language-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-call-analytics-category", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "get-call-analytics-category" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-call-analytics-job", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "get-call-analytics-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-medical-scribe-job", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "get-medical-scribe-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-medical-transcription-job", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "get-medical-transcription-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-medical-vocabulary", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "get-medical-vocabulary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transcription-job", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "get-transcription-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-vocabulary", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "get-vocabulary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-vocabulary-filter", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "get-vocabulary-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-call-analytics-categories", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "list-call-analytics-categories" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-call-analytics-jobs", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "list-call-analytics-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-language-models", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "list-language-models" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-medical-scribe-jobs", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "list-medical-scribe-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-medical-transcription-jobs", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "list-medical-transcription-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-medical-vocabularies", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "list-medical-vocabularies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-transcription-jobs", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "list-transcription-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-vocabularies", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "list-vocabularies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-vocabulary-filters", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "list-vocabulary-filters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-call-analytics-job", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "start-call-analytics-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-medical-scribe-job", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "start-medical-scribe-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-medical-transcription-job", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "start-medical-transcription-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-transcription-job", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "start-transcription-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-call-analytics-category", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "update-call-analytics-category" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-medical-vocabulary", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "update-medical-vocabulary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-vocabulary", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "update-vocabulary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-vocabulary-filter", function()
		local result = common.execute_aws_command_with_input({ "transcribe", "update-vocabulary-filter" })
		assert.is_true(result.success)
	end)

end)