-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: securitylake

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS securitylake service testing", function()
	it("should generate a cli skeleton for create-aws-log-source", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "create-aws-log-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-custom-log-source", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "create-custom-log-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-data-lake", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "create-data-lake" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-data-lake-exception-subscription", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "create-data-lake-exception-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-data-lake-organization-configuration", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "create-data-lake-organization-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-subscriber", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "create-subscriber" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-subscriber-notification", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "create-subscriber-notification" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-aws-log-source", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "delete-aws-log-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-custom-log-source", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "delete-custom-log-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-data-lake", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "delete-data-lake" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-data-lake-exception-subscription", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "delete-data-lake-exception-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-data-lake-organization-configuration", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "delete-data-lake-organization-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-subscriber", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "delete-subscriber" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-subscriber-notification", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "delete-subscriber-notification" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-data-lake-delegated-administrator", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "deregister-data-lake-delegated-administrator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-lake-exception-subscription", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "get-data-lake-exception-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-lake-organization-configuration", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "get-data-lake-organization-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-lake-sources", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "get-data-lake-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-subscriber", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "get-subscriber" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-data-lake-exceptions", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "list-data-lake-exceptions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-data-lakes", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "list-data-lakes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-log-sources", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "list-log-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-subscribers", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "list-subscribers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-data-lake-delegated-administrator", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "register-data-lake-delegated-administrator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-data-lake", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "update-data-lake" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-data-lake-exception-subscription", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "update-data-lake-exception-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-subscriber", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "update-subscriber" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-subscriber-notification", function()
		local result = common.execute_aws_command_with_input({ "securitylake", "update-subscriber-notification" })
		assert.is_true(result.success)
	end)

end)