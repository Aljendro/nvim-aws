-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: mediatailor

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS mediatailor service testing", function()
	it("should generate a cli skeleton for configure-logs-for-channel", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "configure-logs-for-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for configure-logs-for-playback-configuration", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "configure-logs-for-playback-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-channel", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "create-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-channel", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "create-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-live-source", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "create-live-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-prefetch-schedule", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "create-prefetch-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-source-location", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "create-source-location" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vod-source", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "create-vod-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-channel", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "delete-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-live-source", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "delete-live-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-playback-configuration", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "delete-playback-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-prefetch-schedule", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "delete-prefetch-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-source-location", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "delete-source-location" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vod-source", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "delete-vod-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-channel", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "describe-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-live-source", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "describe-live-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-source-location", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "describe-source-location" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vod-source", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "describe-vod-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-channel-schedule", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "get-channel-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-playback-configuration", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "get-playback-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-prefetch-schedule", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "get-prefetch-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-alerts", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "list-alerts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-channels", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "list-channels" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-live-sources", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "list-live-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-playback-configurations", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "list-playback-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-prefetch-schedules", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "list-prefetch-schedules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-source-locations", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "list-source-locations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-vod-sources", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "list-vod-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-playback-configuration", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "put-playback-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-channel", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "start-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-channel", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "stop-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-channel", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "update-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-live-source", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "update-live-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-source-location", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "update-source-location" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-vod-source", function()
		local result = common.execute_aws_command_with_input({ "mediatailor", "update-vod-source" })
		assert.is_true(result.success)
	end)

end)