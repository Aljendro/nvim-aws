-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: voice-id

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS voice-id service testing", function()
	it("should generate a cli skeleton for associate-fraudster", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "associate-fraudster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-domain", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "create-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-watchlist", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "create-watchlist" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-domain", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "delete-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-fraudster", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "delete-fraudster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-speaker", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "delete-speaker" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-watchlist", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "delete-watchlist" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-domain", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "describe-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fraudster", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "describe-fraudster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fraudster-registration-job", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "describe-fraudster-registration-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-speaker", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "describe-speaker" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-speaker-enrollment-job", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "describe-speaker-enrollment-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-watchlist", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "describe-watchlist" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-fraudster", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "disassociate-fraudster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for evaluate-session", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "evaluate-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-domains", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "list-domains" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-fraudster-registration-jobs", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "list-fraudster-registration-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-fraudsters", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "list-fraudsters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-speaker-enrollment-jobs", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "list-speaker-enrollment-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-speakers", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "list-speakers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-watchlists", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "list-watchlists" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for opt-out-speaker", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "opt-out-speaker" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-fraudster-registration-job", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "start-fraudster-registration-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-speaker-enrollment-job", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "start-speaker-enrollment-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-domain", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "update-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-watchlist", function()
		local result = common.execute_aws_command_with_input({ "voice-id", "update-watchlist" })
		assert.is_true(result.success)
	end)

end)