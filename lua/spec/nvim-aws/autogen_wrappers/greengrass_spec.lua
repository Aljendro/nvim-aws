-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: greengrass

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.greengrass")

describe("AWS greengrass service testing", function()
	it("should generate a cli skeleton with associate_role_to_group", function()
		local result = service.associate_role_to_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_service_role_to_account", function()
		local result = service.associate_service_role_to_account()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_connector_definition", function()
		local result = service.create_connector_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_connector_definition_version", function()
		local result = service.create_connector_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_core_definition", function()
		local result = service.create_core_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_core_definition_version", function()
		local result = service.create_core_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_deployment", function()
		local result = service.create_deployment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_device_definition", function()
		local result = service.create_device_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_device_definition_version", function()
		local result = service.create_device_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_function_definition", function()
		local result = service.create_function_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_function_definition_version", function()
		local result = service.create_function_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_group", function()
		local result = service.create_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_group_certificate_authority", function()
		local result = service.create_group_certificate_authority()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_group_version", function()
		local result = service.create_group_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_logger_definition", function()
		local result = service.create_logger_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_logger_definition_version", function()
		local result = service.create_logger_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_resource_definition", function()
		local result = service.create_resource_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_resource_definition_version", function()
		local result = service.create_resource_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_software_update_job", function()
		local result = service.create_software_update_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_subscription_definition", function()
		local result = service.create_subscription_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_subscription_definition_version", function()
		local result = service.create_subscription_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_connector_definition", function()
		local result = service.delete_connector_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_core_definition", function()
		local result = service.delete_core_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_device_definition", function()
		local result = service.delete_device_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_function_definition", function()
		local result = service.delete_function_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_group", function()
		local result = service.delete_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_logger_definition", function()
		local result = service.delete_logger_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_resource_definition", function()
		local result = service.delete_resource_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_subscription_definition", function()
		local result = service.delete_subscription_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_role_from_group", function()
		local result = service.disassociate_role_from_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_service_role_from_account", function()
		local result = service.disassociate_service_role_from_account()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_associated_role", function()
		local result = service.get_associated_role()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_bulk_deployment_status", function()
		local result = service.get_bulk_deployment_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_connectivity_info", function()
		local result = service.get_connectivity_info()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_connector_definition", function()
		local result = service.get_connector_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_connector_definition_version", function()
		local result = service.get_connector_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_core_definition", function()
		local result = service.get_core_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_core_definition_version", function()
		local result = service.get_core_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_deployment_status", function()
		local result = service.get_deployment_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_device_definition", function()
		local result = service.get_device_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_device_definition_version", function()
		local result = service.get_device_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_function_definition", function()
		local result = service.get_function_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_function_definition_version", function()
		local result = service.get_function_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_group", function()
		local result = service.get_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_group_certificate_authority", function()
		local result = service.get_group_certificate_authority()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_group_certificate_configuration", function()
		local result = service.get_group_certificate_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_group_version", function()
		local result = service.get_group_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_logger_definition", function()
		local result = service.get_logger_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_logger_definition_version", function()
		local result = service.get_logger_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_resource_definition", function()
		local result = service.get_resource_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_resource_definition_version", function()
		local result = service.get_resource_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_service_role_for_account", function()
		local result = service.get_service_role_for_account()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_subscription_definition", function()
		local result = service.get_subscription_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_subscription_definition_version", function()
		local result = service.get_subscription_definition_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_thing_runtime_configuration", function()
		local result = service.get_thing_runtime_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_bulk_deployment_detailed_reports", function()
		local result = service.list_bulk_deployment_detailed_reports()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_bulk_deployments", function()
		local result = service.list_bulk_deployments()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_connector_definition_versions", function()
		local result = service.list_connector_definition_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_connector_definitions", function()
		local result = service.list_connector_definitions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_core_definition_versions", function()
		local result = service.list_core_definition_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_core_definitions", function()
		local result = service.list_core_definitions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_deployments", function()
		local result = service.list_deployments()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_device_definition_versions", function()
		local result = service.list_device_definition_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_device_definitions", function()
		local result = service.list_device_definitions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_function_definition_versions", function()
		local result = service.list_function_definition_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_function_definitions", function()
		local result = service.list_function_definitions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_group_certificate_authorities", function()
		local result = service.list_group_certificate_authorities()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_group_versions", function()
		local result = service.list_group_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_groups", function()
		local result = service.list_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_logger_definition_versions", function()
		local result = service.list_logger_definition_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_logger_definitions", function()
		local result = service.list_logger_definitions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_resource_definition_versions", function()
		local result = service.list_resource_definition_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_resource_definitions", function()
		local result = service.list_resource_definitions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_subscription_definition_versions", function()
		local result = service.list_subscription_definition_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_subscription_definitions", function()
		local result = service.list_subscription_definitions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reset_deployments", function()
		local result = service.reset_deployments()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_bulk_deployment", function()
		local result = service.start_bulk_deployment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_bulk_deployment", function()
		local result = service.stop_bulk_deployment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_connectivity_info", function()
		local result = service.update_connectivity_info()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_connector_definition", function()
		local result = service.update_connector_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_core_definition", function()
		local result = service.update_core_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_device_definition", function()
		local result = service.update_device_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_function_definition", function()
		local result = service.update_function_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_group", function()
		local result = service.update_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_group_certificate_configuration", function()
		local result = service.update_group_certificate_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_logger_definition", function()
		local result = service.update_logger_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_resource_definition", function()
		local result = service.update_resource_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_subscription_definition", function()
		local result = service.update_subscription_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_thing_runtime_configuration", function()
		local result = service.update_thing_runtime_configuration()
		assert.is_true(result.success)
	end)

end)