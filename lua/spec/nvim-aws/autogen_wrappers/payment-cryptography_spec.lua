-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: payment-cryptography

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.payment-cryptography")

describe("AWS payment-cryptography service testing", function()
	it("should generate a cli skeleton with create_alias", function()
		local result = service.create_alias()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_key", function()
		local result = service.create_key()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_alias", function()
		local result = service.delete_alias()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_key", function()
		local result = service.delete_key()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with export_key", function()
		local result = service.export_key()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_alias", function()
		local result = service.get_alias()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_key", function()
		local result = service.get_key()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_parameters_for_export", function()
		local result = service.get_parameters_for_export()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_parameters_for_import", function()
		local result = service.get_parameters_for_import()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_public_key_certificate", function()
		local result = service.get_public_key_certificate()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with import_key", function()
		local result = service.import_key()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_aliases", function()
		local result = service.list_aliases()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_keys", function()
		local result = service.list_keys()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with restore_key", function()
		local result = service.restore_key()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_key_usage", function()
		local result = service.start_key_usage()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with stop_key_usage", function()
		local result = service.stop_key_usage()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_alias", function()
		local result = service.update_alias()
		assert.is_true(result.success)
	end)
end)