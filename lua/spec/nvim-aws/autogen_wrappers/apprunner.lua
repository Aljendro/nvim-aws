-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: apprunner

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS apprunner service testing", function()
	it("should generate a cli skeleton for associate-custom-domain", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "associate-custom-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-auto-scaling-configuration", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "create-auto-scaling-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-connection", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "create-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-observability-configuration", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "create-observability-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-service", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "create-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc-connector", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "create-vpc-connector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc-ingress-connection", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "create-vpc-ingress-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-auto-scaling-configuration", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "delete-auto-scaling-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-connection", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "delete-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-observability-configuration", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "delete-observability-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-service", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "delete-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpc-connector", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "delete-vpc-connector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpc-ingress-connection", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "delete-vpc-ingress-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-auto-scaling-configuration", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "describe-auto-scaling-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-custom-domains", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "describe-custom-domains" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-observability-configuration", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "describe-observability-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-service", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "describe-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-connector", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "describe-vpc-connector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-ingress-connection", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "describe-vpc-ingress-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-custom-domain", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "disassociate-custom-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-auto-scaling-configurations", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "list-auto-scaling-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-connections", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "list-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-observability-configurations", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "list-observability-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-operations", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "list-operations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-services", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "list-services" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-services-for-auto-scaling-configuration", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "list-services-for-auto-scaling-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-vpc-connectors", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "list-vpc-connectors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-vpc-ingress-connections", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "list-vpc-ingress-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for pause-service", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "pause-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for resume-service", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "resume-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-deployment", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "start-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-default-auto-scaling-configuration", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "update-default-auto-scaling-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-service", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "update-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-vpc-ingress-connection", function()
		local result = common.execute_aws_command_with_input({ "apprunner", "update-vpc-ingress-connection" })
		assert.is_true(result.success)
	end)

end)