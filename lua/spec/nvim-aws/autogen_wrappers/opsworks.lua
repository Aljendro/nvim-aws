-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: opsworks

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS opsworks service testing", function()
	it("should generate a cli skeleton for assign-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "assign-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for assign-volume", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "assign-volume" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-elastic-ip", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "associate-elastic-ip" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-elastic-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "attach-elastic-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for clone-stack", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "clone-stack" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-app", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "create-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-deployment", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "create-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "create-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-layer", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "create-layer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-stack", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "create-stack" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-user-profile", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "create-user-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-app", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "delete-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "delete-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-layer", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "delete-layer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-stack", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "delete-stack" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-user-profile", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "delete-user-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-ecs-cluster", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "deregister-ecs-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-elastic-ip", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "deregister-elastic-ip" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "deregister-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-rds-db-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "deregister-rds-db-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-volume", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "deregister-volume" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-agent-versions", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-agent-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-apps", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-apps" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-commands", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-commands" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-deployments", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-deployments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ecs-clusters", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-ecs-clusters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-elastic-ips", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-elastic-ips" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-elastic-load-balancers", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-elastic-load-balancers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instances", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-layers", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-layers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-load-based-auto-scaling", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-load-based-auto-scaling" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-my-user-profile", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-my-user-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-operating-systems", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-operating-systems" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-permissions", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-raid-arrays", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-raid-arrays" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-rds-db-instances", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-rds-db-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-service-errors", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-service-errors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-stack-provisioning-parameters", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-stack-provisioning-parameters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-stack-summary", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-stack-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-stacks", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-stacks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-time-based-auto-scaling", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-time-based-auto-scaling" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-user-profiles", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-user-profiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-volumes", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "describe-volumes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-elastic-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "detach-elastic-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-elastic-ip", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "disassociate-elastic-ip" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-hostname-suggestion", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "get-hostname-suggestion" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for grant-access", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "grant-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "list-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reboot-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "reboot-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-ecs-cluster", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "register-ecs-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-elastic-ip", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "register-elastic-ip" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "register-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-rds-db-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "register-rds-db-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-volume", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "register-volume" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-load-based-auto-scaling", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "set-load-based-auto-scaling" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-permission", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "set-permission" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-time-based-auto-scaling", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "set-time-based-auto-scaling" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "start-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-stack", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "start-stack" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "stop-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-stack", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "stop-stack" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for unassign-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "unassign-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for unassign-volume", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "unassign-volume" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-app", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "update-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-elastic-ip", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "update-elastic-ip" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "update-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-layer", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "update-layer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-my-user-profile", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "update-my-user-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-rds-db-instance", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "update-rds-db-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-stack", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "update-stack" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-user-profile", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "update-user-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-volume", function()
		local result = common.execute_aws_command_with_input({ "opsworks", "update-volume" })
		assert.is_true(result.success)
	end)

end)