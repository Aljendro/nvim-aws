-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: organizations

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS organizations service testing", function()
	it("should generate a cli skeleton for accept-handshake", function()
		local result = common.execute_aws_command_with_input({ "organizations", "accept-handshake" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-policy", function()
		local result = common.execute_aws_command_with_input({ "organizations", "attach-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-handshake", function()
		local result = common.execute_aws_command_with_input({ "organizations", "cancel-handshake" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for close-account", function()
		local result = common.execute_aws_command_with_input({ "organizations", "close-account" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-account", function()
		local result = common.execute_aws_command_with_input({ "organizations", "create-account" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-gov-cloud-account", function()
		local result = common.execute_aws_command_with_input({ "organizations", "create-gov-cloud-account" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-organization", function()
		local result = common.execute_aws_command_with_input({ "organizations", "create-organization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-organizational-unit", function()
		local result = common.execute_aws_command_with_input({ "organizations", "create-organizational-unit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-policy", function()
		local result = common.execute_aws_command_with_input({ "organizations", "create-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for decline-handshake", function()
		local result = common.execute_aws_command_with_input({ "organizations", "decline-handshake" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-organization", function()
		local result = common.execute_aws_command_with_input({ "organizations", "delete-organization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-organizational-unit", function()
		local result = common.execute_aws_command_with_input({ "organizations", "delete-organizational-unit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-policy", function()
		local result = common.execute_aws_command_with_input({ "organizations", "delete-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "organizations", "delete-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-delegated-administrator", function()
		local result = common.execute_aws_command_with_input({ "organizations", "deregister-delegated-administrator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-account", function()
		local result = common.execute_aws_command_with_input({ "organizations", "describe-account" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-create-account-status", function()
		local result = common.execute_aws_command_with_input({ "organizations", "describe-create-account-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-effective-policy", function()
		local result = common.execute_aws_command_with_input({ "organizations", "describe-effective-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-handshake", function()
		local result = common.execute_aws_command_with_input({ "organizations", "describe-handshake" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-organization", function()
		local result = common.execute_aws_command_with_input({ "organizations", "describe-organization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-organizational-unit", function()
		local result = common.execute_aws_command_with_input({ "organizations", "describe-organizational-unit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-policy", function()
		local result = common.execute_aws_command_with_input({ "organizations", "describe-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "organizations", "describe-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-policy", function()
		local result = common.execute_aws_command_with_input({ "organizations", "detach-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-aws-service-access", function()
		local result = common.execute_aws_command_with_input({ "organizations", "disable-aws-service-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-policy-type", function()
		local result = common.execute_aws_command_with_input({ "organizations", "disable-policy-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-aws-service-access", function()
		local result = common.execute_aws_command_with_input({ "organizations", "enable-aws-service-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-all-features", function()
		local result = common.execute_aws_command_with_input({ "organizations", "enable-all-features" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-policy-type", function()
		local result = common.execute_aws_command_with_input({ "organizations", "enable-policy-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for invite-account-to-organization", function()
		local result = common.execute_aws_command_with_input({ "organizations", "invite-account-to-organization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for leave-organization", function()
		local result = common.execute_aws_command_with_input({ "organizations", "leave-organization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-aws-service-access-for-organization", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-aws-service-access-for-organization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-accounts", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-accounts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-accounts-for-parent", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-accounts-for-parent" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-children", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-children" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-create-account-status", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-create-account-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-delegated-administrators", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-delegated-administrators" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-delegated-services-for-account", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-delegated-services-for-account" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-handshakes-for-account", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-handshakes-for-account" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-handshakes-for-organization", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-handshakes-for-organization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-organizational-units-for-parent", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-organizational-units-for-parent" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-parents", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-parents" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-policies", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-policies-for-target", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-policies-for-target" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-roots", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-roots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-targets-for-policy", function()
		local result = common.execute_aws_command_with_input({ "organizations", "list-targets-for-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for move-account", function()
		local result = common.execute_aws_command_with_input({ "organizations", "move-account" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "organizations", "put-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-delegated-administrator", function()
		local result = common.execute_aws_command_with_input({ "organizations", "register-delegated-administrator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-account-from-organization", function()
		local result = common.execute_aws_command_with_input({ "organizations", "remove-account-from-organization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "organizations", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "organizations", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-organizational-unit", function()
		local result = common.execute_aws_command_with_input({ "organizations", "update-organizational-unit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-policy", function()
		local result = common.execute_aws_command_with_input({ "organizations", "update-policy" })
		assert.is_true(result.success)
	end)

end)