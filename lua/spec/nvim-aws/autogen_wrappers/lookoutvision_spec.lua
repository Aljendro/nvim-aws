-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: lookoutvision

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.lookoutvision")

describe("AWS lookoutvision service testing", function()
	it("should generate a cli skeleton with create_dataset", function()
		local result = service.create_dataset()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_model", function()
		local result = service.create_model()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_project", function()
		local result = service.create_project()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_dataset", function()
		local result = service.delete_dataset()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_model", function()
		local result = service.delete_model()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_project", function()
		local result = service.delete_project()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_dataset", function()
		local result = service.describe_dataset()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_model", function()
		local result = service.describe_model()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_model_packaging_job", function()
		local result = service.describe_model_packaging_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_project", function()
		local result = service.describe_project()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with detect_anomalies", function()
		local result = service.detect_anomalies()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_dataset_entries", function()
		local result = service.list_dataset_entries()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_model_packaging_jobs", function()
		local result = service.list_model_packaging_jobs()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_models", function()
		local result = service.list_models()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_projects", function()
		local result = service.list_projects()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_model", function()
		local result = service.start_model()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_model_packaging_job", function()
		local result = service.start_model_packaging_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with stop_model", function()
		local result = service.stop_model()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_dataset_entries", function()
		local result = service.update_dataset_entries()
		assert.is_true(result.success)
	end)
end)