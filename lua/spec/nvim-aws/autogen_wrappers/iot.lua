-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: iot

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS iot service testing", function()
	it("should generate a cli skeleton for accept-certificate-transfer", function()
		local result = common.execute_aws_command_with_input({ "iot", "accept-certificate-transfer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-thing-to-billing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "add-thing-to-billing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-thing-to-thing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "add-thing-to-thing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-sbom-with-package-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "associate-sbom-with-package-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-targets-with-job", function()
		local result = common.execute_aws_command_with_input({ "iot", "associate-targets-with-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-policy", function()
		local result = common.execute_aws_command_with_input({ "iot", "attach-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-principal-policy", function()
		local result = common.execute_aws_command_with_input({ "iot", "attach-principal-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-security-profile", function()
		local result = common.execute_aws_command_with_input({ "iot", "attach-security-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-thing-principal", function()
		local result = common.execute_aws_command_with_input({ "iot", "attach-thing-principal" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-audit-mitigation-actions-task", function()
		local result = common.execute_aws_command_with_input({ "iot", "cancel-audit-mitigation-actions-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-audit-task", function()
		local result = common.execute_aws_command_with_input({ "iot", "cancel-audit-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-certificate-transfer", function()
		local result = common.execute_aws_command_with_input({ "iot", "cancel-certificate-transfer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-detect-mitigation-actions-task", function()
		local result = common.execute_aws_command_with_input({ "iot", "cancel-detect-mitigation-actions-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-job", function()
		local result = common.execute_aws_command_with_input({ "iot", "cancel-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-job-execution", function()
		local result = common.execute_aws_command_with_input({ "iot", "cancel-job-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for clear-default-authorizer", function()
		local result = common.execute_aws_command_with_input({ "iot", "clear-default-authorizer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for confirm-topic-rule-destination", function()
		local result = common.execute_aws_command_with_input({ "iot", "confirm-topic-rule-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-audit-suppression", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-audit-suppression" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-authorizer", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-authorizer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-billing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-billing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-certificate-from-csr", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-certificate-from-csr" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-certificate-provider", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-certificate-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-command", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-command" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-custom-metric", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-custom-metric" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-dimension", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-dimension" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-domain-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-domain-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-dynamic-thing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-dynamic-thing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-fleet-metric", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-fleet-metric" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-job", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-job-template", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-job-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-keys-and-certificate", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-keys-and-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-mitigation-action", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-mitigation-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-ota-update", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-ota-update" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-package", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-package-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-package-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-policy", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-policy-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-policy-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-provisioning-claim", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-provisioning-claim" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-provisioning-template", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-provisioning-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-provisioning-template-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-provisioning-template-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-role-alias", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-role-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-scheduled-audit", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-scheduled-audit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-security-profile", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-security-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-stream", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-thing", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-thing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-thing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-thing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-thing-type", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-thing-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-topic-rule", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-topic-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-topic-rule-destination", function()
		local result = common.execute_aws_command_with_input({ "iot", "create-topic-rule-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-account-audit-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-account-audit-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-audit-suppression", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-audit-suppression" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-authorizer", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-authorizer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-billing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-billing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ca-certificate", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-ca-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-certificate", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-certificate-provider", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-certificate-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-command", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-command" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-command-execution", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-command-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-custom-metric", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-custom-metric" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-dimension", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-dimension" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-domain-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-domain-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-dynamic-thing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-dynamic-thing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-fleet-metric", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-fleet-metric" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-job", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-job-execution", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-job-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-job-template", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-job-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-mitigation-action", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-mitigation-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ota-update", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-ota-update" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-package", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-package-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-package-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-policy", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-policy-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-policy-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-provisioning-template", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-provisioning-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-provisioning-template-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-provisioning-template-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-registration-code", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-registration-code" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-role-alias", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-role-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-scheduled-audit", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-scheduled-audit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-security-profile", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-security-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-stream", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-thing", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-thing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-thing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-thing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-thing-type", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-thing-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-topic-rule", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-topic-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-topic-rule-destination", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-topic-rule-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-v2-logging-level", function()
		local result = common.execute_aws_command_with_input({ "iot", "delete-v2-logging-level" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deprecate-thing-type", function()
		local result = common.execute_aws_command_with_input({ "iot", "deprecate-thing-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-account-audit-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-account-audit-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-audit-finding", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-audit-finding" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-audit-mitigation-actions-task", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-audit-mitigation-actions-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-audit-suppression", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-audit-suppression" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-audit-task", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-audit-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-authorizer", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-authorizer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-billing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-billing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ca-certificate", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-ca-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-certificate", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-certificate-provider", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-certificate-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-custom-metric", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-custom-metric" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-default-authorizer", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-default-authorizer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-detect-mitigation-actions-task", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-detect-mitigation-actions-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-dimension", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-dimension" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-domain-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-domain-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-endpoint", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-event-configurations", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-event-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-metric", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-fleet-metric" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-index", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-index" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-job", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-job-execution", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-job-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-job-template", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-job-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-managed-job-template", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-managed-job-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-mitigation-action", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-mitigation-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-provisioning-template", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-provisioning-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-provisioning-template-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-provisioning-template-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-role-alias", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-role-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-scheduled-audit", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-scheduled-audit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-security-profile", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-security-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-stream", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-thing", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-thing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-thing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-thing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-thing-registration-task", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-thing-registration-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-thing-type", function()
		local result = common.execute_aws_command_with_input({ "iot", "describe-thing-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-policy", function()
		local result = common.execute_aws_command_with_input({ "iot", "detach-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-principal-policy", function()
		local result = common.execute_aws_command_with_input({ "iot", "detach-principal-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-security-profile", function()
		local result = common.execute_aws_command_with_input({ "iot", "detach-security-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-thing-principal", function()
		local result = common.execute_aws_command_with_input({ "iot", "detach-thing-principal" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-topic-rule", function()
		local result = common.execute_aws_command_with_input({ "iot", "disable-topic-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-sbom-from-package-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "disassociate-sbom-from-package-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-topic-rule", function()
		local result = common.execute_aws_command_with_input({ "iot", "enable-topic-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-behavior-model-training-summaries", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-behavior-model-training-summaries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-buckets-aggregation", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-buckets-aggregation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cardinality", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-cardinality" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-command", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-command" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-command-execution", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-command-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-effective-policies", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-effective-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-indexing-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-indexing-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-job-document", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-job-document" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-logging-options", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-logging-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ota-update", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-ota-update" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-package", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-package-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-package-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-package-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-package-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-percentiles", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-percentiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-policy", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-policy-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-policy-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-registration-code", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-registration-code" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-statistics", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-thing-connectivity-data", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-thing-connectivity-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-topic-rule", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-topic-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-topic-rule-destination", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-topic-rule-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-v2-logging-options", function()
		local result = common.execute_aws_command_with_input({ "iot", "get-v2-logging-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-active-violations", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-active-violations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-attached-policies", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-attached-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-audit-findings", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-audit-findings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-audit-mitigation-actions-executions", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-audit-mitigation-actions-executions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-audit-mitigation-actions-tasks", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-audit-mitigation-actions-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-audit-suppressions", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-audit-suppressions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-audit-tasks", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-audit-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-authorizers", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-authorizers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-billing-groups", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-billing-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-ca-certificates", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-ca-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-certificate-providers", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-certificate-providers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-certificates", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-certificates-by-ca", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-certificates-by-ca" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-command-executions", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-command-executions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-commands", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-commands" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-custom-metrics", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-custom-metrics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-detect-mitigation-actions-executions", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-detect-mitigation-actions-executions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-detect-mitigation-actions-tasks", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-detect-mitigation-actions-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-dimensions", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-dimensions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-domain-configurations", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-domain-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-fleet-metrics", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-fleet-metrics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-indices", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-indices" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-job-executions-for-job", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-job-executions-for-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-job-executions-for-thing", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-job-executions-for-thing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-job-templates", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-job-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-jobs", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-managed-job-templates", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-managed-job-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-metric-values", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-metric-values" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-mitigation-actions", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-mitigation-actions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-ota-updates", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-ota-updates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-outgoing-certificates", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-outgoing-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-package-versions", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-package-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-packages", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-packages" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-policies", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-policy-principals", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-policy-principals" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-policy-versions", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-policy-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-principal-policies", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-principal-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-principal-things", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-principal-things" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-principal-things-v2", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-principal-things-v2" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-provisioning-template-versions", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-provisioning-template-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-provisioning-templates", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-provisioning-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-related-resources-for-audit-finding", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-related-resources-for-audit-finding" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-role-aliases", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-role-aliases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-sbom-validation-results", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-sbom-validation-results" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-scheduled-audits", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-scheduled-audits" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-security-profiles", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-security-profiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-security-profiles-for-target", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-security-profiles-for-target" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-streams", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-streams" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-targets-for-policy", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-targets-for-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-targets-for-security-profile", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-targets-for-security-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-thing-groups", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-thing-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-thing-groups-for-thing", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-thing-groups-for-thing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-thing-principals", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-thing-principals" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-thing-principals-v2", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-thing-principals-v2" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-thing-registration-task-reports", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-thing-registration-task-reports" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-thing-registration-tasks", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-thing-registration-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-thing-types", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-thing-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-things", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-things" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-things-in-billing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-things-in-billing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-things-in-thing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-things-in-thing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-topic-rule-destinations", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-topic-rule-destinations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-topic-rules", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-topic-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-v2-logging-levels", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-v2-logging-levels" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-violation-events", function()
		local result = common.execute_aws_command_with_input({ "iot", "list-violation-events" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-verification-state-on-violation", function()
		local result = common.execute_aws_command_with_input({ "iot", "put-verification-state-on-violation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-ca-certificate", function()
		local result = common.execute_aws_command_with_input({ "iot", "register-ca-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-certificate", function()
		local result = common.execute_aws_command_with_input({ "iot", "register-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-certificate-without-ca", function()
		local result = common.execute_aws_command_with_input({ "iot", "register-certificate-without-ca" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-thing", function()
		local result = common.execute_aws_command_with_input({ "iot", "register-thing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-certificate-transfer", function()
		local result = common.execute_aws_command_with_input({ "iot", "reject-certificate-transfer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-thing-from-billing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "remove-thing-from-billing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-thing-from-thing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "remove-thing-from-thing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for replace-topic-rule", function()
		local result = common.execute_aws_command_with_input({ "iot", "replace-topic-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-index", function()
		local result = common.execute_aws_command_with_input({ "iot", "search-index" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-default-authorizer", function()
		local result = common.execute_aws_command_with_input({ "iot", "set-default-authorizer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-default-policy-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "set-default-policy-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-logging-options", function()
		local result = common.execute_aws_command_with_input({ "iot", "set-logging-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-v2-logging-level", function()
		local result = common.execute_aws_command_with_input({ "iot", "set-v2-logging-level" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-v2-logging-options", function()
		local result = common.execute_aws_command_with_input({ "iot", "set-v2-logging-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-audit-mitigation-actions-task", function()
		local result = common.execute_aws_command_with_input({ "iot", "start-audit-mitigation-actions-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-detect-mitigation-actions-task", function()
		local result = common.execute_aws_command_with_input({ "iot", "start-detect-mitigation-actions-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-on-demand-audit-task", function()
		local result = common.execute_aws_command_with_input({ "iot", "start-on-demand-audit-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-thing-registration-task", function()
		local result = common.execute_aws_command_with_input({ "iot", "start-thing-registration-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-thing-registration-task", function()
		local result = common.execute_aws_command_with_input({ "iot", "stop-thing-registration-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "iot", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for test-authorization", function()
		local result = common.execute_aws_command_with_input({ "iot", "test-authorization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for test-invoke-authorizer", function()
		local result = common.execute_aws_command_with_input({ "iot", "test-invoke-authorizer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for transfer-certificate", function()
		local result = common.execute_aws_command_with_input({ "iot", "transfer-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "iot", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-account-audit-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-account-audit-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-audit-suppression", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-audit-suppression" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-authorizer", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-authorizer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-billing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-billing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-ca-certificate", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-ca-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-certificate", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-certificate-provider", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-certificate-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-command", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-command" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-custom-metric", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-custom-metric" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-dimension", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-dimension" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-domain-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-domain-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-dynamic-thing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-dynamic-thing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-event-configurations", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-event-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-fleet-metric", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-fleet-metric" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-indexing-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-indexing-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-job", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-mitigation-action", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-mitigation-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-package", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-package-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-package-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-package-version", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-package-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-provisioning-template", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-provisioning-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-role-alias", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-role-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-scheduled-audit", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-scheduled-audit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-security-profile", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-security-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-stream", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-thing", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-thing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-thing-group", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-thing-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-thing-groups-for-thing", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-thing-groups-for-thing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-thing-type", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-thing-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-topic-rule-destination", function()
		local result = common.execute_aws_command_with_input({ "iot", "update-topic-rule-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for validate-security-profile-behaviors", function()
		local result = common.execute_aws_command_with_input({ "iot", "validate-security-profile-behaviors" })
		assert.is_true(result.success)
	end)

end)