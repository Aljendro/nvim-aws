-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: lex-models-v2

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS lex-models-v2 service testing", function()
	it("should generate a cli skeleton for batch-create-custom-vocabulary-item", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "batch-create-custom-vocabulary-item" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-delete-custom-vocabulary-item", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "batch-delete-custom-vocabulary-item" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-update-custom-vocabulary-item", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "batch-update-custom-vocabulary-item" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for build-bot-locale", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "build-bot-locale" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-bot", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-bot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-bot-alias", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-bot-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-bot-locale", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-bot-locale" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-bot-replica", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-bot-replica" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-bot-version", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-bot-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-export", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-export" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-intent", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-intent" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-resource-policy-statement", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-resource-policy-statement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-slot", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-slot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-slot-type", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-slot-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-test-set-discrepancy-report", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-test-set-discrepancy-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-upload-url", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "create-upload-url" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bot", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-bot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bot-alias", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-bot-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bot-locale", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-bot-locale" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bot-replica", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-bot-replica" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bot-version", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-bot-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-custom-vocabulary", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-custom-vocabulary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-export", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-export" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-import", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-import" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-intent", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-intent" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-policy-statement", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-resource-policy-statement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-slot", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-slot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-slot-type", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-slot-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-test-set", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-test-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-utterances", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "delete-utterances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-bot", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-bot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-bot-alias", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-bot-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-bot-locale", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-bot-locale" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-bot-recommendation", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-bot-recommendation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-bot-replica", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-bot-replica" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-bot-resource-generation", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-bot-resource-generation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-bot-version", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-bot-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-custom-vocabulary-metadata", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-custom-vocabulary-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-export", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-export" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-import", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-import" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-intent", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-intent" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-slot", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-slot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-slot-type", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-slot-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-test-execution", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-test-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-test-set", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-test-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-test-set-discrepancy-report", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-test-set-discrepancy-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-test-set-generation", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "describe-test-set-generation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-bot-element", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "generate-bot-element" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-test-execution-artifacts-url", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "get-test-execution-artifacts-url" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-aggregated-utterances", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-aggregated-utterances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bot-alias-replicas", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-bot-alias-replicas" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bot-aliases", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-bot-aliases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bot-locales", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-bot-locales" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bot-recommendations", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-bot-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bot-replicas", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-bot-replicas" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bot-resource-generations", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-bot-resource-generations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bot-version-replicas", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-bot-version-replicas" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bot-versions", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-bot-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-bots", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-bots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-built-in-intents", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-built-in-intents" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-built-in-slot-types", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-built-in-slot-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-custom-vocabulary-items", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-custom-vocabulary-items" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-exports", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-exports" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-imports", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-imports" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-intent-metrics", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-intent-metrics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-intent-paths", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-intent-paths" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-intent-stage-metrics", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-intent-stage-metrics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-intents", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-intents" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-recommended-intents", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-recommended-intents" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-session-analytics-data", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-session-analytics-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-session-metrics", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-session-metrics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-slot-types", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-slot-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-slots", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-slots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-test-execution-result-items", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-test-execution-result-items" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-test-executions", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-test-executions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-test-set-records", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-test-set-records" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-test-sets", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-test-sets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-utterance-analytics-data", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-utterance-analytics-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-utterance-metrics", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "list-utterance-metrics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-associated-transcripts", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "search-associated-transcripts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-bot-recommendation", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "start-bot-recommendation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-bot-resource-generation", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "start-bot-resource-generation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-import", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "start-import" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-test-execution", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "start-test-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-test-set-generation", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "start-test-set-generation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-bot-recommendation", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "stop-bot-recommendation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-bot", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "update-bot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-bot-alias", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "update-bot-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-bot-locale", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "update-bot-locale" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-bot-recommendation", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "update-bot-recommendation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-export", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "update-export" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-intent", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "update-intent" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "update-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-slot", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "update-slot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-slot-type", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "update-slot-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-test-set", function()
		local result = common.execute_aws_command_with_input({ "lexv2-models", "update-test-set" })
		assert.is_true(result.success)
	end)

end)