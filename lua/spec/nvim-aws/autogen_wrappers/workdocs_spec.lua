-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: workdocs

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.workdocs")

describe("AWS workdocs service testing", function()
	it("should generate a cli skeleton with abort_document_version_upload", function()
		local result = service.abort_document_version_upload()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with activate_user", function()
		local result = service.activate_user()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with add_resource_permissions", function()
		local result = service.add_resource_permissions()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_comment", function()
		local result = service.create_comment()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_custom_metadata", function()
		local result = service.create_custom_metadata()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_folder", function()
		local result = service.create_folder()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_labels", function()
		local result = service.create_labels()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_notification_subscription", function()
		local result = service.create_notification_subscription()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_user", function()
		local result = service.create_user()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with deactivate_user", function()
		local result = service.deactivate_user()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_comment", function()
		local result = service.delete_comment()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_custom_metadata", function()
		local result = service.delete_custom_metadata()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_document", function()
		local result = service.delete_document()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_document_version", function()
		local result = service.delete_document_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_folder", function()
		local result = service.delete_folder()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_folder_contents", function()
		local result = service.delete_folder_contents()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_labels", function()
		local result = service.delete_labels()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_notification_subscription", function()
		local result = service.delete_notification_subscription()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_user", function()
		local result = service.delete_user()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_activities", function()
		local result = service.describe_activities()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_comments", function()
		local result = service.describe_comments()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_document_versions", function()
		local result = service.describe_document_versions()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_folder_contents", function()
		local result = service.describe_folder_contents()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_groups", function()
		local result = service.describe_groups()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_notification_subscriptions", function()
		local result = service.describe_notification_subscriptions()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_resource_permissions", function()
		local result = service.describe_resource_permissions()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_root_folders", function()
		local result = service.describe_root_folders()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_users", function()
		local result = service.describe_users()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_current_user", function()
		local result = service.get_current_user()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_document", function()
		local result = service.get_document()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_document_path", function()
		local result = service.get_document_path()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_document_version", function()
		local result = service.get_document_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_folder", function()
		local result = service.get_folder()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_folder_path", function()
		local result = service.get_folder_path()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_resources", function()
		local result = service.get_resources()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with initiate_document_version_upload", function()
		local result = service.initiate_document_version_upload()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with remove_all_resource_permissions", function()
		local result = service.remove_all_resource_permissions()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with remove_resource_permission", function()
		local result = service.remove_resource_permission()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with restore_document_versions", function()
		local result = service.restore_document_versions()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with search_resources", function()
		local result = service.search_resources()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_document", function()
		local result = service.update_document()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_document_version", function()
		local result = service.update_document_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_folder", function()
		local result = service.update_folder()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_user", function()
		local result = service.update_user()
		assert.is_true(result.success)
	end)
end)