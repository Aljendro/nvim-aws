-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: mq

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.mq")

describe("AWS mq service testing", function()
	it("should generate a cli skeleton with create_broker", function()
		local result = service.create_broker()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_configuration", function()
		local result = service.create_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_tags", function()
		local result = service.create_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_user", function()
		local result = service.create_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_broker", function()
		local result = service.delete_broker()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_tags", function()
		local result = service.delete_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_user", function()
		local result = service.delete_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_broker", function()
		local result = service.describe_broker()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_broker_engine_types", function()
		local result = service.describe_broker_engine_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_broker_instance_options", function()
		local result = service.describe_broker_instance_options()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_configuration", function()
		local result = service.describe_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_configuration_revision", function()
		local result = service.describe_configuration_revision()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_user", function()
		local result = service.describe_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_brokers", function()
		local result = service.list_brokers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_configuration_revisions", function()
		local result = service.list_configuration_revisions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_configurations", function()
		local result = service.list_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags", function()
		local result = service.list_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_users", function()
		local result = service.list_users()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with promote", function()
		local result = service.promote()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reboot_broker", function()
		local result = service.reboot_broker()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_broker", function()
		local result = service.update_broker()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_configuration", function()
		local result = service.update_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user", function()
		local result = service.update_user()
		assert.is_true(result.success)
	end)

end)