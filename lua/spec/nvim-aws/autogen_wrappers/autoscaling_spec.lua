-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: auto-scaling

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.autoscaling")

describe("AWS auto-scaling service testing", function()
	it("should generate a cli skeleton with attach_instances", function()
		local result = service.attach_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with attach_load_balancer_target_groups", function()
		local result = service.attach_load_balancer_target_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with attach_load_balancers", function()
		local result = service.attach_load_balancers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with attach_traffic_sources", function()
		local result = service.attach_traffic_sources()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_delete_scheduled_action", function()
		local result = service.batch_delete_scheduled_action()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_put_scheduled_update_group_action", function()
		local result = service.batch_put_scheduled_update_group_action()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_instance_refresh", function()
		local result = service.cancel_instance_refresh()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with complete_lifecycle_action", function()
		local result = service.complete_lifecycle_action()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_auto_scaling_group", function()
		local result = service.create_auto_scaling_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_launch_configuration", function()
		local result = service.create_launch_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_or_update_tags", function()
		local result = service.create_or_update_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_auto_scaling_group", function()
		local result = service.delete_auto_scaling_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_launch_configuration", function()
		local result = service.delete_launch_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_lifecycle_hook", function()
		local result = service.delete_lifecycle_hook()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_notification_configuration", function()
		local result = service.delete_notification_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_policy", function()
		local result = service.delete_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_scheduled_action", function()
		local result = service.delete_scheduled_action()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_tags", function()
		local result = service.delete_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_warm_pool", function()
		local result = service.delete_warm_pool()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_account_limits", function()
		local result = service.describe_account_limits()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_adjustment_types", function()
		local result = service.describe_adjustment_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_auto_scaling_groups", function()
		local result = service.describe_auto_scaling_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_auto_scaling_instances", function()
		local result = service.describe_auto_scaling_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_auto_scaling_notification_types", function()
		local result = service.describe_auto_scaling_notification_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_instance_refreshes", function()
		local result = service.describe_instance_refreshes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_launch_configurations", function()
		local result = service.describe_launch_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_lifecycle_hook_types", function()
		local result = service.describe_lifecycle_hook_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_lifecycle_hooks", function()
		local result = service.describe_lifecycle_hooks()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_load_balancer_target_groups", function()
		local result = service.describe_load_balancer_target_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_load_balancers", function()
		local result = service.describe_load_balancers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_metric_collection_types", function()
		local result = service.describe_metric_collection_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_notification_configurations", function()
		local result = service.describe_notification_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_policies", function()
		local result = service.describe_policies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_scaling_activities", function()
		local result = service.describe_scaling_activities()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_scaling_process_types", function()
		local result = service.describe_scaling_process_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_scheduled_actions", function()
		local result = service.describe_scheduled_actions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_tags", function()
		local result = service.describe_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_termination_policy_types", function()
		local result = service.describe_termination_policy_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_traffic_sources", function()
		local result = service.describe_traffic_sources()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_warm_pool", function()
		local result = service.describe_warm_pool()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with detach_instances", function()
		local result = service.detach_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with detach_load_balancer_target_groups", function()
		local result = service.detach_load_balancer_target_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with detach_load_balancers", function()
		local result = service.detach_load_balancers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with detach_traffic_sources", function()
		local result = service.detach_traffic_sources()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disable_metrics_collection", function()
		local result = service.disable_metrics_collection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_metrics_collection", function()
		local result = service.enable_metrics_collection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enter_standby", function()
		local result = service.enter_standby()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with execute_policy", function()
		local result = service.execute_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with exit_standby", function()
		local result = service.exit_standby()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_predictive_scaling_forecast", function()
		local result = service.get_predictive_scaling_forecast()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_lifecycle_hook", function()
		local result = service.put_lifecycle_hook()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_notification_configuration", function()
		local result = service.put_notification_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_scaling_policy", function()
		local result = service.put_scaling_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_scheduled_update_group_action", function()
		local result = service.put_scheduled_update_group_action()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_warm_pool", function()
		local result = service.put_warm_pool()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with record_lifecycle_action_heartbeat", function()
		local result = service.record_lifecycle_action_heartbeat()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with resume_processes", function()
		local result = service.resume_processes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with rollback_instance_refresh", function()
		local result = service.rollback_instance_refresh()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with set_desired_capacity", function()
		local result = service.set_desired_capacity()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with set_instance_health", function()
		local result = service.set_instance_health()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with set_instance_protection", function()
		local result = service.set_instance_protection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_instance_refresh", function()
		local result = service.start_instance_refresh()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with suspend_processes", function()
		local result = service.suspend_processes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with terminate_instance_in_auto_scaling_group", function()
		local result = service.terminate_instance_in_auto_scaling_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_auto_scaling_group", function()
		local result = service.update_auto_scaling_group()
		assert.is_true(result.success)
	end)

end)