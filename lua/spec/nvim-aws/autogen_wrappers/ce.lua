-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: cost-explorer

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS cost-explorer service testing", function()
	it("should generate a cli skeleton for create-anomaly-monitor", function()
		local result = common.execute_aws_command_with_input({ "ce", "create-anomaly-monitor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-anomaly-subscription", function()
		local result = common.execute_aws_command_with_input({ "ce", "create-anomaly-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cost-category-definition", function()
		local result = common.execute_aws_command_with_input({ "ce", "create-cost-category-definition" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-anomaly-monitor", function()
		local result = common.execute_aws_command_with_input({ "ce", "delete-anomaly-monitor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-anomaly-subscription", function()
		local result = common.execute_aws_command_with_input({ "ce", "delete-anomaly-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cost-category-definition", function()
		local result = common.execute_aws_command_with_input({ "ce", "delete-cost-category-definition" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cost-category-definition", function()
		local result = common.execute_aws_command_with_input({ "ce", "describe-cost-category-definition" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-anomalies", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-anomalies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-anomaly-monitors", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-anomaly-monitors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-anomaly-subscriptions", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-anomaly-subscriptions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-approximate-usage-records", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-approximate-usage-records" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-commitment-purchase-analysis", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-commitment-purchase-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cost-and-usage", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-cost-and-usage" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cost-and-usage-with-resources", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-cost-and-usage-with-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cost-categories", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-cost-categories" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cost-forecast", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-cost-forecast" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-dimension-values", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-dimension-values" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-reservation-coverage", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-reservation-coverage" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-reservation-purchase-recommendation", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-reservation-purchase-recommendation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-reservation-utilization", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-reservation-utilization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-rightsizing-recommendation", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-rightsizing-recommendation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-savings-plan-purchase-recommendation-details", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-savings-plan-purchase-recommendation-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-savings-plans-coverage", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-savings-plans-coverage" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-savings-plans-purchase-recommendation", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-savings-plans-purchase-recommendation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-savings-plans-utilization", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-savings-plans-utilization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-savings-plans-utilization-details", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-savings-plans-utilization-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-tags", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-usage-forecast", function()
		local result = common.execute_aws_command_with_input({ "ce", "get-usage-forecast" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-commitment-purchase-analyses", function()
		local result = common.execute_aws_command_with_input({ "ce", "list-commitment-purchase-analyses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-cost-allocation-tag-backfill-history", function()
		local result = common.execute_aws_command_with_input({ "ce", "list-cost-allocation-tag-backfill-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-cost-allocation-tags", function()
		local result = common.execute_aws_command_with_input({ "ce", "list-cost-allocation-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-cost-category-definitions", function()
		local result = common.execute_aws_command_with_input({ "ce", "list-cost-category-definitions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-savings-plans-purchase-recommendation-generation", function()
		local result = common.execute_aws_command_with_input({ "ce", "list-savings-plans-purchase-recommendation-generation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "ce", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for provide-anomaly-feedback", function()
		local result = common.execute_aws_command_with_input({ "ce", "provide-anomaly-feedback" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-commitment-purchase-analysis", function()
		local result = common.execute_aws_command_with_input({ "ce", "start-commitment-purchase-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-cost-allocation-tag-backfill", function()
		local result = common.execute_aws_command_with_input({ "ce", "start-cost-allocation-tag-backfill" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-savings-plans-purchase-recommendation-generation", function()
		local result = common.execute_aws_command_with_input({ "ce", "start-savings-plans-purchase-recommendation-generation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "ce", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "ce", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-anomaly-monitor", function()
		local result = common.execute_aws_command_with_input({ "ce", "update-anomaly-monitor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-anomaly-subscription", function()
		local result = common.execute_aws_command_with_input({ "ce", "update-anomaly-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-cost-allocation-tags-status", function()
		local result = common.execute_aws_command_with_input({ "ce", "update-cost-allocation-tags-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-cost-category-definition", function()
		local result = common.execute_aws_command_with_input({ "ce", "update-cost-category-definition" })
		assert.is_true(result.success)
	end)

end)