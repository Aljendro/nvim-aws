-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: iottwinmaker

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.iottwinmaker")

describe("AWS iottwinmaker service testing", function()
	it("should generate a cli skeleton with batch_put_property_values", function()
		local result = service.batch_put_property_values()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_metadata_transfer_job", function()
		local result = service.cancel_metadata_transfer_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_component_type", function()
		local result = service.create_component_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_entity", function()
		local result = service.create_entity()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_metadata_transfer_job", function()
		local result = service.create_metadata_transfer_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_scene", function()
		local result = service.create_scene()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_sync_job", function()
		local result = service.create_sync_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_workspace", function()
		local result = service.create_workspace()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_component_type", function()
		local result = service.delete_component_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_entity", function()
		local result = service.delete_entity()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_scene", function()
		local result = service.delete_scene()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_sync_job", function()
		local result = service.delete_sync_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_workspace", function()
		local result = service.delete_workspace()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with execute_query", function()
		local result = service.execute_query()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_component_type", function()
		local result = service.get_component_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_entity", function()
		local result = service.get_entity()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_metadata_transfer_job", function()
		local result = service.get_metadata_transfer_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_pricing_plan", function()
		local result = service.get_pricing_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_property_value", function()
		local result = service.get_property_value()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_property_value_history", function()
		local result = service.get_property_value_history()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_scene", function()
		local result = service.get_scene()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_sync_job", function()
		local result = service.get_sync_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_workspace", function()
		local result = service.get_workspace()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_component_types", function()
		local result = service.list_component_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_components", function()
		local result = service.list_components()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_entities", function()
		local result = service.list_entities()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_metadata_transfer_jobs", function()
		local result = service.list_metadata_transfer_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_properties", function()
		local result = service.list_properties()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_scenes", function()
		local result = service.list_scenes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sync_jobs", function()
		local result = service.list_sync_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sync_resources", function()
		local result = service.list_sync_resources()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_workspaces", function()
		local result = service.list_workspaces()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_component_type", function()
		local result = service.update_component_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_entity", function()
		local result = service.update_entity()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_pricing_plan", function()
		local result = service.update_pricing_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_scene", function()
		local result = service.update_scene()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_workspace", function()
		local result = service.update_workspace()
		assert.is_true(result.success)
	end)

end)
