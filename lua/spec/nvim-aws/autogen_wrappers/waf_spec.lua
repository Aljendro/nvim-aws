-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: waf

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.waf")

describe("AWS waf service testing", function()
	it("should generate a cli skeleton with create_byte_match_set", function()
		local result = service.create_byte_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_geo_match_set", function()
		local result = service.create_geo_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_ip_set", function()
		local result = service.create_ip_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_rate_based_rule", function()
		local result = service.create_rate_based_rule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_regex_match_set", function()
		local result = service.create_regex_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_regex_pattern_set", function()
		local result = service.create_regex_pattern_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_rule", function()
		local result = service.create_rule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_rule_group", function()
		local result = service.create_rule_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_size_constraint_set", function()
		local result = service.create_size_constraint_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_sql_injection_match_set", function()
		local result = service.create_sql_injection_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_web_acl", function()
		local result = service.create_web_acl()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_web_acl_migration_stack", function()
		local result = service.create_web_acl_migration_stack()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_xss_match_set", function()
		local result = service.create_xss_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_byte_match_set", function()
		local result = service.delete_byte_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_geo_match_set", function()
		local result = service.delete_geo_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_ip_set", function()
		local result = service.delete_ip_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_logging_configuration", function()
		local result = service.delete_logging_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_permission_policy", function()
		local result = service.delete_permission_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_rate_based_rule", function()
		local result = service.delete_rate_based_rule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_regex_match_set", function()
		local result = service.delete_regex_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_regex_pattern_set", function()
		local result = service.delete_regex_pattern_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_rule", function()
		local result = service.delete_rule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_rule_group", function()
		local result = service.delete_rule_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_size_constraint_set", function()
		local result = service.delete_size_constraint_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_sql_injection_match_set", function()
		local result = service.delete_sql_injection_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_web_acl", function()
		local result = service.delete_web_acl()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_xss_match_set", function()
		local result = service.delete_xss_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_byte_match_set", function()
		local result = service.get_byte_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_change_token", function()
		local result = service.get_change_token()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_change_token_status", function()
		local result = service.get_change_token_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_geo_match_set", function()
		local result = service.get_geo_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_ip_set", function()
		local result = service.get_ip_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_logging_configuration", function()
		local result = service.get_logging_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_permission_policy", function()
		local result = service.get_permission_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_rate_based_rule", function()
		local result = service.get_rate_based_rule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_rate_based_rule_managed_keys", function()
		local result = service.get_rate_based_rule_managed_keys()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_regex_match_set", function()
		local result = service.get_regex_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_regex_pattern_set", function()
		local result = service.get_regex_pattern_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_rule", function()
		local result = service.get_rule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_rule_group", function()
		local result = service.get_rule_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_sampled_requests", function()
		local result = service.get_sampled_requests()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_size_constraint_set", function()
		local result = service.get_size_constraint_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_sql_injection_match_set", function()
		local result = service.get_sql_injection_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_web_acl", function()
		local result = service.get_web_acl()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_xss_match_set", function()
		local result = service.get_xss_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_activated_rules_in_rule_group", function()
		local result = service.list_activated_rules_in_rule_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_byte_match_sets", function()
		local result = service.list_byte_match_sets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_geo_match_sets", function()
		local result = service.list_geo_match_sets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_ip_sets", function()
		local result = service.list_ip_sets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_logging_configurations", function()
		local result = service.list_logging_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_rate_based_rules", function()
		local result = service.list_rate_based_rules()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_regex_match_sets", function()
		local result = service.list_regex_match_sets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_regex_pattern_sets", function()
		local result = service.list_regex_pattern_sets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_rule_groups", function()
		local result = service.list_rule_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_rules", function()
		local result = service.list_rules()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_size_constraint_sets", function()
		local result = service.list_size_constraint_sets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sql_injection_match_sets", function()
		local result = service.list_sql_injection_match_sets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_subscribed_rule_groups", function()
		local result = service.list_subscribed_rule_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_web_ac_ls", function()
		local result = service.list_web_ac_ls()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_xss_match_sets", function()
		local result = service.list_xss_match_sets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_logging_configuration", function()
		local result = service.put_logging_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_permission_policy", function()
		local result = service.put_permission_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_byte_match_set", function()
		local result = service.update_byte_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_geo_match_set", function()
		local result = service.update_geo_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_ip_set", function()
		local result = service.update_ip_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_rate_based_rule", function()
		local result = service.update_rate_based_rule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_regex_match_set", function()
		local result = service.update_regex_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_regex_pattern_set", function()
		local result = service.update_regex_pattern_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_rule", function()
		local result = service.update_rule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_rule_group", function()
		local result = service.update_rule_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_size_constraint_set", function()
		local result = service.update_size_constraint_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_sql_injection_match_set", function()
		local result = service.update_sql_injection_match_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_web_acl", function()
		local result = service.update_web_acl()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_xss_match_set", function()
		local result = service.update_xss_match_set()
		assert.is_true(result.success)
	end)

end)