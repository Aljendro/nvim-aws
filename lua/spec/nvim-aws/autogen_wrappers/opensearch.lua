-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: opensearch

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS opensearch service testing", function()
	it("should generate a cli skeleton for accept-inbound-connection", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "accept-inbound-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-data-source", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "add-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-direct-query-data-source", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "add-direct-query-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-tags", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "add-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-package", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "associate-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-packages", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "associate-packages" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for authorize-vpc-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "authorize-vpc-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-domain-config-change", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "cancel-domain-config-change" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-service-software-update", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "cancel-service-software-update" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-application", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "create-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-domain", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "create-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-outbound-connection", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "create-outbound-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-package", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "create-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc-endpoint", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "create-vpc-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-application", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "delete-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-data-source", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "delete-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-direct-query-data-source", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "delete-direct-query-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-domain", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "delete-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-inbound-connection", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "delete-inbound-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-outbound-connection", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "delete-outbound-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-package", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "delete-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpc-endpoint", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "delete-vpc-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-domain", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-domain-auto-tunes", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-domain-auto-tunes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-domain-change-progress", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-domain-change-progress" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-domain-config", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-domain-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-domain-health", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-domain-health" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-domain-nodes", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-domain-nodes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-domains", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-domains" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-dry-run-progress", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-dry-run-progress" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-inbound-connections", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-inbound-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-type-limits", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-instance-type-limits" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-outbound-connections", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-outbound-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-packages", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-packages" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-reserved-instance-offerings", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-reserved-instance-offerings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-reserved-instances", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-reserved-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-endpoints", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "describe-vpc-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for dissociate-package", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "dissociate-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for dissociate-packages", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "dissociate-packages" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-application", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "get-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-compatible-versions", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "get-compatible-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-source", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "get-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-direct-query-data-source", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "get-direct-query-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-domain-maintenance-status", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "get-domain-maintenance-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-package-version-history", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "get-package-version-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-upgrade-history", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "get-upgrade-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-upgrade-status", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "get-upgrade-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-applications", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-applications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-data-sources", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-data-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-direct-query-data-sources", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-direct-query-data-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-domain-maintenances", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-domain-maintenances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-domain-names", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-domain-names" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-domains-for-package", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-domains-for-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-instance-type-details", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-instance-type-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-packages-for-domain", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-packages-for-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-scheduled-actions", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-scheduled-actions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-versions", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-vpc-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-vpc-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-vpc-endpoints", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-vpc-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-vpc-endpoints-for-domain", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "list-vpc-endpoints-for-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for purchase-reserved-instance-offering", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "purchase-reserved-instance-offering" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-inbound-connection", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "reject-inbound-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-tags", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "remove-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for revoke-vpc-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "revoke-vpc-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-domain-maintenance", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "start-domain-maintenance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-service-software-update", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "start-service-software-update" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-application", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "update-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-data-source", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "update-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-direct-query-data-source", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "update-direct-query-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-domain-config", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "update-domain-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-package", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "update-package" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-package-scope", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "update-package-scope" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-scheduled-action", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "update-scheduled-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-vpc-endpoint", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "update-vpc-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for upgrade-domain", function()
		local result = common.execute_aws_command_with_input({ "opensearch", "upgrade-domain" })
		assert.is_true(result.success)
	end)

end)