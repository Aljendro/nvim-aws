-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: lightsail

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS lightsail service testing", function()
	it("should generate a cli skeleton for allocate-static-ip", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "allocate-static-ip" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-certificate-to-distribution", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "attach-certificate-to-distribution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-disk", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "attach-disk" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-instances-to-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "attach-instances-to-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-load-balancer-tls-certificate", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "attach-load-balancer-tls-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-static-ip", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "attach-static-ip" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for close-instance-public-ports", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "close-instance-public-ports" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for copy-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "copy-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-bucket", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-bucket" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-bucket-access-key", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-bucket-access-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-certificate", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cloud-formation-stack", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-cloud-formation-stack" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-contact-method", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-contact-method" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-container-service", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-container-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-container-service-deployment", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-container-service-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-container-service-registry-login", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-container-service-registry-login" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-disk", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-disk" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-disk-from-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-disk-from-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-disk-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-disk-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-distribution", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-distribution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-domain", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-domain-entry", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-domain-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-gui-session-access-details", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-gui-session-access-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-instance-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-instance-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-instances", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-instances-from-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-instances-from-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-key-pair", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-key-pair" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-load-balancer-tls-certificate", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-load-balancer-tls-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-relational-database", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-relational-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-relational-database-from-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-relational-database-from-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-relational-database-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "create-relational-database-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-alarm", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-alarm" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-auto-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-auto-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-bucket" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-access-key", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-bucket-access-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-certificate", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-contact-method", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-contact-method" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-container-image", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-container-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-container-service", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-container-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-disk", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-disk" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-disk-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-disk-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-distribution", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-distribution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-domain", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-domain-entry", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-domain-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-instance", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-instance-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-instance-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-key-pair", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-key-pair" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-known-host-keys", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-known-host-keys" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-load-balancer-tls-certificate", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-load-balancer-tls-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-relational-database", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-relational-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-relational-database-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "delete-relational-database-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-certificate-from-distribution", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "detach-certificate-from-distribution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-disk", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "detach-disk" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-instances-from-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "detach-instances-from-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-static-ip", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "detach-static-ip" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-add-on", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "disable-add-on" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for download-default-key-pair", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "download-default-key-pair" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-add-on", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "enable-add-on" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for export-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "export-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-active-names", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-active-names" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-alarms", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-alarms" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-auto-snapshots", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-auto-snapshots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-blueprints", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-blueprints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-access-keys", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-bucket-access-keys" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-bundles", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-bucket-bundles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-metric-data", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-bucket-metric-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-buckets", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-buckets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bundles", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-bundles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-certificates", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cloud-formation-stack-records", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-cloud-formation-stack-records" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-contact-methods", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-contact-methods" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-container-api-metadata", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-container-api-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-container-images", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-container-images" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-container-log", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-container-log" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-container-service-deployments", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-container-service-deployments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-container-service-metric-data", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-container-service-metric-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-container-service-powers", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-container-service-powers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-container-services", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-container-services" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cost-estimate", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-cost-estimate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-disk", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-disk" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-disk-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-disk-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-disk-snapshots", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-disk-snapshots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-disks", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-disks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-distribution-bundles", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-distribution-bundles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-distribution-latest-cache-reset", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-distribution-latest-cache-reset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-distribution-metric-data", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-distribution-metric-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-distributions", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-distributions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-domain", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-domains", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-domains" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-export-snapshot-records", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-export-snapshot-records" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance-access-details", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-instance-access-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance-metric-data", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-instance-metric-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance-port-states", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-instance-port-states" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-instance-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance-snapshots", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-instance-snapshots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance-state", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-instance-state" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instances", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-key-pair", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-key-pair" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-key-pairs", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-key-pairs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-load-balancer-metric-data", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-load-balancer-metric-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-load-balancer-tls-certificates", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-load-balancer-tls-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-load-balancer-tls-policies", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-load-balancer-tls-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-load-balancers", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-load-balancers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-operation", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-operation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-operations", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-operations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-operations-for-resource", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-operations-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-regions", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-regions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-relational-database", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-relational-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-relational-database-blueprints", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-relational-database-blueprints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-relational-database-bundles", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-relational-database-bundles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-relational-database-events", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-relational-database-events" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-relational-database-log-events", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-relational-database-log-events" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-relational-database-log-streams", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-relational-database-log-streams" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-relational-database-master-user-password", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-relational-database-master-user-password" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-relational-database-metric-data", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-relational-database-metric-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-relational-database-parameters", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-relational-database-parameters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-relational-database-snapshot", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-relational-database-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-relational-database-snapshots", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-relational-database-snapshots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-relational-databases", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-relational-databases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-setup-history", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-setup-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-static-ip", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-static-ip" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-static-ips", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "get-static-ips" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-key-pair", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "import-key-pair" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for is-vpc-peered", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "is-vpc-peered" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for open-instance-public-ports", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "open-instance-public-ports" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for peer-vpc", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "peer-vpc" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-alarm", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "put-alarm" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-instance-public-ports", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "put-instance-public-ports" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reboot-instance", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "reboot-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reboot-relational-database", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "reboot-relational-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-container-image", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "register-container-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for release-static-ip", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "release-static-ip" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reset-distribution-cache", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "reset-distribution-cache" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for send-contact-method-verification", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "send-contact-method-verification" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-ip-address-type", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "set-ip-address-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-resource-access-for-bucket", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "set-resource-access-for-bucket" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for setup-instance-https", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "setup-instance-https" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-gui-session", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "start-gui-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-instance", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "start-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-relational-database", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "start-relational-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-gui-session", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "stop-gui-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-instance", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "stop-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-relational-database", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "stop-relational-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for test-alarm", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "test-alarm" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for unpeer-vpc", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "unpeer-vpc" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-bucket", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "update-bucket" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-bucket-bundle", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "update-bucket-bundle" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-container-service", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "update-container-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-distribution", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "update-distribution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-distribution-bundle", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "update-distribution-bundle" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-domain-entry", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "update-domain-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-instance-metadata-options", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "update-instance-metadata-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-load-balancer-attribute", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "update-load-balancer-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-relational-database", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "update-relational-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-relational-database-parameters", function()
		local result = common.execute_aws_command_with_input({ "lightsail", "update-relational-database-parameters" })
		assert.is_true(result.success)
	end)

end)