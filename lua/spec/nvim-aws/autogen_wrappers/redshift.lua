-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: redshift

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS redshift service testing", function()
	it("should generate a cli skeleton for accept-reserved-node-exchange", function()
		local result = common.execute_aws_command_with_input({ "redshift", "accept-reserved-node-exchange" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-partner", function()
		local result = common.execute_aws_command_with_input({ "redshift", "add-partner" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-data-share-consumer", function()
		local result = common.execute_aws_command_with_input({ "redshift", "associate-data-share-consumer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for authorize-cluster-security-group-ingress", function()
		local result = common.execute_aws_command_with_input({ "redshift", "authorize-cluster-security-group-ingress" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for authorize-data-share", function()
		local result = common.execute_aws_command_with_input({ "redshift", "authorize-data-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for authorize-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "redshift", "authorize-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for authorize-snapshot-access", function()
		local result = common.execute_aws_command_with_input({ "redshift", "authorize-snapshot-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-delete-cluster-snapshots", function()
		local result = common.execute_aws_command_with_input({ "redshift", "batch-delete-cluster-snapshots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-modify-cluster-snapshots", function()
		local result = common.execute_aws_command_with_input({ "redshift", "batch-modify-cluster-snapshots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-resize", function()
		local result = common.execute_aws_command_with_input({ "redshift", "cancel-resize" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for copy-cluster-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift", "copy-cluster-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-authentication-profile", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-authentication-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cluster", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cluster-parameter-group", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-cluster-parameter-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cluster-security-group", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-cluster-security-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cluster-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-cluster-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cluster-subnet-group", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-cluster-subnet-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-custom-domain-association", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-custom-domain-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-event-subscription", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-event-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-hsm-client-certificate", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-hsm-client-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-hsm-configuration", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-hsm-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-integration", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-integration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-redshift-idc-application", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-redshift-idc-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-scheduled-action", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-scheduled-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-snapshot-copy-grant", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-snapshot-copy-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-snapshot-schedule", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-snapshot-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-tags", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-usage-limit", function()
		local result = common.execute_aws_command_with_input({ "redshift", "create-usage-limit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deauthorize-data-share", function()
		local result = common.execute_aws_command_with_input({ "redshift", "deauthorize-data-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-authentication-profile", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-authentication-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cluster", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cluster-parameter-group", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-cluster-parameter-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cluster-security-group", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-cluster-security-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cluster-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-cluster-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cluster-subnet-group", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-cluster-subnet-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-custom-domain-association", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-custom-domain-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-event-subscription", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-event-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-hsm-client-certificate", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-hsm-client-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-hsm-configuration", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-hsm-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-integration", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-integration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-partner", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-partner" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-redshift-idc-application", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-redshift-idc-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-scheduled-action", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-scheduled-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-snapshot-copy-grant", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-snapshot-copy-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-snapshot-schedule", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-snapshot-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-tags", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-usage-limit", function()
		local result = common.execute_aws_command_with_input({ "redshift", "delete-usage-limit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-namespace", function()
		local result = common.execute_aws_command_with_input({ "redshift", "deregister-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-account-attributes", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-account-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-authentication-profiles", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-authentication-profiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cluster-db-revisions", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-cluster-db-revisions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cluster-parameter-groups", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-cluster-parameter-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cluster-parameters", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-cluster-parameters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cluster-security-groups", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-cluster-security-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cluster-snapshots", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-cluster-snapshots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cluster-subnet-groups", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-cluster-subnet-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cluster-tracks", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-cluster-tracks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cluster-versions", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-cluster-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-clusters", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-clusters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-custom-domain-associations", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-custom-domain-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-data-shares", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-data-shares" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-data-shares-for-consumer", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-data-shares-for-consumer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-data-shares-for-producer", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-data-shares-for-producer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-default-cluster-parameters", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-default-cluster-parameters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-endpoint-authorization", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-endpoint-authorization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-event-categories", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-event-categories" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-event-subscriptions", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-event-subscriptions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-events", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-events" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-hsm-client-certificates", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-hsm-client-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-hsm-configurations", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-hsm-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-inbound-integrations", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-inbound-integrations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-integrations", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-integrations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-logging-status", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-logging-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-node-configuration-options", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-node-configuration-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-orderable-cluster-options", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-orderable-cluster-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-partners", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-partners" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-redshift-idc-applications", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-redshift-idc-applications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-reserved-node-exchange-status", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-reserved-node-exchange-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-reserved-node-offerings", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-reserved-node-offerings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-reserved-nodes", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-reserved-nodes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-resize", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-resize" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-scheduled-actions", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-scheduled-actions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-snapshot-copy-grants", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-snapshot-copy-grants" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-snapshot-schedules", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-snapshot-schedules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-storage", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-storage" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-table-restore-status", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-table-restore-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-tags", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-usage-limits", function()
		local result = common.execute_aws_command_with_input({ "redshift", "describe-usage-limits" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-logging", function()
		local result = common.execute_aws_command_with_input({ "redshift", "disable-logging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-snapshot-copy", function()
		local result = common.execute_aws_command_with_input({ "redshift", "disable-snapshot-copy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-data-share-consumer", function()
		local result = common.execute_aws_command_with_input({ "redshift", "disassociate-data-share-consumer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-logging", function()
		local result = common.execute_aws_command_with_input({ "redshift", "enable-logging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-snapshot-copy", function()
		local result = common.execute_aws_command_with_input({ "redshift", "enable-snapshot-copy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for failover-primary-compute", function()
		local result = common.execute_aws_command_with_input({ "redshift", "failover-primary-compute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cluster-credentials", function()
		local result = common.execute_aws_command_with_input({ "redshift", "get-cluster-credentials" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cluster-credentials-with-iam", function()
		local result = common.execute_aws_command_with_input({ "redshift", "get-cluster-credentials-with-iam" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-reserved-node-exchange-configuration-options", function()
		local result = common.execute_aws_command_with_input({ "redshift", "get-reserved-node-exchange-configuration-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-reserved-node-exchange-offerings", function()
		local result = common.execute_aws_command_with_input({ "redshift", "get-reserved-node-exchange-offerings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "redshift", "get-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-recommendations", function()
		local result = common.execute_aws_command_with_input({ "redshift", "list-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-aqua-configuration", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-aqua-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-authentication-profile", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-authentication-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-cluster", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-cluster-db-revision", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-cluster-db-revision" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-cluster-iam-roles", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-cluster-iam-roles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-cluster-maintenance", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-cluster-maintenance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-cluster-parameter-group", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-cluster-parameter-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-cluster-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-cluster-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-cluster-snapshot-schedule", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-cluster-snapshot-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-cluster-subnet-group", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-cluster-subnet-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-custom-domain-association", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-custom-domain-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-event-subscription", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-event-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-integration", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-integration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-redshift-idc-application", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-redshift-idc-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-scheduled-action", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-scheduled-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-snapshot-copy-retention-period", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-snapshot-copy-retention-period" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-snapshot-schedule", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-snapshot-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-usage-limit", function()
		local result = common.execute_aws_command_with_input({ "redshift", "modify-usage-limit" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for pause-cluster", function()
		local result = common.execute_aws_command_with_input({ "redshift", "pause-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for purchase-reserved-node-offering", function()
		local result = common.execute_aws_command_with_input({ "redshift", "purchase-reserved-node-offering" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "redshift", "put-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reboot-cluster", function()
		local result = common.execute_aws_command_with_input({ "redshift", "reboot-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-namespace", function()
		local result = common.execute_aws_command_with_input({ "redshift", "register-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-data-share", function()
		local result = common.execute_aws_command_with_input({ "redshift", "reject-data-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reset-cluster-parameter-group", function()
		local result = common.execute_aws_command_with_input({ "redshift", "reset-cluster-parameter-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for resize-cluster", function()
		local result = common.execute_aws_command_with_input({ "redshift", "resize-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-from-cluster-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift", "restore-from-cluster-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-table-from-cluster-snapshot", function()
		local result = common.execute_aws_command_with_input({ "redshift", "restore-table-from-cluster-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for resume-cluster", function()
		local result = common.execute_aws_command_with_input({ "redshift", "resume-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for revoke-cluster-security-group-ingress", function()
		local result = common.execute_aws_command_with_input({ "redshift", "revoke-cluster-security-group-ingress" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for revoke-endpoint-access", function()
		local result = common.execute_aws_command_with_input({ "redshift", "revoke-endpoint-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for revoke-snapshot-access", function()
		local result = common.execute_aws_command_with_input({ "redshift", "revoke-snapshot-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for rotate-encryption-key", function()
		local result = common.execute_aws_command_with_input({ "redshift", "rotate-encryption-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-partner-status", function()
		local result = common.execute_aws_command_with_input({ "redshift", "update-partner-status" })
		assert.is_true(result.success)
	end)

end)