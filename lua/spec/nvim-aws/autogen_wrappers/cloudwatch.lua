-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: cloudwatch

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS cloudwatch service testing", function()
	it("should generate a cli skeleton for delete-alarms", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "delete-alarms" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-anomaly-detector", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "delete-anomaly-detector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-dashboards", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "delete-dashboards" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-insight-rules", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "delete-insight-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-metric-stream", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "delete-metric-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-alarm-history", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "describe-alarm-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-alarms", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "describe-alarms" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-alarms-for-metric", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "describe-alarms-for-metric" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-anomaly-detectors", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "describe-anomaly-detectors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-insight-rules", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "describe-insight-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-alarm-actions", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "disable-alarm-actions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-insight-rules", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "disable-insight-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-alarm-actions", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "enable-alarm-actions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-insight-rules", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "enable-insight-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-dashboard", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "get-dashboard" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-insight-rule-report", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "get-insight-rule-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-metric-data", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "get-metric-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-metric-statistics", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "get-metric-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-metric-stream", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "get-metric-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-metric-widget-image", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "get-metric-widget-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-dashboards", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "list-dashboards" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-managed-insight-rules", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "list-managed-insight-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-metric-streams", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "list-metric-streams" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-metrics", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "list-metrics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-anomaly-detector", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "put-anomaly-detector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-composite-alarm", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "put-composite-alarm" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-dashboard", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "put-dashboard" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-insight-rule", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "put-insight-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-managed-insight-rules", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "put-managed-insight-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-metric-alarm", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "put-metric-alarm" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-metric-data", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "put-metric-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-metric-stream", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "put-metric-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-alarm-state", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "set-alarm-state" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-metric-streams", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "start-metric-streams" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-metric-streams", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "stop-metric-streams" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "cloudwatch", "untag-resource" })
		assert.is_true(result.success)
	end)

end)