-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: managedblockchain

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.managedblockchain")

describe("AWS managedblockchain service testing", function()
	it("should generate a cli skeleton with create_accessor", function()
		local result = service.create_accessor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_member", function()
		local result = service.create_member()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_network", function()
		local result = service.create_network()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_node", function()
		local result = service.create_node()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_proposal", function()
		local result = service.create_proposal()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_accessor", function()
		local result = service.delete_accessor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_member", function()
		local result = service.delete_member()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_node", function()
		local result = service.delete_node()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_accessor", function()
		local result = service.get_accessor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_member", function()
		local result = service.get_member()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_network", function()
		local result = service.get_network()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_node", function()
		local result = service.get_node()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_proposal", function()
		local result = service.get_proposal()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_accessors", function()
		local result = service.list_accessors()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_invitations", function()
		local result = service.list_invitations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_members", function()
		local result = service.list_members()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_networks", function()
		local result = service.list_networks()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_nodes", function()
		local result = service.list_nodes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_proposal_votes", function()
		local result = service.list_proposal_votes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_proposals", function()
		local result = service.list_proposals()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reject_invitation", function()
		local result = service.reject_invitation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_member", function()
		local result = service.update_member()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_node", function()
		local result = service.update_node()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with vote_on_proposal", function()
		local result = service.vote_on_proposal()
		assert.is_true(result.success)
	end)

end)