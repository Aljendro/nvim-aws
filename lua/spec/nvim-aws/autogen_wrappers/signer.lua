-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: signer

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS signer service testing", function()
	it("should generate a cli skeleton for add-profile-permission", function()
		local result = common.execute_aws_command_with_input({ "signer", "add-profile-permission" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-signing-profile", function()
		local result = common.execute_aws_command_with_input({ "signer", "cancel-signing-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-signing-job", function()
		local result = common.execute_aws_command_with_input({ "signer", "describe-signing-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-revocation-status", function()
		local result = common.execute_aws_command_with_input({ "signer", "get-revocation-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-signing-platform", function()
		local result = common.execute_aws_command_with_input({ "signer", "get-signing-platform" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-signing-profile", function()
		local result = common.execute_aws_command_with_input({ "signer", "get-signing-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-profile-permissions", function()
		local result = common.execute_aws_command_with_input({ "signer", "list-profile-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-signing-jobs", function()
		local result = common.execute_aws_command_with_input({ "signer", "list-signing-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-signing-platforms", function()
		local result = common.execute_aws_command_with_input({ "signer", "list-signing-platforms" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-signing-profiles", function()
		local result = common.execute_aws_command_with_input({ "signer", "list-signing-profiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "signer", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-signing-profile", function()
		local result = common.execute_aws_command_with_input({ "signer", "put-signing-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-profile-permission", function()
		local result = common.execute_aws_command_with_input({ "signer", "remove-profile-permission" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for revoke-signature", function()
		local result = common.execute_aws_command_with_input({ "signer", "revoke-signature" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for revoke-signing-profile", function()
		local result = common.execute_aws_command_with_input({ "signer", "revoke-signing-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for sign-payload", function()
		local result = common.execute_aws_command_with_input({ "signer", "sign-payload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-signing-job", function()
		local result = common.execute_aws_command_with_input({ "signer", "start-signing-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "signer", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "signer", "untag-resource" })
		assert.is_true(result.success)
	end)

end)