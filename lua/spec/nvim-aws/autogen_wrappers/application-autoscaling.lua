-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: application-auto-scaling

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.application-autoscaling")

describe("AWS application-auto-scaling service testing", function()
	it("should generate a cli skeleton with delete_scaling_policy", function()
		local result = service.delete_scaling_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_scheduled_action", function()
		local result = service.delete_scheduled_action()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deregister_scalable_target", function()
		local result = service.deregister_scalable_target()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_scalable_targets", function()
		local result = service.describe_scalable_targets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_scaling_activities", function()
		local result = service.describe_scaling_activities()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_scaling_policies", function()
		local result = service.describe_scaling_policies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_scheduled_actions", function()
		local result = service.describe_scheduled_actions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_predictive_scaling_forecast", function()
		local result = service.get_predictive_scaling_forecast()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_scaling_policy", function()
		local result = service.put_scaling_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_scheduled_action", function()
		local result = service.put_scheduled_action()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with register_scalable_target", function()
		local result = service.register_scalable_target()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

end)