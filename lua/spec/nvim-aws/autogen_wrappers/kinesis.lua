-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: kinesis

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS kinesis service testing", function()
	it("should generate a cli skeleton for add-tags-to-stream", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "add-tags-to-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-stream", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "create-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for decrease-stream-retention-period", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "decrease-stream-retention-period" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "delete-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-stream", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "delete-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-stream-consumer", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "deregister-stream-consumer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-limits", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "describe-limits" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-stream", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "describe-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-stream-consumer", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "describe-stream-consumer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-stream-summary", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "describe-stream-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-enhanced-monitoring", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "disable-enhanced-monitoring" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-enhanced-monitoring", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "enable-enhanced-monitoring" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-records", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "get-records" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "get-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-shard-iterator", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "get-shard-iterator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for increase-stream-retention-period", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "increase-stream-retention-period" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-shards", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "list-shards" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-stream-consumers", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "list-stream-consumers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-streams", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "list-streams" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-stream", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "list-tags-for-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for merge-shards", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "merge-shards" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-record", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "put-record" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-records", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "put-records" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "put-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-stream-consumer", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "register-stream-consumer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-tags-from-stream", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "remove-tags-from-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for split-shard", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "split-shard" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-stream-encryption", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "start-stream-encryption" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-stream-encryption", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "stop-stream-encryption" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for subscribe-to-shard", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "subscribe-to-shard" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-shard-count", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "update-shard-count" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-stream-mode", function()
		local result = common.execute_aws_command_with_input({ "kinesis", "update-stream-mode" })
		assert.is_true(result.success)
	end)

end)