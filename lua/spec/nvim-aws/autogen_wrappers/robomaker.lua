-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: robomaker

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS robomaker service testing", function()
	it("should generate a cli skeleton for batch-delete-worlds", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "batch-delete-worlds" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-describe-simulation-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "batch-describe-simulation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-deployment-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "cancel-deployment-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-simulation-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "cancel-simulation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-simulation-job-batch", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "cancel-simulation-job-batch" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-world-export-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "cancel-world-export-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-world-generation-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "cancel-world-generation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-deployment-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "create-deployment-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-fleet", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "create-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-robot", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "create-robot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-robot-application", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "create-robot-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-robot-application-version", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "create-robot-application-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-simulation-application", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "create-simulation-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-simulation-application-version", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "create-simulation-application-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-simulation-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "create-simulation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-world-export-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "create-world-export-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-world-generation-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "create-world-generation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-world-template", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "create-world-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-fleet", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "delete-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-robot", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "delete-robot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-robot-application", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "delete-robot-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-simulation-application", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "delete-simulation-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-world-template", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "delete-world-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-robot", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "deregister-robot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-deployment-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "describe-deployment-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "describe-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-robot", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "describe-robot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-robot-application", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "describe-robot-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-simulation-application", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "describe-simulation-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-simulation-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "describe-simulation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-simulation-job-batch", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "describe-simulation-job-batch" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-world", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "describe-world" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-world-export-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "describe-world-export-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-world-generation-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "describe-world-generation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-world-template", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "describe-world-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-world-template-body", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "get-world-template-body" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-deployment-jobs", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "list-deployment-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-fleets", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "list-fleets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-robot-applications", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "list-robot-applications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-robots", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "list-robots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-simulation-applications", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "list-simulation-applications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-simulation-job-batches", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "list-simulation-job-batches" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-simulation-jobs", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "list-simulation-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-world-export-jobs", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "list-world-export-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-world-generation-jobs", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "list-world-generation-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-world-templates", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "list-world-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-worlds", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "list-worlds" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-robot", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "register-robot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restart-simulation-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "restart-simulation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-simulation-job-batch", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "start-simulation-job-batch" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for sync-deployment-job", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "sync-deployment-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-robot-application", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "update-robot-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-simulation-application", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "update-simulation-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-world-template", function()
		local result = common.execute_aws_command_with_input({ "robomaker", "update-world-template" })
		assert.is_true(result.success)
	end)

end)