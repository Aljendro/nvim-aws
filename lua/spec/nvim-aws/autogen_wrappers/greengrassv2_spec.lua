-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: greengrassv2

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.greengrassv2")

describe("AWS greengrassv2 service testing", function()
	it("should generate a cli skeleton with associate_service_role_to_account", function()
		local result = service.associate_service_role_to_account()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_associate_client_device_with_core_device", function()
		local result = service.batch_associate_client_device_with_core_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_disassociate_client_device_from_core_device", function()
		local result = service.batch_disassociate_client_device_from_core_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_deployment", function()
		local result = service.cancel_deployment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_component_version", function()
		local result = service.create_component_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_deployment", function()
		local result = service.create_deployment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_component", function()
		local result = service.delete_component()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_core_device", function()
		local result = service.delete_core_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_deployment", function()
		local result = service.delete_deployment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_component", function()
		local result = service.describe_component()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_service_role_from_account", function()
		local result = service.disassociate_service_role_from_account()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_component", function()
		local result = service.get_component()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_component_version_artifact", function()
		local result = service.get_component_version_artifact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_connectivity_info", function()
		local result = service.get_connectivity_info()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_core_device", function()
		local result = service.get_core_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_deployment", function()
		local result = service.get_deployment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_service_role_for_account", function()
		local result = service.get_service_role_for_account()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_client_devices_associated_with_core_device", function()
		local result = service.list_client_devices_associated_with_core_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_component_versions", function()
		local result = service.list_component_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_components", function()
		local result = service.list_components()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_core_devices", function()
		local result = service.list_core_devices()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_deployments", function()
		local result = service.list_deployments()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_effective_deployments", function()
		local result = service.list_effective_deployments()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_installed_components", function()
		local result = service.list_installed_components()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with resolve_component_candidates", function()
		local result = service.resolve_component_candidates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_connectivity_info", function()
		local result = service.update_connectivity_info()
		assert.is_true(result.success)
	end)

end)
