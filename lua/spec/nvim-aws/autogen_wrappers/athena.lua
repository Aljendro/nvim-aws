-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: athena

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.athena")

describe("AWS athena service testing", function()
	it("should generate a cli skeleton with batch_get_named_query", function()
		local result = service.batch_get_named_query()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_prepared_statement", function()
		local result = service.batch_get_prepared_statement()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_query_execution", function()
		local result = service.batch_get_query_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_capacity_reservation", function()
		local result = service.cancel_capacity_reservation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_capacity_reservation", function()
		local result = service.create_capacity_reservation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_data_catalog", function()
		local result = service.create_data_catalog()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_named_query", function()
		local result = service.create_named_query()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_notebook", function()
		local result = service.create_notebook()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_prepared_statement", function()
		local result = service.create_prepared_statement()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_presigned_notebook_url", function()
		local result = service.create_presigned_notebook_url()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_work_group", function()
		local result = service.create_work_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_capacity_reservation", function()
		local result = service.delete_capacity_reservation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_data_catalog", function()
		local result = service.delete_data_catalog()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_named_query", function()
		local result = service.delete_named_query()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_notebook", function()
		local result = service.delete_notebook()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_prepared_statement", function()
		local result = service.delete_prepared_statement()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_work_group", function()
		local result = service.delete_work_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with export_notebook", function()
		local result = service.export_notebook()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_calculation_execution", function()
		local result = service.get_calculation_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_calculation_execution_code", function()
		local result = service.get_calculation_execution_code()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_calculation_execution_status", function()
		local result = service.get_calculation_execution_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_capacity_assignment_configuration", function()
		local result = service.get_capacity_assignment_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_capacity_reservation", function()
		local result = service.get_capacity_reservation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_data_catalog", function()
		local result = service.get_data_catalog()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_database", function()
		local result = service.get_database()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_named_query", function()
		local result = service.get_named_query()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_notebook_metadata", function()
		local result = service.get_notebook_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_prepared_statement", function()
		local result = service.get_prepared_statement()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_query_execution", function()
		local result = service.get_query_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_query_results", function()
		local result = service.get_query_results()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_query_runtime_statistics", function()
		local result = service.get_query_runtime_statistics()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_session", function()
		local result = service.get_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_session_status", function()
		local result = service.get_session_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_table_metadata", function()
		local result = service.get_table_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_work_group", function()
		local result = service.get_work_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_notebook", function()
		local result = service.import_notebook()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_application_dpu_sizes", function()
		local result = service.list_application_dpu_sizes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_calculation_executions", function()
		local result = service.list_calculation_executions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_capacity_reservations", function()
		local result = service.list_capacity_reservations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_catalogs", function()
		local result = service.list_data_catalogs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_databases", function()
		local result = service.list_databases()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_engine_versions", function()
		local result = service.list_engine_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_executors", function()
		local result = service.list_executors()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_named_queries", function()
		local result = service.list_named_queries()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_notebook_metadata", function()
		local result = service.list_notebook_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_notebook_sessions", function()
		local result = service.list_notebook_sessions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_prepared_statements", function()
		local result = service.list_prepared_statements()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_query_executions", function()
		local result = service.list_query_executions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sessions", function()
		local result = service.list_sessions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_table_metadata", function()
		local result = service.list_table_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_work_groups", function()
		local result = service.list_work_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_capacity_assignment_configuration", function()
		local result = service.put_capacity_assignment_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_calculation_execution", function()
		local result = service.start_calculation_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_query_execution", function()
		local result = service.start_query_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_session", function()
		local result = service.start_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_calculation_execution", function()
		local result = service.stop_calculation_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_query_execution", function()
		local result = service.stop_query_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with terminate_session", function()
		local result = service.terminate_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_capacity_reservation", function()
		local result = service.update_capacity_reservation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_data_catalog", function()
		local result = service.update_data_catalog()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_named_query", function()
		local result = service.update_named_query()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_notebook", function()
		local result = service.update_notebook()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_notebook_metadata", function()
		local result = service.update_notebook_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_prepared_statement", function()
		local result = service.update_prepared_statement()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_work_group", function()
		local result = service.update_work_group()
		assert.is_true(result.success)
	end)

end)