-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: athena

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS athena service testing", function()
	it("should generate a cli skeleton for batch-get-named-query", function()
		local result = common.execute_aws_command_with_input({ "athena", "batch-get-named-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-prepared-statement", function()
		local result = common.execute_aws_command_with_input({ "athena", "batch-get-prepared-statement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-query-execution", function()
		local result = common.execute_aws_command_with_input({ "athena", "batch-get-query-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-capacity-reservation", function()
		local result = common.execute_aws_command_with_input({ "athena", "cancel-capacity-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-capacity-reservation", function()
		local result = common.execute_aws_command_with_input({ "athena", "create-capacity-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-data-catalog", function()
		local result = common.execute_aws_command_with_input({ "athena", "create-data-catalog" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-named-query", function()
		local result = common.execute_aws_command_with_input({ "athena", "create-named-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-notebook", function()
		local result = common.execute_aws_command_with_input({ "athena", "create-notebook" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-prepared-statement", function()
		local result = common.execute_aws_command_with_input({ "athena", "create-prepared-statement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-presigned-notebook-url", function()
		local result = common.execute_aws_command_with_input({ "athena", "create-presigned-notebook-url" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-work-group", function()
		local result = common.execute_aws_command_with_input({ "athena", "create-work-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-capacity-reservation", function()
		local result = common.execute_aws_command_with_input({ "athena", "delete-capacity-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-data-catalog", function()
		local result = common.execute_aws_command_with_input({ "athena", "delete-data-catalog" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-named-query", function()
		local result = common.execute_aws_command_with_input({ "athena", "delete-named-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-notebook", function()
		local result = common.execute_aws_command_with_input({ "athena", "delete-notebook" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-prepared-statement", function()
		local result = common.execute_aws_command_with_input({ "athena", "delete-prepared-statement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-work-group", function()
		local result = common.execute_aws_command_with_input({ "athena", "delete-work-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for export-notebook", function()
		local result = common.execute_aws_command_with_input({ "athena", "export-notebook" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-calculation-execution", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-calculation-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-calculation-execution-code", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-calculation-execution-code" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-calculation-execution-status", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-calculation-execution-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-capacity-assignment-configuration", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-capacity-assignment-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-capacity-reservation", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-capacity-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-catalog", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-data-catalog" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-database", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-named-query", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-named-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-notebook-metadata", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-notebook-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-prepared-statement", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-prepared-statement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-execution", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-query-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-results", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-query-results" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-runtime-statistics", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-query-runtime-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-session", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-session-status", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-session-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-table-metadata", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-table-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-work-group", function()
		local result = common.execute_aws_command_with_input({ "athena", "get-work-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-notebook", function()
		local result = common.execute_aws_command_with_input({ "athena", "import-notebook" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-application-dpu-sizes", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-application-dpu-sizes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-calculation-executions", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-calculation-executions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-capacity-reservations", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-capacity-reservations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-data-catalogs", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-data-catalogs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-databases", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-databases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-engine-versions", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-engine-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-executors", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-executors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-named-queries", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-named-queries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-notebook-metadata", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-notebook-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-notebook-sessions", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-notebook-sessions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-prepared-statements", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-prepared-statements" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-query-executions", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-query-executions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-sessions", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-sessions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-table-metadata", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-table-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-work-groups", function()
		local result = common.execute_aws_command_with_input({ "athena", "list-work-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-capacity-assignment-configuration", function()
		local result = common.execute_aws_command_with_input({ "athena", "put-capacity-assignment-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-calculation-execution", function()
		local result = common.execute_aws_command_with_input({ "athena", "start-calculation-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-query-execution", function()
		local result = common.execute_aws_command_with_input({ "athena", "start-query-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-session", function()
		local result = common.execute_aws_command_with_input({ "athena", "start-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-calculation-execution", function()
		local result = common.execute_aws_command_with_input({ "athena", "stop-calculation-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-query-execution", function()
		local result = common.execute_aws_command_with_input({ "athena", "stop-query-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "athena", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for terminate-session", function()
		local result = common.execute_aws_command_with_input({ "athena", "terminate-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "athena", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-capacity-reservation", function()
		local result = common.execute_aws_command_with_input({ "athena", "update-capacity-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-data-catalog", function()
		local result = common.execute_aws_command_with_input({ "athena", "update-data-catalog" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-named-query", function()
		local result = common.execute_aws_command_with_input({ "athena", "update-named-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-notebook", function()
		local result = common.execute_aws_command_with_input({ "athena", "update-notebook" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-notebook-metadata", function()
		local result = common.execute_aws_command_with_input({ "athena", "update-notebook-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-prepared-statement", function()
		local result = common.execute_aws_command_with_input({ "athena", "update-prepared-statement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-work-group", function()
		local result = common.execute_aws_command_with_input({ "athena", "update-work-group" })
		assert.is_true(result.success)
	end)

end)