-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: elastic-transcoder

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS elastic-transcoder service testing", function()
	it("should generate a cli skeleton for cancel-job", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "cancel-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-job", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "create-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-pipeline", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "create-pipeline" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-preset", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "create-preset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-pipeline", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "delete-pipeline" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-preset", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "delete-preset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-jobs-by-pipeline", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "list-jobs-by-pipeline" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-jobs-by-status", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "list-jobs-by-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-pipelines", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "list-pipelines" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-presets", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "list-presets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for read-job", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "read-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for read-pipeline", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "read-pipeline" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for read-preset", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "read-preset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for test-role", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "test-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-pipeline", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "update-pipeline" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-pipeline-notifications", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "update-pipeline-notifications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-pipeline-status", function()
		local result = common.execute_aws_command_with_input({ "elastictranscoder", "update-pipeline-status" })
		assert.is_true(result.success)
	end)

end)