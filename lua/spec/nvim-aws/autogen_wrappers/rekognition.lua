-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: rekognition

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS rekognition service testing", function()
	it("should generate a cli skeleton for associate-faces", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "associate-faces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for compare-faces", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "compare-faces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for copy-project-version", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "copy-project-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-collection", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "create-collection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-dataset", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "create-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-face-liveness-session", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "create-face-liveness-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-project", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "create-project" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-project-version", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "create-project-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-stream-processor", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "create-stream-processor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-user", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "create-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-collection", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "delete-collection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-dataset", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "delete-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-faces", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "delete-faces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-project", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "delete-project" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-project-policy", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "delete-project-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-project-version", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "delete-project-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-stream-processor", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "delete-stream-processor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-user", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "delete-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-collection", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "describe-collection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-dataset", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "describe-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-project-versions", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "describe-project-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-projects", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "describe-projects" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-stream-processor", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "describe-stream-processor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detect-custom-labels", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "detect-custom-labels" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detect-faces", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "detect-faces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detect-labels", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "detect-labels" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detect-moderation-labels", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "detect-moderation-labels" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detect-protective-equipment", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "detect-protective-equipment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detect-text", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "detect-text" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-faces", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "disassociate-faces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for distribute-dataset-entries", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "distribute-dataset-entries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-celebrity-info", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "get-celebrity-info" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-celebrity-recognition", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "get-celebrity-recognition" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-content-moderation", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "get-content-moderation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-face-detection", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "get-face-detection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-face-liveness-session-results", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "get-face-liveness-session-results" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-face-search", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "get-face-search" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-label-detection", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "get-label-detection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-media-analysis-job", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "get-media-analysis-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-person-tracking", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "get-person-tracking" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-segment-detection", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "get-segment-detection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-text-detection", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "get-text-detection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for index-faces", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "index-faces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-collections", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "list-collections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-dataset-entries", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "list-dataset-entries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-dataset-labels", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "list-dataset-labels" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-faces", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "list-faces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-media-analysis-jobs", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "list-media-analysis-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-project-policies", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "list-project-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-stream-processors", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "list-stream-processors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-users", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "list-users" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-project-policy", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "put-project-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for recognize-celebrities", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "recognize-celebrities" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-faces", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "search-faces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-faces-by-image", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "search-faces-by-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-users", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "search-users" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-users-by-image", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "search-users-by-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-celebrity-recognition", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "start-celebrity-recognition" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-content-moderation", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "start-content-moderation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-face-detection", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "start-face-detection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-face-search", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "start-face-search" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-label-detection", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "start-label-detection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-media-analysis-job", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "start-media-analysis-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-person-tracking", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "start-person-tracking" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-project-version", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "start-project-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-segment-detection", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "start-segment-detection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-stream-processor", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "start-stream-processor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-text-detection", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "start-text-detection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-project-version", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "stop-project-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-stream-processor", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "stop-stream-processor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-dataset-entries", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "update-dataset-entries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-stream-processor", function()
		local result = common.execute_aws_command_with_input({ "rekognition", "update-stream-processor" })
		assert.is_true(result.success)
	end)

end)