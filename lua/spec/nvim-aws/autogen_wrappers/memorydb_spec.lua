-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: memorydb

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.memorydb")

describe("AWS memorydb service testing", function()
	it("should generate a cli skeleton with batch_update_cluster", function()
		local result = service.batch_update_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with copy_snapshot", function()
		local result = service.copy_snapshot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_acl", function()
		local result = service.create_acl()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_cluster", function()
		local result = service.create_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_multi_region_cluster", function()
		local result = service.create_multi_region_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_parameter_group", function()
		local result = service.create_parameter_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_snapshot", function()
		local result = service.create_snapshot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_subnet_group", function()
		local result = service.create_subnet_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_user", function()
		local result = service.create_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_acl", function()
		local result = service.delete_acl()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_cluster", function()
		local result = service.delete_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_multi_region_cluster", function()
		local result = service.delete_multi_region_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_parameter_group", function()
		local result = service.delete_parameter_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_snapshot", function()
		local result = service.delete_snapshot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_subnet_group", function()
		local result = service.delete_subnet_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_user", function()
		local result = service.delete_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_ac_ls", function()
		local result = service.describe_ac_ls()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_clusters", function()
		local result = service.describe_clusters()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_engine_versions", function()
		local result = service.describe_engine_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_events", function()
		local result = service.describe_events()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_multi_region_clusters", function()
		local result = service.describe_multi_region_clusters()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_parameter_groups", function()
		local result = service.describe_parameter_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_parameters", function()
		local result = service.describe_parameters()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_reserved_nodes", function()
		local result = service.describe_reserved_nodes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_reserved_nodes_offerings", function()
		local result = service.describe_reserved_nodes_offerings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_service_updates", function()
		local result = service.describe_service_updates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_snapshots", function()
		local result = service.describe_snapshots()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_subnet_groups", function()
		local result = service.describe_subnet_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_users", function()
		local result = service.describe_users()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with failover_shard", function()
		local result = service.failover_shard()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_allowed_multi_region_cluster_updates", function()
		local result = service.list_allowed_multi_region_cluster_updates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_allowed_node_type_updates", function()
		local result = service.list_allowed_node_type_updates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags", function()
		local result = service.list_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with purchase_reserved_nodes_offering", function()
		local result = service.purchase_reserved_nodes_offering()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reset_parameter_group", function()
		local result = service.reset_parameter_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_acl", function()
		local result = service.update_acl()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_cluster", function()
		local result = service.update_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_multi_region_cluster", function()
		local result = service.update_multi_region_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_parameter_group", function()
		local result = service.update_parameter_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_subnet_group", function()
		local result = service.update_subnet_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user", function()
		local result = service.update_user()
		assert.is_true(result.success)
	end)

end)