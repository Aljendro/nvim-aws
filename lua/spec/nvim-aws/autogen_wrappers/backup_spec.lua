-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: backup

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.backup")

describe("AWS backup service testing", function()
	it("should generate a cli skeleton with cancel_legal_hold", function()
		local result = service.cancel_legal_hold()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_backup_plan", function()
		local result = service.create_backup_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_backup_selection", function()
		local result = service.create_backup_selection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_backup_vault", function()
		local result = service.create_backup_vault()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_framework", function()
		local result = service.create_framework()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_legal_hold", function()
		local result = service.create_legal_hold()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_logically_air_gapped_backup_vault", function()
		local result = service.create_logically_air_gapped_backup_vault()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_report_plan", function()
		local result = service.create_report_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_restore_testing_plan", function()
		local result = service.create_restore_testing_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_restore_testing_selection", function()
		local result = service.create_restore_testing_selection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_backup_plan", function()
		local result = service.delete_backup_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_backup_selection", function()
		local result = service.delete_backup_selection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_backup_vault", function()
		local result = service.delete_backup_vault()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_backup_vault_access_policy", function()
		local result = service.delete_backup_vault_access_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_backup_vault_lock_configuration", function()
		local result = service.delete_backup_vault_lock_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_backup_vault_notifications", function()
		local result = service.delete_backup_vault_notifications()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_framework", function()
		local result = service.delete_framework()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_recovery_point", function()
		local result = service.delete_recovery_point()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_report_plan", function()
		local result = service.delete_report_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_restore_testing_plan", function()
		local result = service.delete_restore_testing_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_restore_testing_selection", function()
		local result = service.delete_restore_testing_selection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_backup_job", function()
		local result = service.describe_backup_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_backup_vault", function()
		local result = service.describe_backup_vault()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_copy_job", function()
		local result = service.describe_copy_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_framework", function()
		local result = service.describe_framework()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_global_settings", function()
		local result = service.describe_global_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_protected_resource", function()
		local result = service.describe_protected_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_recovery_point", function()
		local result = service.describe_recovery_point()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_region_settings", function()
		local result = service.describe_region_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_report_job", function()
		local result = service.describe_report_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_report_plan", function()
		local result = service.describe_report_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_restore_job", function()
		local result = service.describe_restore_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_recovery_point", function()
		local result = service.disassociate_recovery_point()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_recovery_point_from_parent", function()
		local result = service.disassociate_recovery_point_from_parent()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with export_backup_plan_template", function()
		local result = service.export_backup_plan_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_backup_plan", function()
		local result = service.get_backup_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_backup_plan_from_json", function()
		local result = service.get_backup_plan_from_json()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_backup_plan_from_template", function()
		local result = service.get_backup_plan_from_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_backup_selection", function()
		local result = service.get_backup_selection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_backup_vault_access_policy", function()
		local result = service.get_backup_vault_access_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_backup_vault_notifications", function()
		local result = service.get_backup_vault_notifications()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_legal_hold", function()
		local result = service.get_legal_hold()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_recovery_point_index_details", function()
		local result = service.get_recovery_point_index_details()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_recovery_point_restore_metadata", function()
		local result = service.get_recovery_point_restore_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_restore_job_metadata", function()
		local result = service.get_restore_job_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_restore_testing_inferred_metadata", function()
		local result = service.get_restore_testing_inferred_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_restore_testing_plan", function()
		local result = service.get_restore_testing_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_restore_testing_selection", function()
		local result = service.get_restore_testing_selection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_supported_resource_types", function()
		local result = service.get_supported_resource_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_backup_job_summaries", function()
		local result = service.list_backup_job_summaries()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_backup_jobs", function()
		local result = service.list_backup_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_backup_plan_templates", function()
		local result = service.list_backup_plan_templates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_backup_plan_versions", function()
		local result = service.list_backup_plan_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_backup_plans", function()
		local result = service.list_backup_plans()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_backup_selections", function()
		local result = service.list_backup_selections()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_backup_vaults", function()
		local result = service.list_backup_vaults()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_copy_job_summaries", function()
		local result = service.list_copy_job_summaries()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_copy_jobs", function()
		local result = service.list_copy_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_frameworks", function()
		local result = service.list_frameworks()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_indexed_recovery_points", function()
		local result = service.list_indexed_recovery_points()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_legal_holds", function()
		local result = service.list_legal_holds()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_protected_resources", function()
		local result = service.list_protected_resources()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_protected_resources_by_backup_vault", function()
		local result = service.list_protected_resources_by_backup_vault()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_recovery_points_by_backup_vault", function()
		local result = service.list_recovery_points_by_backup_vault()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_recovery_points_by_legal_hold", function()
		local result = service.list_recovery_points_by_legal_hold()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_recovery_points_by_resource", function()
		local result = service.list_recovery_points_by_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_report_jobs", function()
		local result = service.list_report_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_report_plans", function()
		local result = service.list_report_plans()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_restore_job_summaries", function()
		local result = service.list_restore_job_summaries()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_restore_jobs", function()
		local result = service.list_restore_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_restore_jobs_by_protected_resource", function()
		local result = service.list_restore_jobs_by_protected_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_restore_testing_plans", function()
		local result = service.list_restore_testing_plans()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_restore_testing_selections", function()
		local result = service.list_restore_testing_selections()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags", function()
		local result = service.list_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_backup_vault_access_policy", function()
		local result = service.put_backup_vault_access_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_backup_vault_lock_configuration", function()
		local result = service.put_backup_vault_lock_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_backup_vault_notifications", function()
		local result = service.put_backup_vault_notifications()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_restore_validation_result", function()
		local result = service.put_restore_validation_result()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_backup_job", function()
		local result = service.start_backup_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_copy_job", function()
		local result = service.start_copy_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_report_job", function()
		local result = service.start_report_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_restore_job", function()
		local result = service.start_restore_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_backup_job", function()
		local result = service.stop_backup_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_backup_plan", function()
		local result = service.update_backup_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_framework", function()
		local result = service.update_framework()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_global_settings", function()
		local result = service.update_global_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_recovery_point_index_settings", function()
		local result = service.update_recovery_point_index_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_recovery_point_lifecycle", function()
		local result = service.update_recovery_point_lifecycle()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_region_settings", function()
		local result = service.update_region_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_report_plan", function()
		local result = service.update_report_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_restore_testing_plan", function()
		local result = service.update_restore_testing_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_restore_testing_selection", function()
		local result = service.update_restore_testing_selection()
		assert.is_true(result.success)
	end)

end)