-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: route53domains

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.route53domains")

describe("AWS route53domains service testing", function()
	it("should generate a cli skeleton with accept_domain_transfer_from_another_aws_account", function()
		local result = service.accept_domain_transfer_from_another_aws_account()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_delegation_signer_to_domain", function()
		local result = service.associate_delegation_signer_to_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_domain_transfer_to_another_aws_account", function()
		local result = service.cancel_domain_transfer_to_another_aws_account()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with check_domain_availability", function()
		local result = service.check_domain_availability()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with check_domain_transferability", function()
		local result = service.check_domain_transferability()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_domain", function()
		local result = service.delete_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_tags_for_domain", function()
		local result = service.delete_tags_for_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disable_domain_auto_renew", function()
		local result = service.disable_domain_auto_renew()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disable_domain_transfer_lock", function()
		local result = service.disable_domain_transfer_lock()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_delegation_signer_from_domain", function()
		local result = service.disassociate_delegation_signer_from_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_domain_auto_renew", function()
		local result = service.enable_domain_auto_renew()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_domain_transfer_lock", function()
		local result = service.enable_domain_transfer_lock()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_contact_reachability_status", function()
		local result = service.get_contact_reachability_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_domain_detail", function()
		local result = service.get_domain_detail()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_domain_suggestions", function()
		local result = service.get_domain_suggestions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_operation_detail", function()
		local result = service.get_operation_detail()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_domains", function()
		local result = service.list_domains()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_operations", function()
		local result = service.list_operations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_prices", function()
		local result = service.list_prices()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_domain", function()
		local result = service.list_tags_for_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with push_domain", function()
		local result = service.push_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with register_domain", function()
		local result = service.register_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reject_domain_transfer_from_another_aws_account", function()
		local result = service.reject_domain_transfer_from_another_aws_account()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with renew_domain", function()
		local result = service.renew_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with resend_contact_reachability_email", function()
		local result = service.resend_contact_reachability_email()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with resend_operation_authorization", function()
		local result = service.resend_operation_authorization()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with retrieve_domain_auth_code", function()
		local result = service.retrieve_domain_auth_code()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with transfer_domain", function()
		local result = service.transfer_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with transfer_domain_to_another_aws_account", function()
		local result = service.transfer_domain_to_another_aws_account()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_domain_contact", function()
		local result = service.update_domain_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_domain_contact_privacy", function()
		local result = service.update_domain_contact_privacy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_domain_nameservers", function()
		local result = service.update_domain_nameservers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_tags_for_domain", function()
		local result = service.update_tags_for_domain()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with view_billing", function()
		local result = service.view_billing()
		assert.is_true(result.success)
	end)

end)
