-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: tnb

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.tnb")

describe("AWS tnb service testing", function()
	it("should generate a cli skeleton with cancel_sol_network_operation", function()
		local result = service.cancel_sol_network_operation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_sol_function_package", function()
		local result = service.create_sol_function_package()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_sol_network_instance", function()
		local result = service.create_sol_network_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_sol_network_package", function()
		local result = service.create_sol_network_package()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_sol_function_package", function()
		local result = service.delete_sol_function_package()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_sol_network_instance", function()
		local result = service.delete_sol_network_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_sol_network_package", function()
		local result = service.delete_sol_network_package()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_sol_function_instance", function()
		local result = service.get_sol_function_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_sol_function_package", function()
		local result = service.get_sol_function_package()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_sol_network_instance", function()
		local result = service.get_sol_network_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_sol_network_operation", function()
		local result = service.get_sol_network_operation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_sol_network_package", function()
		local result = service.get_sol_network_package()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with instantiate_sol_network_instance", function()
		local result = service.instantiate_sol_network_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sol_function_instances", function()
		local result = service.list_sol_function_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sol_function_packages", function()
		local result = service.list_sol_function_packages()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sol_network_instances", function()
		local result = service.list_sol_network_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sol_network_operations", function()
		local result = service.list_sol_network_operations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sol_network_packages", function()
		local result = service.list_sol_network_packages()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_sol_function_package_content", function()
		local result = service.put_sol_function_package_content()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_sol_network_package_content", function()
		local result = service.put_sol_network_package_content()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with terminate_sol_network_instance", function()
		local result = service.terminate_sol_network_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_sol_function_package", function()
		local result = service.update_sol_function_package()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_sol_network_instance", function()
		local result = service.update_sol_network_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_sol_network_package", function()
		local result = service.update_sol_network_package()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with validate_sol_function_package_content", function()
		local result = service.validate_sol_function_package_content()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with validate_sol_network_package_content", function()
		local result = service.validate_sol_network_package_content()
		assert.is_true(result.success)
	end)

end)