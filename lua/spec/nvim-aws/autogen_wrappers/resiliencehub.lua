-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: resiliencehub

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS resiliencehub service testing", function()
	it("should generate a cli skeleton for accept-resource-grouping-recommendations", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "accept-resource-grouping-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-draft-app-version-resource-mappings", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "add-draft-app-version-resource-mappings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-update-recommendation-status", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "batch-update-recommendation-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-app", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "create-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-app-version-app-component", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "create-app-version-app-component" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-app-version-resource", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "create-app-version-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-recommendation-template", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "create-recommendation-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-resiliency-policy", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "create-resiliency-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-app", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "delete-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-app-assessment", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "delete-app-assessment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-app-input-source", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "delete-app-input-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-app-version-app-component", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "delete-app-version-app-component" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-app-version-resource", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "delete-app-version-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-recommendation-template", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "delete-recommendation-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resiliency-policy", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "delete-resiliency-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-app", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "describe-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-app-assessment", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "describe-app-assessment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-app-version", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "describe-app-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-app-version-app-component", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "describe-app-version-app-component" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-app-version-resource", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "describe-app-version-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-app-version-resources-resolution-status", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "describe-app-version-resources-resolution-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-app-version-template", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "describe-app-version-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-draft-app-version-resources-import-status", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "describe-draft-app-version-resources-import-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-metrics-export", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "describe-metrics-export" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-resiliency-policy", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "describe-resiliency-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-resource-grouping-recommendation-task", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "describe-resource-grouping-recommendation-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-resources-to-draft-app-version", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "import-resources-to-draft-app-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-alarm-recommendations", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-alarm-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-app-assessment-compliance-drifts", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-app-assessment-compliance-drifts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-app-assessment-resource-drifts", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-app-assessment-resource-drifts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-app-assessments", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-app-assessments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-app-component-compliances", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-app-component-compliances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-app-component-recommendations", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-app-component-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-app-input-sources", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-app-input-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-app-version-app-components", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-app-version-app-components" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-app-version-resource-mappings", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-app-version-resource-mappings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-app-version-resources", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-app-version-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-app-versions", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-app-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-apps", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-apps" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-metrics", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-metrics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-recommendation-templates", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-recommendation-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resiliency-policies", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-resiliency-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resource-grouping-recommendations", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-resource-grouping-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-sop-recommendations", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-sop-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-suggested-resiliency-policies", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-suggested-resiliency-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-test-recommendations", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-test-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-unsupported-app-version-resources", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "list-unsupported-app-version-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for publish-app-version", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "publish-app-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-draft-app-version-template", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "put-draft-app-version-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-resource-grouping-recommendations", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "reject-resource-grouping-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-draft-app-version-resource-mappings", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "remove-draft-app-version-resource-mappings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for resolve-app-version-resources", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "resolve-app-version-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-app-assessment", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "start-app-assessment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-metrics-export", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "start-metrics-export" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-resource-grouping-recommendation-task", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "start-resource-grouping-recommendation-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-app", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "update-app" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-app-version", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "update-app-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-app-version-app-component", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "update-app-version-app-component" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-app-version-resource", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "update-app-version-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-resiliency-policy", function()
		local result = common.execute_aws_command_with_input({ "resiliencehub", "update-resiliency-policy" })
		assert.is_true(result.success)
	end)

end)