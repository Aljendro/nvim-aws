-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: payment-cryptography

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS payment-cryptography service testing", function()
	it("should generate a cli skeleton for create-alias", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "create-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-key", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "create-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-alias", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "delete-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-key", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "delete-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for export-key", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "export-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-alias", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "get-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-key", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "get-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-parameters-for-export", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "get-parameters-for-export" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-parameters-for-import", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "get-parameters-for-import" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-public-key-certificate", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "get-public-key-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-key", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "import-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-aliases", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "list-aliases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-keys", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "list-keys" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-key", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "restore-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-key-usage", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "start-key-usage" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-key-usage", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "stop-key-usage" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-alias", function()
		local result = common.execute_aws_command_with_input({ "payment-cryptography", "update-alias" })
		assert.is_true(result.success)
	end)

end)