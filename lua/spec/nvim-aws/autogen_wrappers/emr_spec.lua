-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: emr

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.emr")

describe("AWS emr service testing", function()
	it("should generate a cli skeleton with add_instance_fleet", function()
		local result = service.add_instance_fleet()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with add_instance_groups", function()
		local result = service.add_instance_groups()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with add_steps", function()
		local result = service.add_steps()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with add_tags", function()
		local result = service.add_tags()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with cancel_steps", function()
		local result = service.cancel_steps()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_cluster", function()
		local result = service.create_cluster()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_default_roles", function()
		local result = service.create_default_roles()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_hbase_backup", function()
		local result = service.create_hbase_backup()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_security_configuration", function()
		local result = service.create_security_configuration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_studio", function()
		local result = service.create_studio()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_studio_session_mapping", function()
		local result = service.create_studio_session_mapping()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_security_configuration", function()
		local result = service.delete_security_configuration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_studio", function()
		local result = service.delete_studio()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_studio_session_mapping", function()
		local result = service.delete_studio_session_mapping()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_cluster", function()
		local result = service.describe_cluster()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_notebook_execution", function()
		local result = service.describe_notebook_execution()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_release_label", function()
		local result = service.describe_release_label()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_security_configuration", function()
		local result = service.describe_security_configuration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_step", function()
		local result = service.describe_step()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_studio", function()
		local result = service.describe_studio()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with disable_hbase_backups", function()
		local result = service.disable_hbase_backups()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get", function()
		local result = service.get()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_auto_termination_policy", function()
		local result = service.get_auto_termination_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_block_public_access_configuration", function()
		local result = service.get_block_public_access_configuration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_cluster_session_credentials", function()
		local result = service.get_cluster_session_credentials()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_managed_scaling_policy", function()
		local result = service.get_managed_scaling_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_studio_session_mapping", function()
		local result = service.get_studio_session_mapping()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with install_applications", function()
		local result = service.install_applications()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_clusters", function()
		local result = service.list_clusters()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_instance_fleets", function()
		local result = service.list_instance_fleets()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_instances", function()
		local result = service.list_instances()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_notebook_executions", function()
		local result = service.list_notebook_executions()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_release_labels", function()
		local result = service.list_release_labels()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_security_configurations", function()
		local result = service.list_security_configurations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_steps", function()
		local result = service.list_steps()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_studio_session_mappings", function()
		local result = service.list_studio_session_mappings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_studios", function()
		local result = service.list_studios()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_supported_instance_types", function()
		local result = service.list_supported_instance_types()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with modify_cluster", function()
		local result = service.modify_cluster()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with modify_cluster_attributes", function()
		local result = service.modify_cluster_attributes()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with modify_instance_fleet", function()
		local result = service.modify_instance_fleet()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with modify_instance_groups", function()
		local result = service.modify_instance_groups()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with put", function()
		local result = service.put()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with put_auto_scaling_policy", function()
		local result = service.put_auto_scaling_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with put_auto_termination_policy", function()
		local result = service.put_auto_termination_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with put_block_public_access_configuration", function()
		local result = service.put_block_public_access_configuration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with put_managed_scaling_policy", function()
		local result = service.put_managed_scaling_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with remove_auto_scaling_policy", function()
		local result = service.remove_auto_scaling_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with remove_auto_termination_policy", function()
		local result = service.remove_auto_termination_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with remove_managed_scaling_policy", function()
		local result = service.remove_managed_scaling_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with remove_tags", function()
		local result = service.remove_tags()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with restore_from_hbase_backup", function()
		local result = service.restore_from_hbase_backup()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with schedule_hbase_backup", function()
		local result = service.schedule_hbase_backup()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with socks", function()
		local result = service.socks()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with ssh", function()
		local result = service.ssh()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_notebook_execution", function()
		local result = service.start_notebook_execution()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with stop_notebook_execution", function()
		local result = service.stop_notebook_execution()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with terminate_clusters", function()
		local result = service.terminate_clusters()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_studio", function()
		local result = service.update_studio()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_studio_session_mapping", function()
		local result = service.update_studio_session_mapping()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with wait", function()
		local result = service.wait()
		assert.is_true(result.success)
	end)
end)