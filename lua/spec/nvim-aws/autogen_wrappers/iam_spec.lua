-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: iam

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.iam")

describe("AWS iam service testing", function()
	it("should generate a cli skeleton with add_client_id_to_open_id_connect_provider", function()
		local result = service.add_client_id_to_open_id_connect_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with add_role_to_instance_profile", function()
		local result = service.add_role_to_instance_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with add_user_to_group", function()
		local result = service.add_user_to_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with attach_group_policy", function()
		local result = service.attach_group_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with attach_role_policy", function()
		local result = service.attach_role_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with attach_user_policy", function()
		local result = service.attach_user_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with change_password", function()
		local result = service.change_password()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_access_key", function()
		local result = service.create_access_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_account_alias", function()
		local result = service.create_account_alias()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_group", function()
		local result = service.create_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_instance_profile", function()
		local result = service.create_instance_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_login_profile", function()
		local result = service.create_login_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_open_id_connect_provider", function()
		local result = service.create_open_id_connect_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_policy", function()
		local result = service.create_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_policy_version", function()
		local result = service.create_policy_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_role", function()
		local result = service.create_role()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_saml_provider", function()
		local result = service.create_saml_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_service_linked_role", function()
		local result = service.create_service_linked_role()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_service_specific_credential", function()
		local result = service.create_service_specific_credential()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_user", function()
		local result = service.create_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deactivate_mfa_device", function()
		local result = service.deactivate_mfa_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_access_key", function()
		local result = service.delete_access_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_account_alias", function()
		local result = service.delete_account_alias()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_account_password_policy", function()
		local result = service.delete_account_password_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_group", function()
		local result = service.delete_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_group_policy", function()
		local result = service.delete_group_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_instance_profile", function()
		local result = service.delete_instance_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_login_profile", function()
		local result = service.delete_login_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_open_id_connect_provider", function()
		local result = service.delete_open_id_connect_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_policy", function()
		local result = service.delete_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_policy_version", function()
		local result = service.delete_policy_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_role", function()
		local result = service.delete_role()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_role_permissions_boundary", function()
		local result = service.delete_role_permissions_boundary()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_role_policy", function()
		local result = service.delete_role_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_saml_provider", function()
		local result = service.delete_saml_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_server_certificate", function()
		local result = service.delete_server_certificate()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_service_linked_role", function()
		local result = service.delete_service_linked_role()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_service_specific_credential", function()
		local result = service.delete_service_specific_credential()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_signing_certificate", function()
		local result = service.delete_signing_certificate()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_ssh_public_key", function()
		local result = service.delete_ssh_public_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_user", function()
		local result = service.delete_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_user_permissions_boundary", function()
		local result = service.delete_user_permissions_boundary()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_user_policy", function()
		local result = service.delete_user_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_virtual_mfa_device", function()
		local result = service.delete_virtual_mfa_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with detach_group_policy", function()
		local result = service.detach_group_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with detach_role_policy", function()
		local result = service.detach_role_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with detach_user_policy", function()
		local result = service.detach_user_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disable_organizations_root_credentials_management", function()
		local result = service.disable_organizations_root_credentials_management()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disable_organizations_root_sessions", function()
		local result = service.disable_organizations_root_sessions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_mfa_device", function()
		local result = service.enable_mfa_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_organizations_root_credentials_management", function()
		local result = service.enable_organizations_root_credentials_management()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_organizations_root_sessions", function()
		local result = service.enable_organizations_root_sessions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_credential_report", function()
		local result = service.generate_credential_report()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_organizations_access_report", function()
		local result = service.generate_organizations_access_report()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_service_last_accessed_details", function()
		local result = service.generate_service_last_accessed_details()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_access_key_last_used", function()
		local result = service.get_access_key_last_used()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_account_authorization_details", function()
		local result = service.get_account_authorization_details()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_account_password_policy", function()
		local result = service.get_account_password_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_account_summary", function()
		local result = service.get_account_summary()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_context_keys_for_custom_policy", function()
		local result = service.get_context_keys_for_custom_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_context_keys_for_principal_policy", function()
		local result = service.get_context_keys_for_principal_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_credential_report", function()
		local result = service.get_credential_report()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_group", function()
		local result = service.get_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_group_policy", function()
		local result = service.get_group_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_instance_profile", function()
		local result = service.get_instance_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_login_profile", function()
		local result = service.get_login_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_mfa_device", function()
		local result = service.get_mfa_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_open_id_connect_provider", function()
		local result = service.get_open_id_connect_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_organizations_access_report", function()
		local result = service.get_organizations_access_report()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_policy", function()
		local result = service.get_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_policy_version", function()
		local result = service.get_policy_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_role", function()
		local result = service.get_role()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_role_policy", function()
		local result = service.get_role_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_saml_provider", function()
		local result = service.get_saml_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_server_certificate", function()
		local result = service.get_server_certificate()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_service_last_accessed_details", function()
		local result = service.get_service_last_accessed_details()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_service_last_accessed_details_with_entities", function()
		local result = service.get_service_last_accessed_details_with_entities()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_service_linked_role_deletion_status", function()
		local result = service.get_service_linked_role_deletion_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_ssh_public_key", function()
		local result = service.get_ssh_public_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_user", function()
		local result = service.get_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_user_policy", function()
		local result = service.get_user_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_access_keys", function()
		local result = service.list_access_keys()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_account_aliases", function()
		local result = service.list_account_aliases()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_attached_group_policies", function()
		local result = service.list_attached_group_policies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_attached_role_policies", function()
		local result = service.list_attached_role_policies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_attached_user_policies", function()
		local result = service.list_attached_user_policies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_entities_for_policy", function()
		local result = service.list_entities_for_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_group_policies", function()
		local result = service.list_group_policies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_groups", function()
		local result = service.list_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_groups_for_user", function()
		local result = service.list_groups_for_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_instance_profile_tags", function()
		local result = service.list_instance_profile_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_instance_profiles", function()
		local result = service.list_instance_profiles()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_instance_profiles_for_role", function()
		local result = service.list_instance_profiles_for_role()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_mfa_device_tags", function()
		local result = service.list_mfa_device_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_mfa_devices", function()
		local result = service.list_mfa_devices()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_open_id_connect_provider_tags", function()
		local result = service.list_open_id_connect_provider_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_open_id_connect_providers", function()
		local result = service.list_open_id_connect_providers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_organizations_features", function()
		local result = service.list_organizations_features()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_policies", function()
		local result = service.list_policies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_policies_granting_service_access", function()
		local result = service.list_policies_granting_service_access()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_policy_tags", function()
		local result = service.list_policy_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_policy_versions", function()
		local result = service.list_policy_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_role_policies", function()
		local result = service.list_role_policies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_role_tags", function()
		local result = service.list_role_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_roles", function()
		local result = service.list_roles()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_saml_provider_tags", function()
		local result = service.list_saml_provider_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_saml_providers", function()
		local result = service.list_saml_providers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_server_certificate_tags", function()
		local result = service.list_server_certificate_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_server_certificates", function()
		local result = service.list_server_certificates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_service_specific_credentials", function()
		local result = service.list_service_specific_credentials()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_signing_certificates", function()
		local result = service.list_signing_certificates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_ssh_public_keys", function()
		local result = service.list_ssh_public_keys()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_user_policies", function()
		local result = service.list_user_policies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_user_tags", function()
		local result = service.list_user_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_users", function()
		local result = service.list_users()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_virtual_mfa_devices", function()
		local result = service.list_virtual_mfa_devices()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_group_policy", function()
		local result = service.put_group_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_role_permissions_boundary", function()
		local result = service.put_role_permissions_boundary()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_role_policy", function()
		local result = service.put_role_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_user_permissions_boundary", function()
		local result = service.put_user_permissions_boundary()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_user_policy", function()
		local result = service.put_user_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with remove_client_id_from_open_id_connect_provider", function()
		local result = service.remove_client_id_from_open_id_connect_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with remove_role_from_instance_profile", function()
		local result = service.remove_role_from_instance_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with remove_user_from_group", function()
		local result = service.remove_user_from_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reset_service_specific_credential", function()
		local result = service.reset_service_specific_credential()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with resync_mfa_device", function()
		local result = service.resync_mfa_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with set_default_policy_version", function()
		local result = service.set_default_policy_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with set_security_token_service_preferences", function()
		local result = service.set_security_token_service_preferences()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with simulate_custom_policy", function()
		local result = service.simulate_custom_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with simulate_principal_policy", function()
		local result = service.simulate_principal_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_instance_profile", function()
		local result = service.tag_instance_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_mfa_device", function()
		local result = service.tag_mfa_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_open_id_connect_provider", function()
		local result = service.tag_open_id_connect_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_policy", function()
		local result = service.tag_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_role", function()
		local result = service.tag_role()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_saml_provider", function()
		local result = service.tag_saml_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_server_certificate", function()
		local result = service.tag_server_certificate()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_user", function()
		local result = service.tag_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_instance_profile", function()
		local result = service.untag_instance_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_mfa_device", function()
		local result = service.untag_mfa_device()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_open_id_connect_provider", function()
		local result = service.untag_open_id_connect_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_policy", function()
		local result = service.untag_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_role", function()
		local result = service.untag_role()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_saml_provider", function()
		local result = service.untag_saml_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_server_certificate", function()
		local result = service.untag_server_certificate()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_user", function()
		local result = service.untag_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_access_key", function()
		local result = service.update_access_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_account_password_policy", function()
		local result = service.update_account_password_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_assume_role_policy", function()
		local result = service.update_assume_role_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_group", function()
		local result = service.update_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_login_profile", function()
		local result = service.update_login_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_open_id_connect_provider_thumbprint", function()
		local result = service.update_open_id_connect_provider_thumbprint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_role", function()
		local result = service.update_role()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_role_description", function()
		local result = service.update_role_description()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_saml_provider", function()
		local result = service.update_saml_provider()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_server_certificate", function()
		local result = service.update_server_certificate()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_service_specific_credential", function()
		local result = service.update_service_specific_credential()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_signing_certificate", function()
		local result = service.update_signing_certificate()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_ssh_public_key", function()
		local result = service.update_ssh_public_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user", function()
		local result = service.update_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with upload_server_certificate", function()
		local result = service.upload_server_certificate()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with upload_signing_certificate", function()
		local result = service.upload_signing_certificate()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with upload_ssh_public_key", function()
		local result = service.upload_ssh_public_key()
		assert.is_true(result.success)
	end)

end)