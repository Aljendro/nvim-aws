-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: secrets-manager

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS secrets-manager service testing", function()
	it("should generate a cli skeleton for batch-get-secret-value", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "batch-get-secret-value" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-rotate-secret", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "cancel-rotate-secret" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-secret", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "create-secret" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "delete-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-secret", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "delete-secret" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-secret", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "describe-secret" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-random-password", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "get-random-password" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "get-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-secret-value", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "get-secret-value" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-secret-version-ids", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "list-secret-version-ids" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-secrets", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "list-secrets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "put-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-secret-value", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "put-secret-value" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-regions-from-replication", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "remove-regions-from-replication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for replicate-secret-to-regions", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "replicate-secret-to-regions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-secret", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "restore-secret" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for rotate-secret", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "rotate-secret" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-replication-to-replica", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "stop-replication-to-replica" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-secret", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "update-secret" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-secret-version-stage", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "update-secret-version-stage" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for validate-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "secretsmanager", "validate-resource-policy" })
		assert.is_true(result.success)
	end)

end)