-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: sms

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.sms")

describe("AWS sms service testing", function()
	it("should generate a cli skeleton with create_app", function()
		local result = service.create_app()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_replication_job", function()
		local result = service.create_replication_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_app", function()
		local result = service.delete_app()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_app_launch_configuration", function()
		local result = service.delete_app_launch_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_app_replication_configuration", function()
		local result = service.delete_app_replication_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_app_validation_configuration", function()
		local result = service.delete_app_validation_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_replication_job", function()
		local result = service.delete_replication_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_server_catalog", function()
		local result = service.delete_server_catalog()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_connector", function()
		local result = service.disassociate_connector()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_change_set", function()
		local result = service.generate_change_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_template", function()
		local result = service.generate_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_app", function()
		local result = service.get_app()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_app_launch_configuration", function()
		local result = service.get_app_launch_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_app_replication_configuration", function()
		local result = service.get_app_replication_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_app_validation_configuration", function()
		local result = service.get_app_validation_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_app_validation_output", function()
		local result = service.get_app_validation_output()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_connectors", function()
		local result = service.get_connectors()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_replication_jobs", function()
		local result = service.get_replication_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_replication_runs", function()
		local result = service.get_replication_runs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_servers", function()
		local result = service.get_servers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_app_catalog", function()
		local result = service.import_app_catalog()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_server_catalog", function()
		local result = service.import_server_catalog()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with launch_app", function()
		local result = service.launch_app()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_apps", function()
		local result = service.list_apps()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with notify_app_validation_output", function()
		local result = service.notify_app_validation_output()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_app_launch_configuration", function()
		local result = service.put_app_launch_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_app_replication_configuration", function()
		local result = service.put_app_replication_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_app_validation_configuration", function()
		local result = service.put_app_validation_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_app_replication", function()
		local result = service.start_app_replication()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_on_demand_app_replication", function()
		local result = service.start_on_demand_app_replication()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_on_demand_replication_run", function()
		local result = service.start_on_demand_replication_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_app_replication", function()
		local result = service.stop_app_replication()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with terminate_app", function()
		local result = service.terminate_app()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_app", function()
		local result = service.update_app()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_replication_job", function()
		local result = service.update_replication_job()
		assert.is_true(result.success)
	end)

end)