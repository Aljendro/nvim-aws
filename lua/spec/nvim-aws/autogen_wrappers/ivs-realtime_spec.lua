-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: ivs-realtime

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.ivs-realtime")

describe("AWS ivs-realtime service testing", function()
	it("should generate a cli skeleton with create_encoder_configuration", function()
		local result = service.create_encoder_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_ingest_configuration", function()
		local result = service.create_ingest_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_participant_token", function()
		local result = service.create_participant_token()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_stage", function()
		local result = service.create_stage()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_storage_configuration", function()
		local result = service.create_storage_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_encoder_configuration", function()
		local result = service.delete_encoder_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_ingest_configuration", function()
		local result = service.delete_ingest_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_public_key", function()
		local result = service.delete_public_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_stage", function()
		local result = service.delete_stage()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_storage_configuration", function()
		local result = service.delete_storage_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disconnect_participant", function()
		local result = service.disconnect_participant()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_composition", function()
		local result = service.get_composition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_encoder_configuration", function()
		local result = service.get_encoder_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_ingest_configuration", function()
		local result = service.get_ingest_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_participant", function()
		local result = service.get_participant()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_public_key", function()
		local result = service.get_public_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_stage", function()
		local result = service.get_stage()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_stage_session", function()
		local result = service.get_stage_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_storage_configuration", function()
		local result = service.get_storage_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_public_key", function()
		local result = service.import_public_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_compositions", function()
		local result = service.list_compositions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_encoder_configurations", function()
		local result = service.list_encoder_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_ingest_configurations", function()
		local result = service.list_ingest_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_participant_events", function()
		local result = service.list_participant_events()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_participants", function()
		local result = service.list_participants()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_public_keys", function()
		local result = service.list_public_keys()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_stage_sessions", function()
		local result = service.list_stage_sessions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_stages", function()
		local result = service.list_stages()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_storage_configurations", function()
		local result = service.list_storage_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_composition", function()
		local result = service.start_composition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_composition", function()
		local result = service.stop_composition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_ingest_configuration", function()
		local result = service.update_ingest_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_stage", function()
		local result = service.update_stage()
		assert.is_true(result.success)
	end)

end)