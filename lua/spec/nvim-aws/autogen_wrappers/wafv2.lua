-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: wafv2

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS wafv2 service testing", function()
	it("should generate a cli skeleton for associate-web-acl", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "associate-web-acl" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for check-capacity", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "check-capacity" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-api-key", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "create-api-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-ip-set", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "create-ip-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-regex-pattern-set", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "create-regex-pattern-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-rule-group", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "create-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-web-acl", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "create-web-acl" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-api-key", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "delete-api-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-firewall-manager-rule-groups", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "delete-firewall-manager-rule-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ip-set", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "delete-ip-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-logging-configuration", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "delete-logging-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-permission-policy", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "delete-permission-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-regex-pattern-set", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "delete-regex-pattern-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-rule-group", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "delete-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-web-acl", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "delete-web-acl" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-all-managed-products", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "describe-all-managed-products" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-managed-products-by-vendor", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "describe-managed-products-by-vendor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-managed-rule-group", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "describe-managed-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-web-acl", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "disassociate-web-acl" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-mobile-sdk-release-url", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "generate-mobile-sdk-release-url" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-decrypted-api-key", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "get-decrypted-api-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ip-set", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "get-ip-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-logging-configuration", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "get-logging-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-managed-rule-set", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "get-managed-rule-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-mobile-sdk-release", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "get-mobile-sdk-release" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-permission-policy", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "get-permission-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-rate-based-statement-managed-keys", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "get-rate-based-statement-managed-keys" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-regex-pattern-set", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "get-regex-pattern-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-rule-group", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "get-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-sampled-requests", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "get-sampled-requests" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-web-acl", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "get-web-acl" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-web-acl-for-resource", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "get-web-acl-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-api-keys", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "list-api-keys" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-available-managed-rule-group-versions", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "list-available-managed-rule-group-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-available-managed-rule-groups", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "list-available-managed-rule-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-ip-sets", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "list-ip-sets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-logging-configurations", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "list-logging-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-managed-rule-sets", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "list-managed-rule-sets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-mobile-sdk-releases", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "list-mobile-sdk-releases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-regex-pattern-sets", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "list-regex-pattern-sets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resources-for-web-acl", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "list-resources-for-web-acl" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-rule-groups", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "list-rule-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-web-ac-ls", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "list-web-ac-ls" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-logging-configuration", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "put-logging-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-managed-rule-set-versions", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "put-managed-rule-set-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-permission-policy", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "put-permission-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-ip-set", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "update-ip-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-managed-rule-set-version-expiry-date", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "update-managed-rule-set-version-expiry-date" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-regex-pattern-set", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "update-regex-pattern-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-rule-group", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "update-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-web-acl", function()
		local result = common.execute_aws_command_with_input({ "wafv2", "update-web-acl" })
		assert.is_true(result.success)
	end)

end)