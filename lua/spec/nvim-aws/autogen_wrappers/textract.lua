-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: textract

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS textract service testing", function()
	it("should generate a cli skeleton for analyze-document", function()
		local result = common.execute_aws_command_with_input({ "textract", "analyze-document" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for analyze-expense", function()
		local result = common.execute_aws_command_with_input({ "textract", "analyze-expense" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for analyze-id", function()
		local result = common.execute_aws_command_with_input({ "textract", "analyze-id" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-adapter", function()
		local result = common.execute_aws_command_with_input({ "textract", "create-adapter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-adapter-version", function()
		local result = common.execute_aws_command_with_input({ "textract", "create-adapter-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-adapter", function()
		local result = common.execute_aws_command_with_input({ "textract", "delete-adapter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-adapter-version", function()
		local result = common.execute_aws_command_with_input({ "textract", "delete-adapter-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detect-document-text", function()
		local result = common.execute_aws_command_with_input({ "textract", "detect-document-text" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-adapter", function()
		local result = common.execute_aws_command_with_input({ "textract", "get-adapter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-adapter-version", function()
		local result = common.execute_aws_command_with_input({ "textract", "get-adapter-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-document-analysis", function()
		local result = common.execute_aws_command_with_input({ "textract", "get-document-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-document-text-detection", function()
		local result = common.execute_aws_command_with_input({ "textract", "get-document-text-detection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-expense-analysis", function()
		local result = common.execute_aws_command_with_input({ "textract", "get-expense-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-lending-analysis", function()
		local result = common.execute_aws_command_with_input({ "textract", "get-lending-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-lending-analysis-summary", function()
		local result = common.execute_aws_command_with_input({ "textract", "get-lending-analysis-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-adapter-versions", function()
		local result = common.execute_aws_command_with_input({ "textract", "list-adapter-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-adapters", function()
		local result = common.execute_aws_command_with_input({ "textract", "list-adapters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "textract", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-document-analysis", function()
		local result = common.execute_aws_command_with_input({ "textract", "start-document-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-document-text-detection", function()
		local result = common.execute_aws_command_with_input({ "textract", "start-document-text-detection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-expense-analysis", function()
		local result = common.execute_aws_command_with_input({ "textract", "start-expense-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-lending-analysis", function()
		local result = common.execute_aws_command_with_input({ "textract", "start-lending-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "textract", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "textract", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-adapter", function()
		local result = common.execute_aws_command_with_input({ "textract", "update-adapter" })
		assert.is_true(result.success)
	end)

end)