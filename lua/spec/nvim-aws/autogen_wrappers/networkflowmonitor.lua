-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: networkflowmonitor

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS networkflowmonitor service testing", function()
	it("should generate a cli skeleton for create-monitor", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "create-monitor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-scope", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "create-scope" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-monitor", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "delete-monitor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-scope", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "delete-scope" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-monitor", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "get-monitor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-results-monitor-top-contributors", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "get-query-results-monitor-top-contributors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-results-workload-insights-top-contributors", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "get-query-results-workload-insights-top-contributors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-results-workload-insights-top-contributors-data", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "get-query-results-workload-insights-top-contributors-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-status-monitor-top-contributors", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "get-query-status-monitor-top-contributors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-status-workload-insights-top-contributors", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "get-query-status-workload-insights-top-contributors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-status-workload-insights-top-contributors-data", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "get-query-status-workload-insights-top-contributors-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-scope", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "get-scope" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-monitors", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "list-monitors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-scopes", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "list-scopes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-query-monitor-top-contributors", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "start-query-monitor-top-contributors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-query-workload-insights-top-contributors", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "start-query-workload-insights-top-contributors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-query-workload-insights-top-contributors-data", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "start-query-workload-insights-top-contributors-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-query-monitor-top-contributors", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "stop-query-monitor-top-contributors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-query-workload-insights-top-contributors", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "stop-query-workload-insights-top-contributors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-query-workload-insights-top-contributors-data", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "stop-query-workload-insights-top-contributors-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-monitor", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "update-monitor" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-scope", function()
		local result = common.execute_aws_command_with_input({ "networkflowmonitor", "update-scope" })
		assert.is_true(result.success)
	end)

end)