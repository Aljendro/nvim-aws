-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: pipes

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS pipes service testing", function()
	it("should generate a cli skeleton for create-pipe", function()
		local result = common.execute_aws_command_with_input({ "pipes", "create-pipe" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-pipe", function()
		local result = common.execute_aws_command_with_input({ "pipes", "delete-pipe" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-pipe", function()
		local result = common.execute_aws_command_with_input({ "pipes", "describe-pipe" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-pipes", function()
		local result = common.execute_aws_command_with_input({ "pipes", "list-pipes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "pipes", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-pipe", function()
		local result = common.execute_aws_command_with_input({ "pipes", "start-pipe" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-pipe", function()
		local result = common.execute_aws_command_with_input({ "pipes", "stop-pipe" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "pipes", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "pipes", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-pipe", function()
		local result = common.execute_aws_command_with_input({ "pipes", "update-pipe" })
		assert.is_true(result.success)
	end)

end)