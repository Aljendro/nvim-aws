-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: deadline

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.deadline")

describe("AWS deadline service testing", function()
	it("should generate a cli skeleton with associate_member_to_farm", function()
		local result = service.associate_member_to_farm()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_farm", function()
		local result = service.create_farm()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_license_endpoint", function()
		local result = service.create_license_endpoint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_limit", function()
		local result = service.create_limit()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_monitor", function()
		local result = service.create_monitor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_queue_fleet_association", function()
		local result = service.create_queue_fleet_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_queue_limit_association", function()
		local result = service.create_queue_limit_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_storage_profile", function()
		local result = service.create_storage_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_farm", function()
		local result = service.delete_farm()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_license_endpoint", function()
		local result = service.delete_license_endpoint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_limit", function()
		local result = service.delete_limit()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_monitor", function()
		local result = service.delete_monitor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_queue_fleet_association", function()
		local result = service.delete_queue_fleet_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_queue_limit_association", function()
		local result = service.delete_queue_limit_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_storage_profile", function()
		local result = service.delete_storage_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_member_from_farm", function()
		local result = service.disassociate_member_from_farm()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_farm", function()
		local result = service.get_farm()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_license_endpoint", function()
		local result = service.get_license_endpoint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_limit", function()
		local result = service.get_limit()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_monitor", function()
		local result = service.get_monitor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_queue_fleet_association", function()
		local result = service.get_queue_fleet_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_queue_limit_association", function()
		local result = service.get_queue_limit_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_sessions_statistics_aggregation", function()
		local result = service.get_sessions_statistics_aggregation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_storage_profile", function()
		local result = service.get_storage_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_available_metered_products", function()
		local result = service.list_available_metered_products()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_farm_members", function()
		local result = service.list_farm_members()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_farms", function()
		local result = service.list_farms()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_license_endpoints", function()
		local result = service.list_license_endpoints()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_limits", function()
		local result = service.list_limits()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_monitors", function()
		local result = service.list_monitors()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_queue_fleet_associations", function()
		local result = service.list_queue_fleet_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_queue_limit_associations", function()
		local result = service.list_queue_limit_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_storage_profiles", function()
		local result = service.list_storage_profiles()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_jobs", function()
		local result = service.search_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_steps", function()
		local result = service.search_steps()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_tasks", function()
		local result = service.search_tasks()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_workers", function()
		local result = service.search_workers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_sessions_statistics_aggregation", function()
		local result = service.start_sessions_statistics_aggregation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_farm", function()
		local result = service.update_farm()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_limit", function()
		local result = service.update_limit()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_monitor", function()
		local result = service.update_monitor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_queue_fleet_association", function()
		local result = service.update_queue_fleet_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_queue_limit_association", function()
		local result = service.update_queue_limit_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_storage_profile", function()
		local result = service.update_storage_profile()
		assert.is_true(result.success)
	end)

end)