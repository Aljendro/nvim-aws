-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: application-signals

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS application-signals service testing", function()
	it("should generate a cli skeleton for batch-get-service-level-objective-budget-report", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "batch-get-service-level-objective-budget-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-update-exclusion-windows", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "batch-update-exclusion-windows" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-service-level-objective", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "create-service-level-objective" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-service-level-objective", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "delete-service-level-objective" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "get-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-level-objective", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "get-service-level-objective" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-dependencies", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "list-service-dependencies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-dependents", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "list-service-dependents" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-level-objective-exclusion-windows", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "list-service-level-objective-exclusion-windows" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-level-objectives", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "list-service-level-objectives" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-operations", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "list-service-operations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-services", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "list-services" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-discovery", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "start-discovery" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-service-level-objective", function()
		local result = common.execute_aws_command_with_input({ "application-signals", "update-service-level-objective" })
		assert.is_true(result.success)
	end)

end)