-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: directory-service

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS directory-service service testing", function()
	it("should generate a cli skeleton for accept-shared-directory", function()
		local result = common.execute_aws_command_with_input({ "ds", "accept-shared-directory" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-ip-routes", function()
		local result = common.execute_aws_command_with_input({ "ds", "add-ip-routes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-region", function()
		local result = common.execute_aws_command_with_input({ "ds", "add-region" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-tags-to-resource", function()
		local result = common.execute_aws_command_with_input({ "ds", "add-tags-to-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-schema-extension", function()
		local result = common.execute_aws_command_with_input({ "ds", "cancel-schema-extension" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for connect-directory", function()
		local result = common.execute_aws_command_with_input({ "ds", "connect-directory" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-alias", function()
		local result = common.execute_aws_command_with_input({ "ds", "create-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-computer", function()
		local result = common.execute_aws_command_with_input({ "ds", "create-computer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-conditional-forwarder", function()
		local result = common.execute_aws_command_with_input({ "ds", "create-conditional-forwarder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-directory", function()
		local result = common.execute_aws_command_with_input({ "ds", "create-directory" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-log-subscription", function()
		local result = common.execute_aws_command_with_input({ "ds", "create-log-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-microsoft-ad", function()
		local result = common.execute_aws_command_with_input({ "ds", "create-microsoft-ad" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-snapshot", function()
		local result = common.execute_aws_command_with_input({ "ds", "create-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-trust", function()
		local result = common.execute_aws_command_with_input({ "ds", "create-trust" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-conditional-forwarder", function()
		local result = common.execute_aws_command_with_input({ "ds", "delete-conditional-forwarder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-directory", function()
		local result = common.execute_aws_command_with_input({ "ds", "delete-directory" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-log-subscription", function()
		local result = common.execute_aws_command_with_input({ "ds", "delete-log-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-snapshot", function()
		local result = common.execute_aws_command_with_input({ "ds", "delete-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-trust", function()
		local result = common.execute_aws_command_with_input({ "ds", "delete-trust" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-certificate", function()
		local result = common.execute_aws_command_with_input({ "ds", "deregister-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-event-topic", function()
		local result = common.execute_aws_command_with_input({ "ds", "deregister-event-topic" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-certificate", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-client-authentication-settings", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-client-authentication-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-conditional-forwarders", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-conditional-forwarders" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-directories", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-directories" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-directory-data-access", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-directory-data-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-domain-controllers", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-domain-controllers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-event-topics", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-event-topics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ldaps-settings", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-ldaps-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-regions", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-regions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-settings", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-shared-directories", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-shared-directories" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-snapshots", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-snapshots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-trusts", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-trusts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-update-directory", function()
		local result = common.execute_aws_command_with_input({ "ds", "describe-update-directory" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-client-authentication", function()
		local result = common.execute_aws_command_with_input({ "ds", "disable-client-authentication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-directory-data-access", function()
		local result = common.execute_aws_command_with_input({ "ds", "disable-directory-data-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-ldaps", function()
		local result = common.execute_aws_command_with_input({ "ds", "disable-ldaps" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-radius", function()
		local result = common.execute_aws_command_with_input({ "ds", "disable-radius" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-sso", function()
		local result = common.execute_aws_command_with_input({ "ds", "disable-sso" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-client-authentication", function()
		local result = common.execute_aws_command_with_input({ "ds", "enable-client-authentication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-directory-data-access", function()
		local result = common.execute_aws_command_with_input({ "ds", "enable-directory-data-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-ldaps", function()
		local result = common.execute_aws_command_with_input({ "ds", "enable-ldaps" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-radius", function()
		local result = common.execute_aws_command_with_input({ "ds", "enable-radius" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-sso", function()
		local result = common.execute_aws_command_with_input({ "ds", "enable-sso" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-directory-limits", function()
		local result = common.execute_aws_command_with_input({ "ds", "get-directory-limits" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-snapshot-limits", function()
		local result = common.execute_aws_command_with_input({ "ds", "get-snapshot-limits" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-certificates", function()
		local result = common.execute_aws_command_with_input({ "ds", "list-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-ip-routes", function()
		local result = common.execute_aws_command_with_input({ "ds", "list-ip-routes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-log-subscriptions", function()
		local result = common.execute_aws_command_with_input({ "ds", "list-log-subscriptions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-schema-extensions", function()
		local result = common.execute_aws_command_with_input({ "ds", "list-schema-extensions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "ds", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-certificate", function()
		local result = common.execute_aws_command_with_input({ "ds", "register-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-event-topic", function()
		local result = common.execute_aws_command_with_input({ "ds", "register-event-topic" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-shared-directory", function()
		local result = common.execute_aws_command_with_input({ "ds", "reject-shared-directory" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-ip-routes", function()
		local result = common.execute_aws_command_with_input({ "ds", "remove-ip-routes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-region", function()
		local result = common.execute_aws_command_with_input({ "ds", "remove-region" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-tags-from-resource", function()
		local result = common.execute_aws_command_with_input({ "ds", "remove-tags-from-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reset-user-password", function()
		local result = common.execute_aws_command_with_input({ "ds", "reset-user-password" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-from-snapshot", function()
		local result = common.execute_aws_command_with_input({ "ds", "restore-from-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for share-directory", function()
		local result = common.execute_aws_command_with_input({ "ds", "share-directory" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-schema-extension", function()
		local result = common.execute_aws_command_with_input({ "ds", "start-schema-extension" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for unshare-directory", function()
		local result = common.execute_aws_command_with_input({ "ds", "unshare-directory" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-conditional-forwarder", function()
		local result = common.execute_aws_command_with_input({ "ds", "update-conditional-forwarder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-directory-setup", function()
		local result = common.execute_aws_command_with_input({ "ds", "update-directory-setup" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-number-of-domain-controllers", function()
		local result = common.execute_aws_command_with_input({ "ds", "update-number-of-domain-controllers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-radius", function()
		local result = common.execute_aws_command_with_input({ "ds", "update-radius" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-settings", function()
		local result = common.execute_aws_command_with_input({ "ds", "update-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-trust", function()
		local result = common.execute_aws_command_with_input({ "ds", "update-trust" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for verify-trust", function()
		local result = common.execute_aws_command_with_input({ "ds", "verify-trust" })
		assert.is_true(result.success)
	end)

end)