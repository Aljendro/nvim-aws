-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: database-migration-service

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS database-migration-service service testing", function()
	it("should generate a cli skeleton for add-tags-to-resource", function()
		local result = common.execute_aws_command_with_input({ "dms", "add-tags-to-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for apply-pending-maintenance-action", function()
		local result = common.execute_aws_command_with_input({ "dms", "apply-pending-maintenance-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-start-recommendations", function()
		local result = common.execute_aws_command_with_input({ "dms", "batch-start-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-replication-task-assessment-run", function()
		local result = common.execute_aws_command_with_input({ "dms", "cancel-replication-task-assessment-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-data-migration", function()
		local result = common.execute_aws_command_with_input({ "dms", "create-data-migration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-data-provider", function()
		local result = common.execute_aws_command_with_input({ "dms", "create-data-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-endpoint", function()
		local result = common.execute_aws_command_with_input({ "dms", "create-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-event-subscription", function()
		local result = common.execute_aws_command_with_input({ "dms", "create-event-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-fleet-advisor-collector", function()
		local result = common.execute_aws_command_with_input({ "dms", "create-fleet-advisor-collector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-instance-profile", function()
		local result = common.execute_aws_command_with_input({ "dms", "create-instance-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-migration-project", function()
		local result = common.execute_aws_command_with_input({ "dms", "create-migration-project" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-replication-config", function()
		local result = common.execute_aws_command_with_input({ "dms", "create-replication-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-replication-instance", function()
		local result = common.execute_aws_command_with_input({ "dms", "create-replication-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-replication-subnet-group", function()
		local result = common.execute_aws_command_with_input({ "dms", "create-replication-subnet-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-replication-task", function()
		local result = common.execute_aws_command_with_input({ "dms", "create-replication-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-certificate", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-connection", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-data-migration", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-data-migration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-data-provider", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-data-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-endpoint", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-event-subscription", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-event-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-fleet-advisor-collector", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-fleet-advisor-collector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-fleet-advisor-databases", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-fleet-advisor-databases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-instance-profile", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-instance-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-migration-project", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-migration-project" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-replication-config", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-replication-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-replication-instance", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-replication-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-replication-subnet-group", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-replication-subnet-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-replication-task", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-replication-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-replication-task-assessment-run", function()
		local result = common.execute_aws_command_with_input({ "dms", "delete-replication-task-assessment-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-account-attributes", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-account-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-applicable-individual-assessments", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-applicable-individual-assessments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-certificates", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-connections", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-conversion-configuration", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-conversion-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-data-migrations", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-data-migrations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-data-providers", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-data-providers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-endpoint-settings", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-endpoint-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-endpoint-types", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-endpoint-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-endpoints", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-engine-versions", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-engine-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-event-categories", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-event-categories" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-event-subscriptions", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-event-subscriptions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-events", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-events" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-extension-pack-associations", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-extension-pack-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-advisor-collectors", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-fleet-advisor-collectors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-advisor-databases", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-fleet-advisor-databases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-advisor-lsa-analysis", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-fleet-advisor-lsa-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-advisor-schema-object-summary", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-fleet-advisor-schema-object-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-advisor-schemas", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-fleet-advisor-schemas" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-profiles", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-instance-profiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-metadata-model-assessments", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-metadata-model-assessments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-metadata-model-conversions", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-metadata-model-conversions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-metadata-model-exports-as-script", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-metadata-model-exports-as-script" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-metadata-model-exports-to-target", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-metadata-model-exports-to-target" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-metadata-model-imports", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-metadata-model-imports" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-migration-projects", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-migration-projects" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-orderable-replication-instances", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-orderable-replication-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-pending-maintenance-actions", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-pending-maintenance-actions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-recommendation-limitations", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-recommendation-limitations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-recommendations", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-refresh-schemas-status", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-refresh-schemas-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-replication-configs", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-replication-configs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-replication-instance-task-logs", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-replication-instance-task-logs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-replication-instances", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-replication-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-replication-subnet-groups", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-replication-subnet-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-replication-table-statistics", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-replication-table-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-replication-task-assessment-results", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-replication-task-assessment-results" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-replication-task-assessment-runs", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-replication-task-assessment-runs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-replication-task-individual-assessments", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-replication-task-individual-assessments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-replication-tasks", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-replication-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-replications", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-replications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-schemas", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-schemas" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-table-statistics", function()
		local result = common.execute_aws_command_with_input({ "dms", "describe-table-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for export-metadata-model-assessment", function()
		local result = common.execute_aws_command_with_input({ "dms", "export-metadata-model-assessment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-certificate", function()
		local result = common.execute_aws_command_with_input({ "dms", "import-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "dms", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-conversion-configuration", function()
		local result = common.execute_aws_command_with_input({ "dms", "modify-conversion-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-data-migration", function()
		local result = common.execute_aws_command_with_input({ "dms", "modify-data-migration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-data-provider", function()
		local result = common.execute_aws_command_with_input({ "dms", "modify-data-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-endpoint", function()
		local result = common.execute_aws_command_with_input({ "dms", "modify-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-event-subscription", function()
		local result = common.execute_aws_command_with_input({ "dms", "modify-event-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-instance-profile", function()
		local result = common.execute_aws_command_with_input({ "dms", "modify-instance-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-migration-project", function()
		local result = common.execute_aws_command_with_input({ "dms", "modify-migration-project" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-replication-config", function()
		local result = common.execute_aws_command_with_input({ "dms", "modify-replication-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-replication-instance", function()
		local result = common.execute_aws_command_with_input({ "dms", "modify-replication-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-replication-subnet-group", function()
		local result = common.execute_aws_command_with_input({ "dms", "modify-replication-subnet-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-replication-task", function()
		local result = common.execute_aws_command_with_input({ "dms", "modify-replication-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for move-replication-task", function()
		local result = common.execute_aws_command_with_input({ "dms", "move-replication-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reboot-replication-instance", function()
		local result = common.execute_aws_command_with_input({ "dms", "reboot-replication-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for refresh-schemas", function()
		local result = common.execute_aws_command_with_input({ "dms", "refresh-schemas" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reload-replication-tables", function()
		local result = common.execute_aws_command_with_input({ "dms", "reload-replication-tables" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reload-tables", function()
		local result = common.execute_aws_command_with_input({ "dms", "reload-tables" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-tags-from-resource", function()
		local result = common.execute_aws_command_with_input({ "dms", "remove-tags-from-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for run-fleet-advisor-lsa-analysis", function()
		local result = common.execute_aws_command_with_input({ "dms", "run-fleet-advisor-lsa-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-data-migration", function()
		local result = common.execute_aws_command_with_input({ "dms", "start-data-migration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-extension-pack-association", function()
		local result = common.execute_aws_command_with_input({ "dms", "start-extension-pack-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-metadata-model-assessment", function()
		local result = common.execute_aws_command_with_input({ "dms", "start-metadata-model-assessment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-metadata-model-conversion", function()
		local result = common.execute_aws_command_with_input({ "dms", "start-metadata-model-conversion" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-metadata-model-export-as-script", function()
		local result = common.execute_aws_command_with_input({ "dms", "start-metadata-model-export-as-script" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-metadata-model-export-to-target", function()
		local result = common.execute_aws_command_with_input({ "dms", "start-metadata-model-export-to-target" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-metadata-model-import", function()
		local result = common.execute_aws_command_with_input({ "dms", "start-metadata-model-import" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-recommendations", function()
		local result = common.execute_aws_command_with_input({ "dms", "start-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-replication", function()
		local result = common.execute_aws_command_with_input({ "dms", "start-replication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-replication-task", function()
		local result = common.execute_aws_command_with_input({ "dms", "start-replication-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-replication-task-assessment", function()
		local result = common.execute_aws_command_with_input({ "dms", "start-replication-task-assessment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-replication-task-assessment-run", function()
		local result = common.execute_aws_command_with_input({ "dms", "start-replication-task-assessment-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-data-migration", function()
		local result = common.execute_aws_command_with_input({ "dms", "stop-data-migration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-replication", function()
		local result = common.execute_aws_command_with_input({ "dms", "stop-replication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-replication-task", function()
		local result = common.execute_aws_command_with_input({ "dms", "stop-replication-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for test-connection", function()
		local result = common.execute_aws_command_with_input({ "dms", "test-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-subscriptions-to-event-bridge", function()
		local result = common.execute_aws_command_with_input({ "dms", "update-subscriptions-to-event-bridge" })
		assert.is_true(result.success)
	end)

end)