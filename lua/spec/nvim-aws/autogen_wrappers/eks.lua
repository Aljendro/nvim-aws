-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: eks

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS eks service testing", function()
	it("should generate a cli skeleton for associate-access-policy", function()
		local result = common.execute_aws_command_with_input({ "eks", "associate-access-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-encryption-config", function()
		local result = common.execute_aws_command_with_input({ "eks", "associate-encryption-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-identity-provider-config", function()
		local result = common.execute_aws_command_with_input({ "eks", "associate-identity-provider-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-access-entry", function()
		local result = common.execute_aws_command_with_input({ "eks", "create-access-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-addon", function()
		local result = common.execute_aws_command_with_input({ "eks", "create-addon" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cluster", function()
		local result = common.execute_aws_command_with_input({ "eks", "create-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-eks-anywhere-subscription", function()
		local result = common.execute_aws_command_with_input({ "eks", "create-eks-anywhere-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-fargate-profile", function()
		local result = common.execute_aws_command_with_input({ "eks", "create-fargate-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-nodegroup", function()
		local result = common.execute_aws_command_with_input({ "eks", "create-nodegroup" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-pod-identity-association", function()
		local result = common.execute_aws_command_with_input({ "eks", "create-pod-identity-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-access-entry", function()
		local result = common.execute_aws_command_with_input({ "eks", "delete-access-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-addon", function()
		local result = common.execute_aws_command_with_input({ "eks", "delete-addon" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cluster", function()
		local result = common.execute_aws_command_with_input({ "eks", "delete-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-eks-anywhere-subscription", function()
		local result = common.execute_aws_command_with_input({ "eks", "delete-eks-anywhere-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-fargate-profile", function()
		local result = common.execute_aws_command_with_input({ "eks", "delete-fargate-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-nodegroup", function()
		local result = common.execute_aws_command_with_input({ "eks", "delete-nodegroup" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-pod-identity-association", function()
		local result = common.execute_aws_command_with_input({ "eks", "delete-pod-identity-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-cluster", function()
		local result = common.execute_aws_command_with_input({ "eks", "deregister-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-access-entry", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-access-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-addon", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-addon" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-addon-configuration", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-addon-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-addon-versions", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-addon-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cluster", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cluster-versions", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-cluster-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-eks-anywhere-subscription", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-eks-anywhere-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fargate-profile", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-fargate-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-identity-provider-config", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-identity-provider-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-insight", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-insight" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-nodegroup", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-nodegroup" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-pod-identity-association", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-pod-identity-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-update", function()
		local result = common.execute_aws_command_with_input({ "eks", "describe-update" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-access-policy", function()
		local result = common.execute_aws_command_with_input({ "eks", "disassociate-access-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-identity-provider-config", function()
		local result = common.execute_aws_command_with_input({ "eks", "disassociate-identity-provider-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-access-entries", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-access-entries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-access-policies", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-access-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-addons", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-addons" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-associated-access-policies", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-associated-access-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-clusters", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-clusters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-eks-anywhere-subscriptions", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-eks-anywhere-subscriptions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-fargate-profiles", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-fargate-profiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-identity-provider-configs", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-identity-provider-configs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-insights", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-insights" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-nodegroups", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-nodegroups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-pod-identity-associations", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-pod-identity-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-updates", function()
		local result = common.execute_aws_command_with_input({ "eks", "list-updates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-cluster", function()
		local result = common.execute_aws_command_with_input({ "eks", "register-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "eks", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "eks", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-access-entry", function()
		local result = common.execute_aws_command_with_input({ "eks", "update-access-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-addon", function()
		local result = common.execute_aws_command_with_input({ "eks", "update-addon" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-cluster-config", function()
		local result = common.execute_aws_command_with_input({ "eks", "update-cluster-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-cluster-version", function()
		local result = common.execute_aws_command_with_input({ "eks", "update-cluster-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-eks-anywhere-subscription", function()
		local result = common.execute_aws_command_with_input({ "eks", "update-eks-anywhere-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-nodegroup-config", function()
		local result = common.execute_aws_command_with_input({ "eks", "update-nodegroup-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-nodegroup-version", function()
		local result = common.execute_aws_command_with_input({ "eks", "update-nodegroup-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-pod-identity-association", function()
		local result = common.execute_aws_command_with_input({ "eks", "update-pod-identity-association" })
		assert.is_true(result.success)
	end)

end)