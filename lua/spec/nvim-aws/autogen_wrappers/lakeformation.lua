-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: lakeformation

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS lakeformation service testing", function()
	it("should generate a cli skeleton for add-lf-tags-to-resource", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "add-lf-tags-to-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for assume-decorated-role-with-saml", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "assume-decorated-role-with-saml" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-grant-permissions", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "batch-grant-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-revoke-permissions", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "batch-revoke-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-transaction", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "cancel-transaction" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for commit-transaction", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "commit-transaction" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-data-cells-filter", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "create-data-cells-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-lf-tag", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "create-lf-tag" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-lf-tag-expression", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "create-lf-tag-expression" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-lake-formation-identity-center-configuration", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "create-lake-formation-identity-center-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-lake-formation-opt-in", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "create-lake-formation-opt-in" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-data-cells-filter", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "delete-data-cells-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-lf-tag", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "delete-lf-tag" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-lf-tag-expression", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "delete-lf-tag-expression" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-lake-formation-identity-center-configuration", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "delete-lake-formation-identity-center-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-lake-formation-opt-in", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "delete-lake-formation-opt-in" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-objects-on-cancel", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "delete-objects-on-cancel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-resource", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "deregister-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-lake-formation-identity-center-configuration", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "describe-lake-formation-identity-center-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-resource", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "describe-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-transaction", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "describe-transaction" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for extend-transaction", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "extend-transaction" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-cells-filter", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-data-cells-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-lake-principal", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-data-lake-principal" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-lake-settings", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-data-lake-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-effective-permissions-for-path", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-effective-permissions-for-path" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-lf-tag", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-lf-tag" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-lf-tag-expression", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-lf-tag-expression" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-state", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-query-state" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-query-statistics", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-query-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resource-lf-tags", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-resource-lf-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-table-objects", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-table-objects" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-temporary-glue-partition-credentials", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-temporary-glue-partition-credentials" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-temporary-glue-table-credentials", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-temporary-glue-table-credentials" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-work-unit-results", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-work-unit-results" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-work-units", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "get-work-units" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for grant-permissions", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "grant-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-data-cells-filter", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "list-data-cells-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-lf-tag-expressions", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "list-lf-tag-expressions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-lf-tags", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "list-lf-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-lake-formation-opt-ins", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "list-lake-formation-opt-ins" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-permissions", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "list-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resources", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "list-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-table-storage-optimizers", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "list-table-storage-optimizers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-transactions", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "list-transactions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-data-lake-settings", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "put-data-lake-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-resource", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "register-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-lf-tags-from-resource", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "remove-lf-tags-from-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for revoke-permissions", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "revoke-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-databases-by-lf-tags", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "search-databases-by-lf-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-tables-by-lf-tags", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "search-tables-by-lf-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-query-planning", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "start-query-planning" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-transaction", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "start-transaction" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-data-cells-filter", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "update-data-cells-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-lf-tag", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "update-lf-tag" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-lf-tag-expression", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "update-lf-tag-expression" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-lake-formation-identity-center-configuration", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "update-lake-formation-identity-center-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-resource", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "update-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-table-objects", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "update-table-objects" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-table-storage-optimizer", function()
		local result = common.execute_aws_command_with_input({ "lakeformation", "update-table-storage-optimizer" })
		assert.is_true(result.success)
	end)

end)