-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: network-firewall

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS network-firewall service testing", function()
	it("should generate a cli skeleton for associate-firewall-policy", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "associate-firewall-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-subnets", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "associate-subnets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-firewall", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "create-firewall" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-firewall-policy", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "create-firewall-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-rule-group", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "create-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-tls-inspection-configuration", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "create-tls-inspection-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-firewall", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "delete-firewall" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-firewall-policy", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "delete-firewall-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "delete-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-rule-group", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "delete-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-tls-inspection-configuration", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "delete-tls-inspection-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-firewall", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "describe-firewall" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-firewall-policy", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "describe-firewall-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-flow-operation", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "describe-flow-operation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-logging-configuration", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "describe-logging-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "describe-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-rule-group", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "describe-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-rule-group-metadata", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "describe-rule-group-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-tls-inspection-configuration", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "describe-tls-inspection-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-subnets", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "disassociate-subnets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-analysis-report-results", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "get-analysis-report-results" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-analysis-reports", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "list-analysis-reports" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-firewall-policies", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "list-firewall-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-firewalls", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "list-firewalls" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-flow-operation-results", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "list-flow-operation-results" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-flow-operations", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "list-flow-operations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-rule-groups", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "list-rule-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tls-inspection-configurations", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "list-tls-inspection-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "put-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-analysis-report", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "start-analysis-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-flow-capture", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "start-flow-capture" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-flow-flush", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "start-flow-flush" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-firewall-analysis-settings", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "update-firewall-analysis-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-firewall-delete-protection", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "update-firewall-delete-protection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-firewall-description", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "update-firewall-description" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-firewall-encryption-configuration", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "update-firewall-encryption-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-firewall-policy", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "update-firewall-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-firewall-policy-change-protection", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "update-firewall-policy-change-protection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-logging-configuration", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "update-logging-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-rule-group", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "update-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-subnet-change-protection", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "update-subnet-change-protection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-tls-inspection-configuration", function()
		local result = common.execute_aws_command_with_input({ "network-firewall", "update-tls-inspection-configuration" })
		assert.is_true(result.success)
	end)

end)