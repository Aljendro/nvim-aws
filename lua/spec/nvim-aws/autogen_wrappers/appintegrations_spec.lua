-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: appintegrations

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.appintegrations")

describe("AWS appintegrations service testing", function()
	it("should generate a cli skeleton with create_application", function()
		local result = service.create_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_data_integration", function()
		local result = service.create_data_integration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_data_integration_association", function()
		local result = service.create_data_integration_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_event_integration", function()
		local result = service.create_event_integration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_application", function()
		local result = service.delete_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_data_integration", function()
		local result = service.delete_data_integration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_event_integration", function()
		local result = service.delete_event_integration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_application", function()
		local result = service.get_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_data_integration", function()
		local result = service.get_data_integration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_event_integration", function()
		local result = service.get_event_integration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_application_associations", function()
		local result = service.list_application_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_applications", function()
		local result = service.list_applications()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_integration_associations", function()
		local result = service.list_data_integration_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_integrations", function()
		local result = service.list_data_integrations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_event_integration_associations", function()
		local result = service.list_event_integration_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_event_integrations", function()
		local result = service.list_event_integrations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_application", function()
		local result = service.update_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_data_integration", function()
		local result = service.update_data_integration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_data_integration_association", function()
		local result = service.update_data_integration_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_event_integration", function()
		local result = service.update_event_integration()
		assert.is_true(result.success)
	end)

end)