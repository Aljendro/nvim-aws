-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: workspaces-web

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.workspaces-web")

describe("AWS workspaces-web service testing", function()
	it("should generate a cli skeleton with associate_browser_settings", function()
		local result = service.associate_browser_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with associate_data_protection_settings", function()
		local result = service.associate_data_protection_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with associate_ip_access_settings", function()
		local result = service.associate_ip_access_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with associate_network_settings", function()
		local result = service.associate_network_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with associate_trust_store", function()
		local result = service.associate_trust_store()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with associate_user_access_logging_settings", function()
		local result = service.associate_user_access_logging_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with associate_user_settings", function()
		local result = service.associate_user_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_browser_settings", function()
		local result = service.create_browser_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_data_protection_settings", function()
		local result = service.create_data_protection_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_identity_provider", function()
		local result = service.create_identity_provider()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_ip_access_settings", function()
		local result = service.create_ip_access_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_network_settings", function()
		local result = service.create_network_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_portal", function()
		local result = service.create_portal()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_trust_store", function()
		local result = service.create_trust_store()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_user_access_logging_settings", function()
		local result = service.create_user_access_logging_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_user_settings", function()
		local result = service.create_user_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_browser_settings", function()
		local result = service.delete_browser_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_data_protection_settings", function()
		local result = service.delete_data_protection_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_identity_provider", function()
		local result = service.delete_identity_provider()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_ip_access_settings", function()
		local result = service.delete_ip_access_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_network_settings", function()
		local result = service.delete_network_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_portal", function()
		local result = service.delete_portal()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_trust_store", function()
		local result = service.delete_trust_store()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_user_access_logging_settings", function()
		local result = service.delete_user_access_logging_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_user_settings", function()
		local result = service.delete_user_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with disassociate_browser_settings", function()
		local result = service.disassociate_browser_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with disassociate_data_protection_settings", function()
		local result = service.disassociate_data_protection_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with disassociate_ip_access_settings", function()
		local result = service.disassociate_ip_access_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with disassociate_network_settings", function()
		local result = service.disassociate_network_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with disassociate_trust_store", function()
		local result = service.disassociate_trust_store()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with disassociate_user_access_logging_settings", function()
		local result = service.disassociate_user_access_logging_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with disassociate_user_settings", function()
		local result = service.disassociate_user_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with expire_session", function()
		local result = service.expire_session()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_browser_settings", function()
		local result = service.get_browser_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_data_protection_settings", function()
		local result = service.get_data_protection_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_identity_provider", function()
		local result = service.get_identity_provider()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_ip_access_settings", function()
		local result = service.get_ip_access_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_network_settings", function()
		local result = service.get_network_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_portal", function()
		local result = service.get_portal()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_portal_service_provider_metadata", function()
		local result = service.get_portal_service_provider_metadata()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_session", function()
		local result = service.get_session()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_trust_store", function()
		local result = service.get_trust_store()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_trust_store_certificate", function()
		local result = service.get_trust_store_certificate()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_user_access_logging_settings", function()
		local result = service.get_user_access_logging_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_user_settings", function()
		local result = service.get_user_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_browser_settings", function()
		local result = service.list_browser_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_data_protection_settings", function()
		local result = service.list_data_protection_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_identity_providers", function()
		local result = service.list_identity_providers()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_ip_access_settings", function()
		local result = service.list_ip_access_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_network_settings", function()
		local result = service.list_network_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_portals", function()
		local result = service.list_portals()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_sessions", function()
		local result = service.list_sessions()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_trust_store_certificates", function()
		local result = service.list_trust_store_certificates()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_trust_stores", function()
		local result = service.list_trust_stores()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_user_access_logging_settings", function()
		local result = service.list_user_access_logging_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_user_settings", function()
		local result = service.list_user_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_browser_settings", function()
		local result = service.update_browser_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_data_protection_settings", function()
		local result = service.update_data_protection_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_identity_provider", function()
		local result = service.update_identity_provider()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_ip_access_settings", function()
		local result = service.update_ip_access_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_network_settings", function()
		local result = service.update_network_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_portal", function()
		local result = service.update_portal()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_trust_store", function()
		local result = service.update_trust_store()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_user_access_logging_settings", function()
		local result = service.update_user_access_logging_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_user_settings", function()
		local result = service.update_user_settings()
		assert.is_true(result.success)
	end)
end)