-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: databrew

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS databrew service testing", function()
	it("should generate a cli skeleton for batch-delete-recipe-version", function()
		local result = common.execute_aws_command_with_input({ "databrew", "batch-delete-recipe-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-dataset", function()
		local result = common.execute_aws_command_with_input({ "databrew", "create-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-profile-job", function()
		local result = common.execute_aws_command_with_input({ "databrew", "create-profile-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-project", function()
		local result = common.execute_aws_command_with_input({ "databrew", "create-project" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-recipe", function()
		local result = common.execute_aws_command_with_input({ "databrew", "create-recipe" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-recipe-job", function()
		local result = common.execute_aws_command_with_input({ "databrew", "create-recipe-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-ruleset", function()
		local result = common.execute_aws_command_with_input({ "databrew", "create-ruleset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-schedule", function()
		local result = common.execute_aws_command_with_input({ "databrew", "create-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-dataset", function()
		local result = common.execute_aws_command_with_input({ "databrew", "delete-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-job", function()
		local result = common.execute_aws_command_with_input({ "databrew", "delete-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-project", function()
		local result = common.execute_aws_command_with_input({ "databrew", "delete-project" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-recipe-version", function()
		local result = common.execute_aws_command_with_input({ "databrew", "delete-recipe-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ruleset", function()
		local result = common.execute_aws_command_with_input({ "databrew", "delete-ruleset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-schedule", function()
		local result = common.execute_aws_command_with_input({ "databrew", "delete-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-dataset", function()
		local result = common.execute_aws_command_with_input({ "databrew", "describe-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-job", function()
		local result = common.execute_aws_command_with_input({ "databrew", "describe-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-job-run", function()
		local result = common.execute_aws_command_with_input({ "databrew", "describe-job-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-project", function()
		local result = common.execute_aws_command_with_input({ "databrew", "describe-project" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-recipe", function()
		local result = common.execute_aws_command_with_input({ "databrew", "describe-recipe" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ruleset", function()
		local result = common.execute_aws_command_with_input({ "databrew", "describe-ruleset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-schedule", function()
		local result = common.execute_aws_command_with_input({ "databrew", "describe-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-datasets", function()
		local result = common.execute_aws_command_with_input({ "databrew", "list-datasets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-job-runs", function()
		local result = common.execute_aws_command_with_input({ "databrew", "list-job-runs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-jobs", function()
		local result = common.execute_aws_command_with_input({ "databrew", "list-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-projects", function()
		local result = common.execute_aws_command_with_input({ "databrew", "list-projects" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-recipe-versions", function()
		local result = common.execute_aws_command_with_input({ "databrew", "list-recipe-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-recipes", function()
		local result = common.execute_aws_command_with_input({ "databrew", "list-recipes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-rulesets", function()
		local result = common.execute_aws_command_with_input({ "databrew", "list-rulesets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-schedules", function()
		local result = common.execute_aws_command_with_input({ "databrew", "list-schedules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "databrew", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for publish-recipe", function()
		local result = common.execute_aws_command_with_input({ "databrew", "publish-recipe" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for send-project-session-action", function()
		local result = common.execute_aws_command_with_input({ "databrew", "send-project-session-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-job-run", function()
		local result = common.execute_aws_command_with_input({ "databrew", "start-job-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-project-session", function()
		local result = common.execute_aws_command_with_input({ "databrew", "start-project-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-job-run", function()
		local result = common.execute_aws_command_with_input({ "databrew", "stop-job-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "databrew", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "databrew", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-dataset", function()
		local result = common.execute_aws_command_with_input({ "databrew", "update-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-profile-job", function()
		local result = common.execute_aws_command_with_input({ "databrew", "update-profile-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-project", function()
		local result = common.execute_aws_command_with_input({ "databrew", "update-project" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-recipe", function()
		local result = common.execute_aws_command_with_input({ "databrew", "update-recipe" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-recipe-job", function()
		local result = common.execute_aws_command_with_input({ "databrew", "update-recipe-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-ruleset", function()
		local result = common.execute_aws_command_with_input({ "databrew", "update-ruleset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-schedule", function()
		local result = common.execute_aws_command_with_input({ "databrew", "update-schedule" })
		assert.is_true(result.success)
	end)

end)