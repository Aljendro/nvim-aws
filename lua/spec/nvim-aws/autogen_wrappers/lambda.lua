-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: lambda

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS lambda service testing", function()
	it("should generate a cli skeleton for add-layer-version-permission", function()
		local result = common.execute_aws_command_with_input({ "lambda", "add-layer-version-permission" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-permission", function()
		local result = common.execute_aws_command_with_input({ "lambda", "add-permission" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-alias", function()
		local result = common.execute_aws_command_with_input({ "lambda", "create-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-code-signing-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "create-code-signing-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-event-source-mapping", function()
		local result = common.execute_aws_command_with_input({ "lambda", "create-event-source-mapping" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-function", function()
		local result = common.execute_aws_command_with_input({ "lambda", "create-function" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-function-url-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "create-function-url-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-alias", function()
		local result = common.execute_aws_command_with_input({ "lambda", "delete-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-code-signing-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "delete-code-signing-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-event-source-mapping", function()
		local result = common.execute_aws_command_with_input({ "lambda", "delete-event-source-mapping" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-function", function()
		local result = common.execute_aws_command_with_input({ "lambda", "delete-function" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-function-code-signing-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "delete-function-code-signing-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-function-concurrency", function()
		local result = common.execute_aws_command_with_input({ "lambda", "delete-function-concurrency" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-function-event-invoke-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "delete-function-event-invoke-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-function-url-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "delete-function-url-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-layer-version", function()
		local result = common.execute_aws_command_with_input({ "lambda", "delete-layer-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-provisioned-concurrency-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "delete-provisioned-concurrency-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-account-settings", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-account-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-alias", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-code-signing-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-code-signing-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-event-source-mapping", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-event-source-mapping" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-function", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-function" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-function-code-signing-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-function-code-signing-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-function-concurrency", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-function-concurrency" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-function-configuration", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-function-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-function-event-invoke-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-function-event-invoke-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-function-recursion-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-function-recursion-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-function-url-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-function-url-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-layer-version", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-layer-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-layer-version-by-arn", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-layer-version-by-arn" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-layer-version-policy", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-layer-version-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-policy", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-provisioned-concurrency-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-provisioned-concurrency-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-runtime-management-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "get-runtime-management-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for invoke", function()
		local result = common.execute_aws_command_with_input({ "lambda", "invoke" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for invoke-async", function()
		local result = common.execute_aws_command_with_input({ "lambda", "invoke-async" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for invoke-with-response-stream", function()
		local result = common.execute_aws_command_with_input({ "lambda", "invoke-with-response-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-aliases", function()
		local result = common.execute_aws_command_with_input({ "lambda", "list-aliases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-code-signing-configs", function()
		local result = common.execute_aws_command_with_input({ "lambda", "list-code-signing-configs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-event-source-mappings", function()
		local result = common.execute_aws_command_with_input({ "lambda", "list-event-source-mappings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-function-event-invoke-configs", function()
		local result = common.execute_aws_command_with_input({ "lambda", "list-function-event-invoke-configs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-function-url-configs", function()
		local result = common.execute_aws_command_with_input({ "lambda", "list-function-url-configs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-functions", function()
		local result = common.execute_aws_command_with_input({ "lambda", "list-functions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-functions-by-code-signing-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "list-functions-by-code-signing-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-layer-versions", function()
		local result = common.execute_aws_command_with_input({ "lambda", "list-layer-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-layers", function()
		local result = common.execute_aws_command_with_input({ "lambda", "list-layers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-provisioned-concurrency-configs", function()
		local result = common.execute_aws_command_with_input({ "lambda", "list-provisioned-concurrency-configs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags", function()
		local result = common.execute_aws_command_with_input({ "lambda", "list-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-versions-by-function", function()
		local result = common.execute_aws_command_with_input({ "lambda", "list-versions-by-function" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for publish-layer-version", function()
		local result = common.execute_aws_command_with_input({ "lambda", "publish-layer-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for publish-version", function()
		local result = common.execute_aws_command_with_input({ "lambda", "publish-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-function-code-signing-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "put-function-code-signing-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-function-concurrency", function()
		local result = common.execute_aws_command_with_input({ "lambda", "put-function-concurrency" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-function-event-invoke-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "put-function-event-invoke-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-function-recursion-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "put-function-recursion-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-provisioned-concurrency-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "put-provisioned-concurrency-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-runtime-management-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "put-runtime-management-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-layer-version-permission", function()
		local result = common.execute_aws_command_with_input({ "lambda", "remove-layer-version-permission" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-permission", function()
		local result = common.execute_aws_command_with_input({ "lambda", "remove-permission" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "lambda", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "lambda", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-alias", function()
		local result = common.execute_aws_command_with_input({ "lambda", "update-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-code-signing-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "update-code-signing-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-event-source-mapping", function()
		local result = common.execute_aws_command_with_input({ "lambda", "update-event-source-mapping" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-function-code", function()
		local result = common.execute_aws_command_with_input({ "lambda", "update-function-code" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-function-configuration", function()
		local result = common.execute_aws_command_with_input({ "lambda", "update-function-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-function-event-invoke-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "update-function-event-invoke-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-function-url-config", function()
		local result = common.execute_aws_command_with_input({ "lambda", "update-function-url-config" })
		assert.is_true(result.success)
	end)

end)