-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: glue

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.glue")

describe("AWS glue service testing", function()
	it("should generate a cli skeleton with batch_create_partition", function()
		local result = service.batch_create_partition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_delete_connection", function()
		local result = service.batch_delete_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_delete_partition", function()
		local result = service.batch_delete_partition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_delete_table", function()
		local result = service.batch_delete_table()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_delete_table_version", function()
		local result = service.batch_delete_table_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_blueprints", function()
		local result = service.batch_get_blueprints()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_crawlers", function()
		local result = service.batch_get_crawlers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_custom_entity_types", function()
		local result = service.batch_get_custom_entity_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_data_quality_result", function()
		local result = service.batch_get_data_quality_result()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_dev_endpoints", function()
		local result = service.batch_get_dev_endpoints()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_jobs", function()
		local result = service.batch_get_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_partition", function()
		local result = service.batch_get_partition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_table_optimizer", function()
		local result = service.batch_get_table_optimizer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_triggers", function()
		local result = service.batch_get_triggers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_workflows", function()
		local result = service.batch_get_workflows()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_put_data_quality_statistic_annotation", function()
		local result = service.batch_put_data_quality_statistic_annotation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_stop_job_run", function()
		local result = service.batch_stop_job_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_update_partition", function()
		local result = service.batch_update_partition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_data_quality_rule_recommendation_run", function()
		local result = service.cancel_data_quality_rule_recommendation_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_data_quality_ruleset_evaluation_run", function()
		local result = service.cancel_data_quality_ruleset_evaluation_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_ml_task_run", function()
		local result = service.cancel_ml_task_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_statement", function()
		local result = service.cancel_statement()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with check_schema_version_validity", function()
		local result = service.check_schema_version_validity()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_blueprint", function()
		local result = service.create_blueprint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_catalog", function()
		local result = service.create_catalog()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_classifier", function()
		local result = service.create_classifier()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_column_statistics_task_settings", function()
		local result = service.create_column_statistics_task_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_connection", function()
		local result = service.create_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_crawler", function()
		local result = service.create_crawler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_custom_entity_type", function()
		local result = service.create_custom_entity_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_data_quality_ruleset", function()
		local result = service.create_data_quality_ruleset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_database", function()
		local result = service.create_database()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_dev_endpoint", function()
		local result = service.create_dev_endpoint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_integration", function()
		local result = service.create_integration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_integration_resource_property", function()
		local result = service.create_integration_resource_property()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_integration_table_properties", function()
		local result = service.create_integration_table_properties()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_job", function()
		local result = service.create_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_ml_transform", function()
		local result = service.create_ml_transform()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_partition", function()
		local result = service.create_partition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_partition_index", function()
		local result = service.create_partition_index()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_registry", function()
		local result = service.create_registry()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_schema", function()
		local result = service.create_schema()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_script", function()
		local result = service.create_script()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_security_configuration", function()
		local result = service.create_security_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_session", function()
		local result = service.create_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_table", function()
		local result = service.create_table()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_table_optimizer", function()
		local result = service.create_table_optimizer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_trigger", function()
		local result = service.create_trigger()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_usage_profile", function()
		local result = service.create_usage_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_user_defined_function", function()
		local result = service.create_user_defined_function()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_workflow", function()
		local result = service.create_workflow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_blueprint", function()
		local result = service.delete_blueprint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_catalog", function()
		local result = service.delete_catalog()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_classifier", function()
		local result = service.delete_classifier()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_column_statistics_for_partition", function()
		local result = service.delete_column_statistics_for_partition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_column_statistics_for_table", function()
		local result = service.delete_column_statistics_for_table()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_column_statistics_task_settings", function()
		local result = service.delete_column_statistics_task_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_connection", function()
		local result = service.delete_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_crawler", function()
		local result = service.delete_crawler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_custom_entity_type", function()
		local result = service.delete_custom_entity_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_data_quality_ruleset", function()
		local result = service.delete_data_quality_ruleset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_database", function()
		local result = service.delete_database()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_dev_endpoint", function()
		local result = service.delete_dev_endpoint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_integration", function()
		local result = service.delete_integration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_integration_table_properties", function()
		local result = service.delete_integration_table_properties()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_job", function()
		local result = service.delete_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_ml_transform", function()
		local result = service.delete_ml_transform()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_partition", function()
		local result = service.delete_partition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_partition_index", function()
		local result = service.delete_partition_index()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_registry", function()
		local result = service.delete_registry()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_resource_policy", function()
		local result = service.delete_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_schema", function()
		local result = service.delete_schema()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_schema_versions", function()
		local result = service.delete_schema_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_security_configuration", function()
		local result = service.delete_security_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_session", function()
		local result = service.delete_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_table", function()
		local result = service.delete_table()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_table_optimizer", function()
		local result = service.delete_table_optimizer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_table_version", function()
		local result = service.delete_table_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_trigger", function()
		local result = service.delete_trigger()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_usage_profile", function()
		local result = service.delete_usage_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_user_defined_function", function()
		local result = service.delete_user_defined_function()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_workflow", function()
		local result = service.delete_workflow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_connection_type", function()
		local result = service.describe_connection_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_entity", function()
		local result = service.describe_entity()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_inbound_integrations", function()
		local result = service.describe_inbound_integrations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_integrations", function()
		local result = service.describe_integrations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_blueprint", function()
		local result = service.get_blueprint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_blueprint_run", function()
		local result = service.get_blueprint_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_blueprint_runs", function()
		local result = service.get_blueprint_runs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_catalog", function()
		local result = service.get_catalog()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_catalog_import_status", function()
		local result = service.get_catalog_import_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_catalogs", function()
		local result = service.get_catalogs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_classifier", function()
		local result = service.get_classifier()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_classifiers", function()
		local result = service.get_classifiers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_column_statistics_for_partition", function()
		local result = service.get_column_statistics_for_partition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_column_statistics_for_table", function()
		local result = service.get_column_statistics_for_table()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_column_statistics_task_run", function()
		local result = service.get_column_statistics_task_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_column_statistics_task_runs", function()
		local result = service.get_column_statistics_task_runs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_column_statistics_task_settings", function()
		local result = service.get_column_statistics_task_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_connection", function()
		local result = service.get_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_connections", function()
		local result = service.get_connections()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_crawler", function()
		local result = service.get_crawler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_crawler_metrics", function()
		local result = service.get_crawler_metrics()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_crawlers", function()
		local result = service.get_crawlers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_custom_entity_type", function()
		local result = service.get_custom_entity_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_data_catalog_encryption_settings", function()
		local result = service.get_data_catalog_encryption_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_data_quality_model", function()
		local result = service.get_data_quality_model()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_data_quality_model_result", function()
		local result = service.get_data_quality_model_result()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_data_quality_result", function()
		local result = service.get_data_quality_result()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_data_quality_rule_recommendation_run", function()
		local result = service.get_data_quality_rule_recommendation_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_data_quality_ruleset", function()
		local result = service.get_data_quality_ruleset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_data_quality_ruleset_evaluation_run", function()
		local result = service.get_data_quality_ruleset_evaluation_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_database", function()
		local result = service.get_database()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_databases", function()
		local result = service.get_databases()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_dataflow_graph", function()
		local result = service.get_dataflow_graph()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_dev_endpoint", function()
		local result = service.get_dev_endpoint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_dev_endpoints", function()
		local result = service.get_dev_endpoints()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_entity_records", function()
		local result = service.get_entity_records()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_integration_resource_property", function()
		local result = service.get_integration_resource_property()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_integration_table_properties", function()
		local result = service.get_integration_table_properties()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_job", function()
		local result = service.get_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_job_bookmark", function()
		local result = service.get_job_bookmark()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_job_run", function()
		local result = service.get_job_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_job_runs", function()
		local result = service.get_job_runs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_jobs", function()
		local result = service.get_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_mapping", function()
		local result = service.get_mapping()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_ml_task_run", function()
		local result = service.get_ml_task_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_ml_task_runs", function()
		local result = service.get_ml_task_runs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_ml_transform", function()
		local result = service.get_ml_transform()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_ml_transforms", function()
		local result = service.get_ml_transforms()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_partition", function()
		local result = service.get_partition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_partition_indexes", function()
		local result = service.get_partition_indexes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_partitions", function()
		local result = service.get_partitions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_plan", function()
		local result = service.get_plan()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_registry", function()
		local result = service.get_registry()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_resource_policies", function()
		local result = service.get_resource_policies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_resource_policy", function()
		local result = service.get_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_schema", function()
		local result = service.get_schema()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_schema_by_definition", function()
		local result = service.get_schema_by_definition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_schema_version", function()
		local result = service.get_schema_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_schema_versions_diff", function()
		local result = service.get_schema_versions_diff()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_security_configuration", function()
		local result = service.get_security_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_security_configurations", function()
		local result = service.get_security_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_session", function()
		local result = service.get_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_statement", function()
		local result = service.get_statement()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_table", function()
		local result = service.get_table()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_table_optimizer", function()
		local result = service.get_table_optimizer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_table_version", function()
		local result = service.get_table_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_table_versions", function()
		local result = service.get_table_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_tables", function()
		local result = service.get_tables()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_tags", function()
		local result = service.get_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_trigger", function()
		local result = service.get_trigger()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_triggers", function()
		local result = service.get_triggers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_unfiltered_partition_metadata", function()
		local result = service.get_unfiltered_partition_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_unfiltered_partitions_metadata", function()
		local result = service.get_unfiltered_partitions_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_unfiltered_table_metadata", function()
		local result = service.get_unfiltered_table_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_usage_profile", function()
		local result = service.get_usage_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_user_defined_function", function()
		local result = service.get_user_defined_function()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_user_defined_functions", function()
		local result = service.get_user_defined_functions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_workflow", function()
		local result = service.get_workflow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_workflow_run", function()
		local result = service.get_workflow_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_workflow_run_properties", function()
		local result = service.get_workflow_run_properties()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_workflow_runs", function()
		local result = service.get_workflow_runs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_catalog_to_glue", function()
		local result = service.import_catalog_to_glue()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_blueprints", function()
		local result = service.list_blueprints()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_column_statistics_task_runs", function()
		local result = service.list_column_statistics_task_runs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_connection_types", function()
		local result = service.list_connection_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_crawlers", function()
		local result = service.list_crawlers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_crawls", function()
		local result = service.list_crawls()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_custom_entity_types", function()
		local result = service.list_custom_entity_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_quality_results", function()
		local result = service.list_data_quality_results()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_quality_rule_recommendation_runs", function()
		local result = service.list_data_quality_rule_recommendation_runs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_quality_ruleset_evaluation_runs", function()
		local result = service.list_data_quality_ruleset_evaluation_runs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_quality_rulesets", function()
		local result = service.list_data_quality_rulesets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_quality_statistic_annotations", function()
		local result = service.list_data_quality_statistic_annotations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_quality_statistics", function()
		local result = service.list_data_quality_statistics()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_dev_endpoints", function()
		local result = service.list_dev_endpoints()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_entities", function()
		local result = service.list_entities()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_jobs", function()
		local result = service.list_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_ml_transforms", function()
		local result = service.list_ml_transforms()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_registries", function()
		local result = service.list_registries()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_schema_versions", function()
		local result = service.list_schema_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_schemas", function()
		local result = service.list_schemas()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sessions", function()
		local result = service.list_sessions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_statements", function()
		local result = service.list_statements()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_table_optimizer_runs", function()
		local result = service.list_table_optimizer_runs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_triggers", function()
		local result = service.list_triggers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_usage_profiles", function()
		local result = service.list_usage_profiles()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_workflows", function()
		local result = service.list_workflows()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with modify_integration", function()
		local result = service.modify_integration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_data_catalog_encryption_settings", function()
		local result = service.put_data_catalog_encryption_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_data_quality_profile_annotation", function()
		local result = service.put_data_quality_profile_annotation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_resource_policy", function()
		local result = service.put_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_schema_version_metadata", function()
		local result = service.put_schema_version_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_workflow_run_properties", function()
		local result = service.put_workflow_run_properties()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with query_schema_version_metadata", function()
		local result = service.query_schema_version_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with register_schema_version", function()
		local result = service.register_schema_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with remove_schema_version_metadata", function()
		local result = service.remove_schema_version_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reset_job_bookmark", function()
		local result = service.reset_job_bookmark()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with resume_workflow_run", function()
		local result = service.resume_workflow_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with run_statement", function()
		local result = service.run_statement()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_tables", function()
		local result = service.search_tables()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_blueprint_run", function()
		local result = service.start_blueprint_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_column_statistics_task_run", function()
		local result = service.start_column_statistics_task_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_column_statistics_task_run_schedule", function()
		local result = service.start_column_statistics_task_run_schedule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_crawler", function()
		local result = service.start_crawler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_crawler_schedule", function()
		local result = service.start_crawler_schedule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_data_quality_rule_recommendation_run", function()
		local result = service.start_data_quality_rule_recommendation_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_data_quality_ruleset_evaluation_run", function()
		local result = service.start_data_quality_ruleset_evaluation_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_export_labels_task_run", function()
		local result = service.start_export_labels_task_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_import_labels_task_run", function()
		local result = service.start_import_labels_task_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_job_run", function()
		local result = service.start_job_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_ml_evaluation_task_run", function()
		local result = service.start_ml_evaluation_task_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_ml_labeling_set_generation_task_run", function()
		local result = service.start_ml_labeling_set_generation_task_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_trigger", function()
		local result = service.start_trigger()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_workflow_run", function()
		local result = service.start_workflow_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_column_statistics_task_run", function()
		local result = service.stop_column_statistics_task_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_column_statistics_task_run_schedule", function()
		local result = service.stop_column_statistics_task_run_schedule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_crawler", function()
		local result = service.stop_crawler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_crawler_schedule", function()
		local result = service.stop_crawler_schedule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_session", function()
		local result = service.stop_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_trigger", function()
		local result = service.stop_trigger()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_workflow_run", function()
		local result = service.stop_workflow_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with test_connection", function()
		local result = service.test_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_blueprint", function()
		local result = service.update_blueprint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_catalog", function()
		local result = service.update_catalog()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_classifier", function()
		local result = service.update_classifier()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_column_statistics_for_partition", function()
		local result = service.update_column_statistics_for_partition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_column_statistics_for_table", function()
		local result = service.update_column_statistics_for_table()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_column_statistics_task_settings", function()
		local result = service.update_column_statistics_task_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_connection", function()
		local result = service.update_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_crawler", function()
		local result = service.update_crawler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_crawler_schedule", function()
		local result = service.update_crawler_schedule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_data_quality_ruleset", function()
		local result = service.update_data_quality_ruleset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_database", function()
		local result = service.update_database()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_dev_endpoint", function()
		local result = service.update_dev_endpoint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_integration_resource_property", function()
		local result = service.update_integration_resource_property()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_integration_table_properties", function()
		local result = service.update_integration_table_properties()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_job", function()
		local result = service.update_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_job_from_source_control", function()
		local result = service.update_job_from_source_control()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_ml_transform", function()
		local result = service.update_ml_transform()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_partition", function()
		local result = service.update_partition()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_registry", function()
		local result = service.update_registry()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_schema", function()
		local result = service.update_schema()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_source_control_from_job", function()
		local result = service.update_source_control_from_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_table", function()
		local result = service.update_table()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_table_optimizer", function()
		local result = service.update_table_optimizer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_trigger", function()
		local result = service.update_trigger()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_usage_profile", function()
		local result = service.update_usage_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user_defined_function", function()
		local result = service.update_user_defined_function()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_workflow", function()
		local result = service.update_workflow()
		assert.is_true(result.success)
	end)

end)