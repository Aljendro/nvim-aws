-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: internetmonitor

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.internetmonitor")

describe("AWS internetmonitor service testing", function()
	it("should generate a cli skeleton with create_monitor", function()
		local result = service.create_monitor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_monitor", function()
		local result = service.delete_monitor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_health_event", function()
		local result = service.get_health_event()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_internet_event", function()
		local result = service.get_internet_event()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_monitor", function()
		local result = service.get_monitor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_query_results", function()
		local result = service.get_query_results()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_query_status", function()
		local result = service.get_query_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_health_events", function()
		local result = service.list_health_events()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_internet_events", function()
		local result = service.list_internet_events()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_monitors", function()
		local result = service.list_monitors()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_query", function()
		local result = service.start_query()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_query", function()
		local result = service.stop_query()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_monitor", function()
		local result = service.update_monitor()
		assert.is_true(result.success)
	end)

end)
