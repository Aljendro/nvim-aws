-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: kinesis-analytics

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS kinesis-analytics service testing", function()
	it("should generate a cli skeleton for add-application-cloud-watch-logging-option", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "add-application-cloud-watch-logging-option" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-application-input", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "add-application-input" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-application-input-processing-configuration", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "add-application-input-processing-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-application-output", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "add-application-output" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-application-reference-data-source", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "add-application-reference-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-application", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "create-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-application", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "delete-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-application-cloud-watch-logging-option", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "delete-application-cloud-watch-logging-option" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-application-input-processing-configuration", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "delete-application-input-processing-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-application-output", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "delete-application-output" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-application-reference-data-source", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "delete-application-reference-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-application", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "describe-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for discover-input-schema", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "discover-input-schema" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-applications", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "list-applications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-application", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "start-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-application", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "stop-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-application", function()
		local result = common.execute_aws_command_with_input({ "kinesisanalytics", "update-application" })
		assert.is_true(result.success)
	end)

end)