-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: appsync

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.appsync")

describe("AWS appsync service testing", function()
	it("should generate a cli skeleton with associate_api", function()
		local result = service.associate_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_merged_graphql_api", function()
		local result = service.associate_merged_graphql_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_source_graphql_api", function()
		local result = service.associate_source_graphql_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_api", function()
		local result = service.create_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_api_cache", function()
		local result = service.create_api_cache()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_api_key", function()
		local result = service.create_api_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_channel_namespace", function()
		local result = service.create_channel_namespace()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_data_source", function()
		local result = service.create_data_source()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_domain_name", function()
		local result = service.create_domain_name()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_function", function()
		local result = service.create_function()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_graphql_api", function()
		local result = service.create_graphql_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_resolver", function()
		local result = service.create_resolver()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_type", function()
		local result = service.create_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_api", function()
		local result = service.delete_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_api_cache", function()
		local result = service.delete_api_cache()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_api_key", function()
		local result = service.delete_api_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_channel_namespace", function()
		local result = service.delete_channel_namespace()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_data_source", function()
		local result = service.delete_data_source()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_domain_name", function()
		local result = service.delete_domain_name()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_function", function()
		local result = service.delete_function()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_graphql_api", function()
		local result = service.delete_graphql_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_resolver", function()
		local result = service.delete_resolver()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_type", function()
		local result = service.delete_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_api", function()
		local result = service.disassociate_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_merged_graphql_api", function()
		local result = service.disassociate_merged_graphql_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_source_graphql_api", function()
		local result = service.disassociate_source_graphql_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with evaluate_code", function()
		local result = service.evaluate_code()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with evaluate_mapping_template", function()
		local result = service.evaluate_mapping_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with flush_api_cache", function()
		local result = service.flush_api_cache()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_api", function()
		local result = service.get_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_api_association", function()
		local result = service.get_api_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_api_cache", function()
		local result = service.get_api_cache()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_channel_namespace", function()
		local result = service.get_channel_namespace()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_data_source", function()
		local result = service.get_data_source()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_data_source_introspection", function()
		local result = service.get_data_source_introspection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_domain_name", function()
		local result = service.get_domain_name()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_function", function()
		local result = service.get_function()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_graphql_api", function()
		local result = service.get_graphql_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_graphql_api_environment_variables", function()
		local result = service.get_graphql_api_environment_variables()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_resolver", function()
		local result = service.get_resolver()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_schema_creation_status", function()
		local result = service.get_schema_creation_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_source_api_association", function()
		local result = service.get_source_api_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_type", function()
		local result = service.get_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_api_keys", function()
		local result = service.list_api_keys()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_apis", function()
		local result = service.list_apis()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_channel_namespaces", function()
		local result = service.list_channel_namespaces()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_sources", function()
		local result = service.list_data_sources()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_domain_names", function()
		local result = service.list_domain_names()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_functions", function()
		local result = service.list_functions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_graphql_apis", function()
		local result = service.list_graphql_apis()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_resolvers", function()
		local result = service.list_resolvers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_resolvers_by_function", function()
		local result = service.list_resolvers_by_function()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_source_api_associations", function()
		local result = service.list_source_api_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_types", function()
		local result = service.list_types()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_types_by_association", function()
		local result = service.list_types_by_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_graphql_api_environment_variables", function()
		local result = service.put_graphql_api_environment_variables()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_data_source_introspection", function()
		local result = service.start_data_source_introspection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_schema_creation", function()
		local result = service.start_schema_creation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_schema_merge", function()
		local result = service.start_schema_merge()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_api", function()
		local result = service.update_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_api_cache", function()
		local result = service.update_api_cache()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_api_key", function()
		local result = service.update_api_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_channel_namespace", function()
		local result = service.update_channel_namespace()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_data_source", function()
		local result = service.update_data_source()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_domain_name", function()
		local result = service.update_domain_name()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_function", function()
		local result = service.update_function()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_graphql_api", function()
		local result = service.update_graphql_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_resolver", function()
		local result = service.update_resolver()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_source_api_association", function()
		local result = service.update_source_api_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_type", function()
		local result = service.update_type()
		assert.is_true(result.success)
	end)

end)
