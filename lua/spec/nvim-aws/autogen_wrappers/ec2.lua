-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: ec2

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS ec2 service testing", function()
	it("should generate a cli skeleton for accept-address-transfer", function()
		local result = common.execute_aws_command_with_input({ "ec2", "accept-address-transfer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for accept-capacity-reservation-billing-ownership", function()
		local result = common.execute_aws_command_with_input({ "ec2", "accept-capacity-reservation-billing-ownership" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for accept-reserved-instances-exchange-quote", function()
		local result = common.execute_aws_command_with_input({ "ec2", "accept-reserved-instances-exchange-quote" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for accept-transit-gateway-multicast-domain-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "accept-transit-gateway-multicast-domain-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for accept-transit-gateway-peering-attachment", function()
		local result = common.execute_aws_command_with_input({ "ec2", "accept-transit-gateway-peering-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for accept-transit-gateway-vpc-attachment", function()
		local result = common.execute_aws_command_with_input({ "ec2", "accept-transit-gateway-vpc-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for accept-vpc-endpoint-connections", function()
		local result = common.execute_aws_command_with_input({ "ec2", "accept-vpc-endpoint-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for accept-vpc-peering-connection", function()
		local result = common.execute_aws_command_with_input({ "ec2", "accept-vpc-peering-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for advertise-byoip-cidr", function()
		local result = common.execute_aws_command_with_input({ "ec2", "advertise-byoip-cidr" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for allocate-address", function()
		local result = common.execute_aws_command_with_input({ "ec2", "allocate-address" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for allocate-hosts", function()
		local result = common.execute_aws_command_with_input({ "ec2", "allocate-hosts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for allocate-ipam-pool-cidr", function()
		local result = common.execute_aws_command_with_input({ "ec2", "allocate-ipam-pool-cidr" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for apply-security-groups-to-client-vpn-target-network", function()
		local result = common.execute_aws_command_with_input({ "ec2", "apply-security-groups-to-client-vpn-target-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for assign-ipv6-addresses", function()
		local result = common.execute_aws_command_with_input({ "ec2", "assign-ipv6-addresses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for assign-private-ip-addresses", function()
		local result = common.execute_aws_command_with_input({ "ec2", "assign-private-ip-addresses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for assign-private-nat-gateway-address", function()
		local result = common.execute_aws_command_with_input({ "ec2", "assign-private-nat-gateway-address" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-address", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-address" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-capacity-reservation-billing-owner", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-capacity-reservation-billing-owner" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-client-vpn-target-network", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-client-vpn-target-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-dhcp-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-dhcp-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-enclave-certificate-iam-role", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-enclave-certificate-iam-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-iam-instance-profile", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-iam-instance-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-instance-event-window", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-instance-event-window" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-ipam-byoasn", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-ipam-byoasn" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-ipam-resource-discovery", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-ipam-resource-discovery" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-nat-gateway-address", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-nat-gateway-address" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-route-server", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-route-server" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-route-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-route-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-security-group-vpc", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-security-group-vpc" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-subnet-cidr-block", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-subnet-cidr-block" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-transit-gateway-multicast-domain", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-transit-gateway-multicast-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-transit-gateway-policy-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-transit-gateway-policy-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-transit-gateway-route-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-transit-gateway-route-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-trunk-interface", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-trunk-interface" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-vpc-cidr-block", function()
		local result = common.execute_aws_command_with_input({ "ec2", "associate-vpc-cidr-block" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-classic-link-vpc", function()
		local result = common.execute_aws_command_with_input({ "ec2", "attach-classic-link-vpc" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-internet-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "attach-internet-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-network-interface", function()
		local result = common.execute_aws_command_with_input({ "ec2", "attach-network-interface" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-verified-access-trust-provider", function()
		local result = common.execute_aws_command_with_input({ "ec2", "attach-verified-access-trust-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-volume", function()
		local result = common.execute_aws_command_with_input({ "ec2", "attach-volume" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-vpn-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "attach-vpn-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for authorize-client-vpn-ingress", function()
		local result = common.execute_aws_command_with_input({ "ec2", "authorize-client-vpn-ingress" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for authorize-security-group-egress", function()
		local result = common.execute_aws_command_with_input({ "ec2", "authorize-security-group-egress" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for authorize-security-group-ingress", function()
		local result = common.execute_aws_command_with_input({ "ec2", "authorize-security-group-ingress" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for bundle-instance", function()
		local result = common.execute_aws_command_with_input({ "ec2", "bundle-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-bundle-task", function()
		local result = common.execute_aws_command_with_input({ "ec2", "cancel-bundle-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-capacity-reservation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "cancel-capacity-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-capacity-reservation-fleets", function()
		local result = common.execute_aws_command_with_input({ "ec2", "cancel-capacity-reservation-fleets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-conversion-task", function()
		local result = common.execute_aws_command_with_input({ "ec2", "cancel-conversion-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-declarative-policies-report", function()
		local result = common.execute_aws_command_with_input({ "ec2", "cancel-declarative-policies-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-export-task", function()
		local result = common.execute_aws_command_with_input({ "ec2", "cancel-export-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-image-launch-permission", function()
		local result = common.execute_aws_command_with_input({ "ec2", "cancel-image-launch-permission" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-import-task", function()
		local result = common.execute_aws_command_with_input({ "ec2", "cancel-import-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-reserved-instances-listing", function()
		local result = common.execute_aws_command_with_input({ "ec2", "cancel-reserved-instances-listing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-spot-fleet-requests", function()
		local result = common.execute_aws_command_with_input({ "ec2", "cancel-spot-fleet-requests" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-spot-instance-requests", function()
		local result = common.execute_aws_command_with_input({ "ec2", "cancel-spot-instance-requests" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for confirm-product-instance", function()
		local result = common.execute_aws_command_with_input({ "ec2", "confirm-product-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for copy-fpga-image", function()
		local result = common.execute_aws_command_with_input({ "ec2", "copy-fpga-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for copy-image", function()
		local result = common.execute_aws_command_with_input({ "ec2", "copy-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for copy-snapshot", function()
		local result = common.execute_aws_command_with_input({ "ec2", "copy-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-capacity-reservation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-capacity-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-capacity-reservation-by-splitting", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-capacity-reservation-by-splitting" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-capacity-reservation-fleet", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-capacity-reservation-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-carrier-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-carrier-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-client-vpn-endpoint", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-client-vpn-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-client-vpn-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-client-vpn-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-coip-cidr", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-coip-cidr" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-coip-pool", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-coip-pool" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-customer-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-customer-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-default-subnet", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-default-subnet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-default-vpc", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-default-vpc" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-dhcp-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-dhcp-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-egress-only-internet-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-egress-only-internet-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-fleet", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-flow-logs", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-flow-logs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-fpga-image", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-fpga-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-image", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-instance-connect-endpoint", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-instance-connect-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-instance-event-window", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-instance-event-window" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-instance-export-task", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-instance-export-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-internet-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-internet-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-ipam", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-ipam" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-ipam-external-resource-verification-token", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-ipam-external-resource-verification-token" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-ipam-pool", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-ipam-pool" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-ipam-resource-discovery", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-ipam-resource-discovery" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-ipam-scope", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-ipam-scope" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-key-pair", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-key-pair" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-launch-template", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-launch-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-launch-template-version", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-launch-template-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-local-gateway-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-local-gateway-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-local-gateway-route-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-local-gateway-route-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-local-gateway-route-table-virtual-interface-group-association", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-local-gateway-route-table-virtual-interface-group-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-local-gateway-route-table-vpc-association", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-local-gateway-route-table-vpc-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-managed-prefix-list", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-managed-prefix-list" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-nat-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-nat-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-network-acl", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-network-acl" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-network-acl-entry", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-network-acl-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-network-insights-access-scope", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-network-insights-access-scope" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-network-insights-path", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-network-insights-path" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-network-interface", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-network-interface" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-network-interface-permission", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-network-interface-permission" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-placement-group", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-placement-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-public-ipv4-pool", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-public-ipv4-pool" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-replace-root-volume-task", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-replace-root-volume-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-reserved-instances-listing", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-reserved-instances-listing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-restore-image-task", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-restore-image-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-route-server", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-route-server" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-route-server-endpoint", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-route-server-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-route-server-peer", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-route-server-peer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-route-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-route-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-security-group", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-security-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-snapshot", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-snapshots", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-snapshots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-spot-datafeed-subscription", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-spot-datafeed-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-store-image-task", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-store-image-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-subnet", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-subnet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-subnet-cidr-reservation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-subnet-cidr-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-tags", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-traffic-mirror-filter", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-traffic-mirror-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-traffic-mirror-filter-rule", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-traffic-mirror-filter-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-traffic-mirror-session", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-traffic-mirror-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-traffic-mirror-target", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-traffic-mirror-target" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-transit-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway-connect", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-transit-gateway-connect" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway-connect-peer", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-transit-gateway-connect-peer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway-multicast-domain", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-transit-gateway-multicast-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway-peering-attachment", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-transit-gateway-peering-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway-policy-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-transit-gateway-policy-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway-prefix-list-reference", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-transit-gateway-prefix-list-reference" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-transit-gateway-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway-route-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-transit-gateway-route-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway-route-table-announcement", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-transit-gateway-route-table-announcement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway-vpc-attachment", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-transit-gateway-vpc-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-verified-access-endpoint", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-verified-access-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-verified-access-group", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-verified-access-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-verified-access-instance", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-verified-access-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-verified-access-trust-provider", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-verified-access-trust-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-volume", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-volume" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-vpc" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc-block-public-access-exclusion", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-vpc-block-public-access-exclusion" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc-endpoint", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-vpc-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc-endpoint-connection-notification", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-vpc-endpoint-connection-notification" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc-endpoint-service-configuration", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-vpc-endpoint-service-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc-peering-connection", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-vpc-peering-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpn-connection", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-vpn-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpn-connection-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-vpn-connection-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpn-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "create-vpn-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-carrier-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-carrier-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-client-vpn-endpoint", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-client-vpn-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-client-vpn-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-client-vpn-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-coip-cidr", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-coip-cidr" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-coip-pool", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-coip-pool" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-customer-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-customer-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-dhcp-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-dhcp-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-egress-only-internet-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-egress-only-internet-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-fleets", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-fleets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-flow-logs", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-flow-logs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-fpga-image", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-fpga-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-instance-connect-endpoint", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-instance-connect-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-instance-event-window", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-instance-event-window" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-internet-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-internet-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ipam", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-ipam" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ipam-external-resource-verification-token", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-ipam-external-resource-verification-token" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ipam-pool", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-ipam-pool" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ipam-resource-discovery", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-ipam-resource-discovery" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ipam-scope", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-ipam-scope" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-key-pair", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-key-pair" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-launch-template", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-launch-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-launch-template-versions", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-launch-template-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-local-gateway-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-local-gateway-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-local-gateway-route-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-local-gateway-route-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-local-gateway-route-table-virtual-interface-group-association", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-local-gateway-route-table-virtual-interface-group-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-local-gateway-route-table-vpc-association", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-local-gateway-route-table-vpc-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-managed-prefix-list", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-managed-prefix-list" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-nat-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-nat-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-network-acl", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-network-acl" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-network-acl-entry", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-network-acl-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-network-insights-access-scope", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-network-insights-access-scope" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-network-insights-access-scope-analysis", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-network-insights-access-scope-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-network-insights-analysis", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-network-insights-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-network-insights-path", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-network-insights-path" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-network-interface", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-network-interface" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-network-interface-permission", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-network-interface-permission" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-placement-group", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-placement-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-public-ipv4-pool", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-public-ipv4-pool" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-queued-reserved-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-queued-reserved-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-route-server", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-route-server" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-route-server-endpoint", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-route-server-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-route-server-peer", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-route-server-peer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-route-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-route-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-security-group", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-security-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-snapshot", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-spot-datafeed-subscription", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-spot-datafeed-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-subnet", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-subnet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-subnet-cidr-reservation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-subnet-cidr-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-tags", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-traffic-mirror-filter", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-traffic-mirror-filter" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-traffic-mirror-filter-rule", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-traffic-mirror-filter-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-traffic-mirror-session", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-traffic-mirror-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-traffic-mirror-target", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-traffic-mirror-target" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transit-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-transit-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transit-gateway-connect", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-transit-gateway-connect" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transit-gateway-connect-peer", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-transit-gateway-connect-peer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transit-gateway-multicast-domain", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-transit-gateway-multicast-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transit-gateway-peering-attachment", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-transit-gateway-peering-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transit-gateway-policy-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-transit-gateway-policy-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transit-gateway-prefix-list-reference", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-transit-gateway-prefix-list-reference" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transit-gateway-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-transit-gateway-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transit-gateway-route-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-transit-gateway-route-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transit-gateway-route-table-announcement", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-transit-gateway-route-table-announcement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-transit-gateway-vpc-attachment", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-transit-gateway-vpc-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-verified-access-endpoint", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-verified-access-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-verified-access-group", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-verified-access-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-verified-access-instance", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-verified-access-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-verified-access-trust-provider", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-verified-access-trust-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-volume", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-volume" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpc", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-vpc" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpc-block-public-access-exclusion", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-vpc-block-public-access-exclusion" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpc-endpoint-connection-notifications", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-vpc-endpoint-connection-notifications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpc-endpoint-service-configurations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-vpc-endpoint-service-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpc-endpoints", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-vpc-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpc-peering-connection", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-vpc-peering-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpn-connection", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-vpn-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpn-connection-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-vpn-connection-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-vpn-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "delete-vpn-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deprovision-byoip-cidr", function()
		local result = common.execute_aws_command_with_input({ "ec2", "deprovision-byoip-cidr" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deprovision-ipam-byoasn", function()
		local result = common.execute_aws_command_with_input({ "ec2", "deprovision-ipam-byoasn" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deprovision-ipam-pool-cidr", function()
		local result = common.execute_aws_command_with_input({ "ec2", "deprovision-ipam-pool-cidr" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deprovision-public-ipv4-pool-cidr", function()
		local result = common.execute_aws_command_with_input({ "ec2", "deprovision-public-ipv4-pool-cidr" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-image", function()
		local result = common.execute_aws_command_with_input({ "ec2", "deregister-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-instance-event-notification-attributes", function()
		local result = common.execute_aws_command_with_input({ "ec2", "deregister-instance-event-notification-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-transit-gateway-multicast-group-members", function()
		local result = common.execute_aws_command_with_input({ "ec2", "deregister-transit-gateway-multicast-group-members" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-transit-gateway-multicast-group-sources", function()
		local result = common.execute_aws_command_with_input({ "ec2", "deregister-transit-gateway-multicast-group-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-account-attributes", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-account-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-address-transfers", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-address-transfers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-addresses", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-addresses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-addresses-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-addresses-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-aggregate-id-format", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-aggregate-id-format" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-availability-zones", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-availability-zones" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-aws-network-performance-metric-subscriptions", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-aws-network-performance-metric-subscriptions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-bundle-tasks", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-bundle-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-byoip-cidrs", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-byoip-cidrs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-capacity-block-extension-history", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-capacity-block-extension-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-capacity-block-extension-offerings", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-capacity-block-extension-offerings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-capacity-block-offerings", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-capacity-block-offerings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-capacity-reservation-billing-requests", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-capacity-reservation-billing-requests" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-capacity-reservation-fleets", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-capacity-reservation-fleets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-capacity-reservations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-capacity-reservations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-carrier-gateways", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-carrier-gateways" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-classic-link-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-classic-link-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-client-vpn-authorization-rules", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-client-vpn-authorization-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-client-vpn-connections", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-client-vpn-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-client-vpn-endpoints", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-client-vpn-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-client-vpn-routes", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-client-vpn-routes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-client-vpn-target-networks", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-client-vpn-target-networks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-coip-pools", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-coip-pools" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-conversion-tasks", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-conversion-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-customer-gateways", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-customer-gateways" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-declarative-policies-reports", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-declarative-policies-reports" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-dhcp-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-dhcp-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-egress-only-internet-gateways", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-egress-only-internet-gateways" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-elastic-gpus", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-elastic-gpus" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-export-image-tasks", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-export-image-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-export-tasks", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-export-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fast-launch-images", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-fast-launch-images" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fast-snapshot-restores", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-fast-snapshot-restores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-history", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-fleet-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleet-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-fleet-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fleets", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-fleets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-flow-logs", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-flow-logs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fpga-image-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-fpga-image-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-fpga-images", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-fpga-images" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-host-reservation-offerings", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-host-reservation-offerings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-host-reservations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-host-reservations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-hosts", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-hosts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-iam-instance-profile-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-iam-instance-profile-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-id-format", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-id-format" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-identity-id-format", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-identity-id-format" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-image-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-image-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-images", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-images" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-import-image-tasks", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-import-image-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-import-snapshot-tasks", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-import-snapshot-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-instance-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-connect-endpoints", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-instance-connect-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-credit-specifications", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-instance-credit-specifications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-event-notification-attributes", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-instance-event-notification-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-event-windows", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-instance-event-windows" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-image-metadata", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-instance-image-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-status", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-instance-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-topology", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-instance-topology" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-type-offerings", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-instance-type-offerings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-types", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-instance-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-internet-gateways", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-internet-gateways" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ipam-byoasn", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-ipam-byoasn" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ipam-external-resource-verification-tokens", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-ipam-external-resource-verification-tokens" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ipam-pools", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-ipam-pools" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ipam-resource-discoveries", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-ipam-resource-discoveries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ipam-resource-discovery-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-ipam-resource-discovery-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ipam-scopes", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-ipam-scopes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ipams", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-ipams" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ipv6-pools", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-ipv6-pools" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-key-pairs", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-key-pairs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-launch-template-versions", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-launch-template-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-launch-templates", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-launch-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-local-gateway-route-table-virtual-interface-group-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-local-gateway-route-table-virtual-interface-group-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-local-gateway-route-table-vpc-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-local-gateway-route-table-vpc-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-local-gateway-route-tables", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-local-gateway-route-tables" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-local-gateway-virtual-interface-groups", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-local-gateway-virtual-interface-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-local-gateway-virtual-interfaces", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-local-gateway-virtual-interfaces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-local-gateways", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-local-gateways" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-locked-snapshots", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-locked-snapshots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-mac-hosts", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-mac-hosts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-managed-prefix-lists", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-managed-prefix-lists" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-moving-addresses", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-moving-addresses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-nat-gateways", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-nat-gateways" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-network-acls", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-network-acls" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-network-insights-access-scope-analyses", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-network-insights-access-scope-analyses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-network-insights-access-scopes", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-network-insights-access-scopes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-network-insights-analyses", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-network-insights-analyses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-network-insights-paths", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-network-insights-paths" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-network-interface-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-network-interface-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-network-interface-permissions", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-network-interface-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-network-interfaces", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-network-interfaces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-placement-groups", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-placement-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-prefix-lists", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-prefix-lists" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-principal-id-format", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-principal-id-format" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-public-ipv4-pools", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-public-ipv4-pools" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-regions", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-regions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-replace-root-volume-tasks", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-replace-root-volume-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-reserved-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-reserved-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-reserved-instances-listings", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-reserved-instances-listings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-reserved-instances-modifications", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-reserved-instances-modifications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-reserved-instances-offerings", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-reserved-instances-offerings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-route-server-endpoints", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-route-server-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-route-server-peers", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-route-server-peers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-route-servers", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-route-servers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-route-tables", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-route-tables" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-scheduled-instance-availability", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-scheduled-instance-availability" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-scheduled-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-scheduled-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-security-group-references", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-security-group-references" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-security-group-rules", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-security-group-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-security-group-vpc-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-security-group-vpc-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-security-groups", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-security-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-snapshot-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-snapshot-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-snapshot-tier-status", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-snapshot-tier-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-snapshots", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-snapshots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-spot-datafeed-subscription", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-spot-datafeed-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-spot-fleet-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-spot-fleet-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-spot-fleet-request-history", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-spot-fleet-request-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-spot-fleet-requests", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-spot-fleet-requests" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-spot-instance-requests", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-spot-instance-requests" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-spot-price-history", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-spot-price-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-stale-security-groups", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-stale-security-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-store-image-tasks", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-store-image-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-subnets", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-subnets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-tags", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-traffic-mirror-filter-rules", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-traffic-mirror-filter-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-traffic-mirror-filters", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-traffic-mirror-filters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-traffic-mirror-sessions", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-traffic-mirror-sessions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-traffic-mirror-targets", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-traffic-mirror-targets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-transit-gateway-attachments", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-transit-gateway-attachments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-transit-gateway-connect-peers", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-transit-gateway-connect-peers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-transit-gateway-connects", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-transit-gateway-connects" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-transit-gateway-multicast-domains", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-transit-gateway-multicast-domains" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-transit-gateway-peering-attachments", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-transit-gateway-peering-attachments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-transit-gateway-policy-tables", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-transit-gateway-policy-tables" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-transit-gateway-route-table-announcements", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-transit-gateway-route-table-announcements" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-transit-gateway-route-tables", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-transit-gateway-route-tables" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-transit-gateway-vpc-attachments", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-transit-gateway-vpc-attachments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-transit-gateways", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-transit-gateways" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-trunk-interface-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-trunk-interface-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-verified-access-endpoints", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-verified-access-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-verified-access-groups", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-verified-access-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-verified-access-instance-logging-configurations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-verified-access-instance-logging-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-verified-access-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-verified-access-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-verified-access-trust-providers", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-verified-access-trust-providers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-volume-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-volume-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-volume-status", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-volume-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-volumes", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-volumes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-volumes-modifications", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-volumes-modifications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-block-public-access-exclusions", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-block-public-access-exclusions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-block-public-access-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-block-public-access-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-classic-link", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-classic-link" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-classic-link-dns-support", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-classic-link-dns-support" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-endpoint-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-endpoint-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-endpoint-connection-notifications", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-endpoint-connection-notifications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-endpoint-connections", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-endpoint-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-endpoint-service-configurations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-endpoint-service-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-endpoint-service-permissions", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-endpoint-service-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-endpoint-services", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-endpoint-services" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-endpoints", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpc-peering-connections", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpc-peering-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpcs", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpcs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpn-connections", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpn-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-vpn-gateways", function()
		local result = common.execute_aws_command_with_input({ "ec2", "describe-vpn-gateways" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-classic-link-vpc", function()
		local result = common.execute_aws_command_with_input({ "ec2", "detach-classic-link-vpc" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-internet-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "detach-internet-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-network-interface", function()
		local result = common.execute_aws_command_with_input({ "ec2", "detach-network-interface" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-verified-access-trust-provider", function()
		local result = common.execute_aws_command_with_input({ "ec2", "detach-verified-access-trust-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-volume", function()
		local result = common.execute_aws_command_with_input({ "ec2", "detach-volume" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-vpn-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "detach-vpn-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-address-transfer", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-address-transfer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-allowed-images-settings", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-allowed-images-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-aws-network-performance-metric-subscription", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-aws-network-performance-metric-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-ebs-encryption-by-default", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-ebs-encryption-by-default" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-fast-launch", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-fast-launch" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-fast-snapshot-restores", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-fast-snapshot-restores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-image", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-image-block-public-access", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-image-block-public-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-image-deprecation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-image-deprecation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-image-deregistration-protection", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-image-deregistration-protection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-ipam-organization-admin-account", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-ipam-organization-admin-account" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-route-server-propagation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-route-server-propagation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-serial-console-access", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-serial-console-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-snapshot-block-public-access", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-snapshot-block-public-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-transit-gateway-route-table-propagation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-transit-gateway-route-table-propagation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-vgw-route-propagation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-vgw-route-propagation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-vpc-classic-link", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-vpc-classic-link" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-vpc-classic-link-dns-support", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disable-vpc-classic-link-dns-support" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-address", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-address" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-capacity-reservation-billing-owner", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-capacity-reservation-billing-owner" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-client-vpn-target-network", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-client-vpn-target-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-enclave-certificate-iam-role", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-enclave-certificate-iam-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-iam-instance-profile", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-iam-instance-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-instance-event-window", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-instance-event-window" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-ipam-byoasn", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-ipam-byoasn" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-ipam-resource-discovery", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-ipam-resource-discovery" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-nat-gateway-address", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-nat-gateway-address" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-route-server", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-route-server" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-route-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-route-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-security-group-vpc", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-security-group-vpc" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-subnet-cidr-block", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-subnet-cidr-block" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-transit-gateway-multicast-domain", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-transit-gateway-multicast-domain" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-transit-gateway-policy-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-transit-gateway-policy-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-transit-gateway-route-table", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-transit-gateway-route-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-trunk-interface", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-trunk-interface" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-vpc-cidr-block", function()
		local result = common.execute_aws_command_with_input({ "ec2", "disassociate-vpc-cidr-block" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-address-transfer", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-address-transfer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-allowed-images-settings", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-allowed-images-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-aws-network-performance-metric-subscription", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-aws-network-performance-metric-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-ebs-encryption-by-default", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-ebs-encryption-by-default" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-fast-launch", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-fast-launch" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-fast-snapshot-restores", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-fast-snapshot-restores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-image", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-image-block-public-access", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-image-block-public-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-image-deprecation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-image-deprecation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-image-deregistration-protection", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-image-deregistration-protection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-ipam-organization-admin-account", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-ipam-organization-admin-account" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-reachability-analyzer-organization-sharing", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-reachability-analyzer-organization-sharing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-route-server-propagation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-route-server-propagation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-serial-console-access", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-serial-console-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-snapshot-block-public-access", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-snapshot-block-public-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-transit-gateway-route-table-propagation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-transit-gateway-route-table-propagation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-vgw-route-propagation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-vgw-route-propagation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-volume-io", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-volume-io" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-vpc-classic-link", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-vpc-classic-link" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-vpc-classic-link-dns-support", function()
		local result = common.execute_aws_command_with_input({ "ec2", "enable-vpc-classic-link-dns-support" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for export-client-vpn-client-certificate-revocation-list", function()
		local result = common.execute_aws_command_with_input({ "ec2", "export-client-vpn-client-certificate-revocation-list" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for export-client-vpn-client-configuration", function()
		local result = common.execute_aws_command_with_input({ "ec2", "export-client-vpn-client-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for export-image", function()
		local result = common.execute_aws_command_with_input({ "ec2", "export-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for export-transit-gateway-routes", function()
		local result = common.execute_aws_command_with_input({ "ec2", "export-transit-gateway-routes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for export-verified-access-instance-client-configuration", function()
		local result = common.execute_aws_command_with_input({ "ec2", "export-verified-access-instance-client-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-allowed-images-settings", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-allowed-images-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-associated-enclave-certificate-iam-roles", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-associated-enclave-certificate-iam-roles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-associated-ipv6-pool-cidrs", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-associated-ipv6-pool-cidrs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-aws-network-performance-data", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-aws-network-performance-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-capacity-reservation-usage", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-capacity-reservation-usage" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-coip-pool-usage", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-coip-pool-usage" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-console-output", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-console-output" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-console-screenshot", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-console-screenshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-declarative-policies-report-summary", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-declarative-policies-report-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-default-credit-specification", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-default-credit-specification" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ebs-default-kms-key-id", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-ebs-default-kms-key-id" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ebs-encryption-by-default", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-ebs-encryption-by-default" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-flow-logs-integration-template", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-flow-logs-integration-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-groups-for-capacity-reservation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-groups-for-capacity-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-host-reservation-purchase-preview", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-host-reservation-purchase-preview" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-image-block-public-access-state", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-image-block-public-access-state" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance-metadata-defaults", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-instance-metadata-defaults" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance-tpm-ek-pub", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-instance-tpm-ek-pub" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance-types-from-instance-requirements", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-instance-types-from-instance-requirements" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance-uefi-data", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-instance-uefi-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ipam-address-history", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-ipam-address-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ipam-discovered-accounts", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-ipam-discovered-accounts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ipam-discovered-public-addresses", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-ipam-discovered-public-addresses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ipam-discovered-resource-cidrs", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-ipam-discovered-resource-cidrs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ipam-pool-allocations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-ipam-pool-allocations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ipam-pool-cidrs", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-ipam-pool-cidrs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ipam-resource-cidrs", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-ipam-resource-cidrs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-launch-template-data", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-launch-template-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-managed-prefix-list-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-managed-prefix-list-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-managed-prefix-list-entries", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-managed-prefix-list-entries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-network-insights-access-scope-analysis-findings", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-network-insights-access-scope-analysis-findings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-network-insights-access-scope-content", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-network-insights-access-scope-content" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-password-data", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-password-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-reserved-instances-exchange-quote", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-reserved-instances-exchange-quote" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-route-server-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-route-server-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-route-server-propagations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-route-server-propagations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-route-server-routing-database", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-route-server-routing-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-security-groups-for-vpc", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-security-groups-for-vpc" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-serial-console-access-status", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-serial-console-access-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-snapshot-block-public-access-state", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-snapshot-block-public-access-state" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-spot-placement-scores", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-spot-placement-scores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-subnet-cidr-reservations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-subnet-cidr-reservations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transit-gateway-attachment-propagations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-transit-gateway-attachment-propagations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transit-gateway-multicast-domain-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-transit-gateway-multicast-domain-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transit-gateway-policy-table-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-transit-gateway-policy-table-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transit-gateway-policy-table-entries", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-transit-gateway-policy-table-entries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transit-gateway-prefix-list-references", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-transit-gateway-prefix-list-references" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transit-gateway-route-table-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-transit-gateway-route-table-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transit-gateway-route-table-propagations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-transit-gateway-route-table-propagations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-verified-access-endpoint-policy", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-verified-access-endpoint-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-verified-access-endpoint-targets", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-verified-access-endpoint-targets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-verified-access-group-policy", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-verified-access-group-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-vpn-connection-device-sample-configuration", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-vpn-connection-device-sample-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-vpn-connection-device-types", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-vpn-connection-device-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-vpn-tunnel-replacement-status", function()
		local result = common.execute_aws_command_with_input({ "ec2", "get-vpn-tunnel-replacement-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-client-vpn-client-certificate-revocation-list", function()
		local result = common.execute_aws_command_with_input({ "ec2", "import-client-vpn-client-certificate-revocation-list" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-image", function()
		local result = common.execute_aws_command_with_input({ "ec2", "import-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-instance", function()
		local result = common.execute_aws_command_with_input({ "ec2", "import-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-key-pair", function()
		local result = common.execute_aws_command_with_input({ "ec2", "import-key-pair" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-snapshot", function()
		local result = common.execute_aws_command_with_input({ "ec2", "import-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-volume", function()
		local result = common.execute_aws_command_with_input({ "ec2", "import-volume" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-images-in-recycle-bin", function()
		local result = common.execute_aws_command_with_input({ "ec2", "list-images-in-recycle-bin" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-snapshots-in-recycle-bin", function()
		local result = common.execute_aws_command_with_input({ "ec2", "list-snapshots-in-recycle-bin" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for lock-snapshot", function()
		local result = common.execute_aws_command_with_input({ "ec2", "lock-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-address-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-address-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-availability-zone-group", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-availability-zone-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-capacity-reservation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-capacity-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-capacity-reservation-fleet", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-capacity-reservation-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-client-vpn-endpoint", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-client-vpn-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-default-credit-specification", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-default-credit-specification" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-ebs-default-kms-key-id", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-ebs-default-kms-key-id" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-fleet", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-fpga-image-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-fpga-image-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-hosts", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-hosts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-id-format", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-id-format" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-identity-id-format", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-identity-id-format" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-image-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-image-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-instance-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-instance-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-instance-capacity-reservation-attributes", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-instance-capacity-reservation-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-instance-cpu-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-instance-cpu-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-instance-credit-specification", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-instance-credit-specification" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-instance-event-start-time", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-instance-event-start-time" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-instance-event-window", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-instance-event-window" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-instance-maintenance-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-instance-maintenance-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-instance-metadata-defaults", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-instance-metadata-defaults" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-instance-metadata-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-instance-metadata-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-instance-network-performance-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-instance-network-performance-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-instance-placement", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-instance-placement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-ipam", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-ipam" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-ipam-pool", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-ipam-pool" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-ipam-resource-cidr", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-ipam-resource-cidr" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-ipam-resource-discovery", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-ipam-resource-discovery" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-ipam-scope", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-ipam-scope" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-launch-template", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-launch-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-local-gateway-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-local-gateway-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-managed-prefix-list", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-managed-prefix-list" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-network-interface-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-network-interface-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-private-dns-name-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-private-dns-name-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-reserved-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-reserved-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-route-server", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-route-server" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-security-group-rules", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-security-group-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-snapshot-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-snapshot-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-snapshot-tier", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-snapshot-tier" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-spot-fleet-request", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-spot-fleet-request" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-subnet-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-subnet-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-traffic-mirror-filter-network-services", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-traffic-mirror-filter-network-services" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-traffic-mirror-filter-rule", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-traffic-mirror-filter-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-traffic-mirror-session", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-traffic-mirror-session" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-transit-gateway", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-transit-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-transit-gateway-prefix-list-reference", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-transit-gateway-prefix-list-reference" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-transit-gateway-vpc-attachment", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-transit-gateway-vpc-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-verified-access-endpoint", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-verified-access-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-verified-access-endpoint-policy", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-verified-access-endpoint-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-verified-access-group", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-verified-access-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-verified-access-group-policy", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-verified-access-group-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-verified-access-instance", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-verified-access-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-verified-access-instance-logging-configuration", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-verified-access-instance-logging-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-verified-access-trust-provider", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-verified-access-trust-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-volume", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-volume" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-volume-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-volume-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpc-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpc-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpc-block-public-access-exclusion", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpc-block-public-access-exclusion" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpc-block-public-access-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpc-block-public-access-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpc-endpoint", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpc-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpc-endpoint-connection-notification", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpc-endpoint-connection-notification" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpc-endpoint-service-configuration", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpc-endpoint-service-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpc-endpoint-service-payer-responsibility", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpc-endpoint-service-payer-responsibility" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpc-endpoint-service-permissions", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpc-endpoint-service-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpc-peering-connection-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpc-peering-connection-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpc-tenancy", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpc-tenancy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpn-connection", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpn-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpn-connection-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpn-connection-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpn-tunnel-certificate", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpn-tunnel-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-vpn-tunnel-options", function()
		local result = common.execute_aws_command_with_input({ "ec2", "modify-vpn-tunnel-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for monitor-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "monitor-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for move-address-to-vpc", function()
		local result = common.execute_aws_command_with_input({ "ec2", "move-address-to-vpc" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for move-byoip-cidr-to-ipam", function()
		local result = common.execute_aws_command_with_input({ "ec2", "move-byoip-cidr-to-ipam" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for move-capacity-reservation-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "move-capacity-reservation-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for provision-byoip-cidr", function()
		local result = common.execute_aws_command_with_input({ "ec2", "provision-byoip-cidr" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for provision-ipam-byoasn", function()
		local result = common.execute_aws_command_with_input({ "ec2", "provision-ipam-byoasn" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for provision-ipam-pool-cidr", function()
		local result = common.execute_aws_command_with_input({ "ec2", "provision-ipam-pool-cidr" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for provision-public-ipv4-pool-cidr", function()
		local result = common.execute_aws_command_with_input({ "ec2", "provision-public-ipv4-pool-cidr" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for purchase-capacity-block", function()
		local result = common.execute_aws_command_with_input({ "ec2", "purchase-capacity-block" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for purchase-capacity-block-extension", function()
		local result = common.execute_aws_command_with_input({ "ec2", "purchase-capacity-block-extension" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for purchase-host-reservation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "purchase-host-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for purchase-reserved-instances-offering", function()
		local result = common.execute_aws_command_with_input({ "ec2", "purchase-reserved-instances-offering" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for purchase-scheduled-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "purchase-scheduled-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reboot-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reboot-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-image", function()
		local result = common.execute_aws_command_with_input({ "ec2", "register-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-instance-event-notification-attributes", function()
		local result = common.execute_aws_command_with_input({ "ec2", "register-instance-event-notification-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-transit-gateway-multicast-group-members", function()
		local result = common.execute_aws_command_with_input({ "ec2", "register-transit-gateway-multicast-group-members" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-transit-gateway-multicast-group-sources", function()
		local result = common.execute_aws_command_with_input({ "ec2", "register-transit-gateway-multicast-group-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-capacity-reservation-billing-ownership", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reject-capacity-reservation-billing-ownership" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-transit-gateway-multicast-domain-associations", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reject-transit-gateway-multicast-domain-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-transit-gateway-peering-attachment", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reject-transit-gateway-peering-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-transit-gateway-vpc-attachment", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reject-transit-gateway-vpc-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-vpc-endpoint-connections", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reject-vpc-endpoint-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-vpc-peering-connection", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reject-vpc-peering-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for release-address", function()
		local result = common.execute_aws_command_with_input({ "ec2", "release-address" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for release-hosts", function()
		local result = common.execute_aws_command_with_input({ "ec2", "release-hosts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for release-ipam-pool-allocation", function()
		local result = common.execute_aws_command_with_input({ "ec2", "release-ipam-pool-allocation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for replace-iam-instance-profile-association", function()
		local result = common.execute_aws_command_with_input({ "ec2", "replace-iam-instance-profile-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for replace-image-criteria-in-allowed-images-settings", function()
		local result = common.execute_aws_command_with_input({ "ec2", "replace-image-criteria-in-allowed-images-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for replace-network-acl-association", function()
		local result = common.execute_aws_command_with_input({ "ec2", "replace-network-acl-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for replace-network-acl-entry", function()
		local result = common.execute_aws_command_with_input({ "ec2", "replace-network-acl-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for replace-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "replace-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for replace-route-table-association", function()
		local result = common.execute_aws_command_with_input({ "ec2", "replace-route-table-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for replace-transit-gateway-route", function()
		local result = common.execute_aws_command_with_input({ "ec2", "replace-transit-gateway-route" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for replace-vpn-tunnel", function()
		local result = common.execute_aws_command_with_input({ "ec2", "replace-vpn-tunnel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for report-instance-status", function()
		local result = common.execute_aws_command_with_input({ "ec2", "report-instance-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for request-spot-fleet", function()
		local result = common.execute_aws_command_with_input({ "ec2", "request-spot-fleet" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for request-spot-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "request-spot-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reset-address-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reset-address-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reset-ebs-default-kms-key-id", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reset-ebs-default-kms-key-id" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reset-fpga-image-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reset-fpga-image-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reset-image-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reset-image-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reset-instance-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reset-instance-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reset-network-interface-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reset-network-interface-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reset-snapshot-attribute", function()
		local result = common.execute_aws_command_with_input({ "ec2", "reset-snapshot-attribute" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-address-to-classic", function()
		local result = common.execute_aws_command_with_input({ "ec2", "restore-address-to-classic" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-image-from-recycle-bin", function()
		local result = common.execute_aws_command_with_input({ "ec2", "restore-image-from-recycle-bin" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-managed-prefix-list-version", function()
		local result = common.execute_aws_command_with_input({ "ec2", "restore-managed-prefix-list-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-snapshot-from-recycle-bin", function()
		local result = common.execute_aws_command_with_input({ "ec2", "restore-snapshot-from-recycle-bin" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-snapshot-tier", function()
		local result = common.execute_aws_command_with_input({ "ec2", "restore-snapshot-tier" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for revoke-client-vpn-ingress", function()
		local result = common.execute_aws_command_with_input({ "ec2", "revoke-client-vpn-ingress" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for revoke-security-group-egress", function()
		local result = common.execute_aws_command_with_input({ "ec2", "revoke-security-group-egress" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for revoke-security-group-ingress", function()
		local result = common.execute_aws_command_with_input({ "ec2", "revoke-security-group-ingress" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for run-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "run-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for run-scheduled-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "run-scheduled-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-local-gateway-routes", function()
		local result = common.execute_aws_command_with_input({ "ec2", "search-local-gateway-routes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-transit-gateway-multicast-groups", function()
		local result = common.execute_aws_command_with_input({ "ec2", "search-transit-gateway-multicast-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-transit-gateway-routes", function()
		local result = common.execute_aws_command_with_input({ "ec2", "search-transit-gateway-routes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for send-diagnostic-interrupt", function()
		local result = common.execute_aws_command_with_input({ "ec2", "send-diagnostic-interrupt" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-declarative-policies-report", function()
		local result = common.execute_aws_command_with_input({ "ec2", "start-declarative-policies-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "start-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-network-insights-access-scope-analysis", function()
		local result = common.execute_aws_command_with_input({ "ec2", "start-network-insights-access-scope-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-network-insights-analysis", function()
		local result = common.execute_aws_command_with_input({ "ec2", "start-network-insights-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-vpc-endpoint-service-private-dns-verification", function()
		local result = common.execute_aws_command_with_input({ "ec2", "start-vpc-endpoint-service-private-dns-verification" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "stop-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for terminate-client-vpn-connections", function()
		local result = common.execute_aws_command_with_input({ "ec2", "terminate-client-vpn-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for terminate-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "terminate-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for unassign-ipv6-addresses", function()
		local result = common.execute_aws_command_with_input({ "ec2", "unassign-ipv6-addresses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for unassign-private-ip-addresses", function()
		local result = common.execute_aws_command_with_input({ "ec2", "unassign-private-ip-addresses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for unassign-private-nat-gateway-address", function()
		local result = common.execute_aws_command_with_input({ "ec2", "unassign-private-nat-gateway-address" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for unlock-snapshot", function()
		local result = common.execute_aws_command_with_input({ "ec2", "unlock-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for unmonitor-instances", function()
		local result = common.execute_aws_command_with_input({ "ec2", "unmonitor-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-security-group-rule-descriptions-egress", function()
		local result = common.execute_aws_command_with_input({ "ec2", "update-security-group-rule-descriptions-egress" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-security-group-rule-descriptions-ingress", function()
		local result = common.execute_aws_command_with_input({ "ec2", "update-security-group-rule-descriptions-ingress" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for withdraw-byoip-cidr", function()
		local result = common.execute_aws_command_with_input({ "ec2", "withdraw-byoip-cidr" })
		assert.is_true(result.success)
	end)

end)