-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: resiliencehub

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.resiliencehub")

describe("AWS resiliencehub service testing", function()
	it("should generate a cli skeleton with accept_resource_grouping_recommendations", function()
		local result = service.accept_resource_grouping_recommendations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with add_draft_app_version_resource_mappings", function()
		local result = service.add_draft_app_version_resource_mappings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with batch_update_recommendation_status", function()
		local result = service.batch_update_recommendation_status()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_app", function()
		local result = service.create_app()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_app_version_app_component", function()
		local result = service.create_app_version_app_component()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_app_version_resource", function()
		local result = service.create_app_version_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_recommendation_template", function()
		local result = service.create_recommendation_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_resiliency_policy", function()
		local result = service.create_resiliency_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_app", function()
		local result = service.delete_app()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_app_assessment", function()
		local result = service.delete_app_assessment()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_app_input_source", function()
		local result = service.delete_app_input_source()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_app_version_app_component", function()
		local result = service.delete_app_version_app_component()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_app_version_resource", function()
		local result = service.delete_app_version_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_recommendation_template", function()
		local result = service.delete_recommendation_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_resiliency_policy", function()
		local result = service.delete_resiliency_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_app", function()
		local result = service.describe_app()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_app_assessment", function()
		local result = service.describe_app_assessment()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_app_version", function()
		local result = service.describe_app_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_app_version_app_component", function()
		local result = service.describe_app_version_app_component()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_app_version_resource", function()
		local result = service.describe_app_version_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_app_version_resources_resolution_status", function()
		local result = service.describe_app_version_resources_resolution_status()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_app_version_template", function()
		local result = service.describe_app_version_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_draft_app_version_resources_import_status", function()
		local result = service.describe_draft_app_version_resources_import_status()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_metrics_export", function()
		local result = service.describe_metrics_export()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_resiliency_policy", function()
		local result = service.describe_resiliency_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_resource_grouping_recommendation_task", function()
		local result = service.describe_resource_grouping_recommendation_task()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with import_resources_to_draft_app_version", function()
		local result = service.import_resources_to_draft_app_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_alarm_recommendations", function()
		local result = service.list_alarm_recommendations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_app_assessment_compliance_drifts", function()
		local result = service.list_app_assessment_compliance_drifts()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_app_assessment_resource_drifts", function()
		local result = service.list_app_assessment_resource_drifts()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_app_assessments", function()
		local result = service.list_app_assessments()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_app_component_compliances", function()
		local result = service.list_app_component_compliances()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_app_component_recommendations", function()
		local result = service.list_app_component_recommendations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_app_input_sources", function()
		local result = service.list_app_input_sources()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_app_version_app_components", function()
		local result = service.list_app_version_app_components()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_app_version_resource_mappings", function()
		local result = service.list_app_version_resource_mappings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_app_version_resources", function()
		local result = service.list_app_version_resources()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_app_versions", function()
		local result = service.list_app_versions()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_apps", function()
		local result = service.list_apps()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_metrics", function()
		local result = service.list_metrics()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_recommendation_templates", function()
		local result = service.list_recommendation_templates()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_resiliency_policies", function()
		local result = service.list_resiliency_policies()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_resource_grouping_recommendations", function()
		local result = service.list_resource_grouping_recommendations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_sop_recommendations", function()
		local result = service.list_sop_recommendations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_suggested_resiliency_policies", function()
		local result = service.list_suggested_resiliency_policies()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_test_recommendations", function()
		local result = service.list_test_recommendations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_unsupported_app_version_resources", function()
		local result = service.list_unsupported_app_version_resources()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with publish_app_version", function()
		local result = service.publish_app_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with put_draft_app_version_template", function()
		local result = service.put_draft_app_version_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with reject_resource_grouping_recommendations", function()
		local result = service.reject_resource_grouping_recommendations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with remove_draft_app_version_resource_mappings", function()
		local result = service.remove_draft_app_version_resource_mappings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with resolve_app_version_resources", function()
		local result = service.resolve_app_version_resources()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_app_assessment", function()
		local result = service.start_app_assessment()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_metrics_export", function()
		local result = service.start_metrics_export()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_resource_grouping_recommendation_task", function()
		local result = service.start_resource_grouping_recommendation_task()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_app", function()
		local result = service.update_app()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_app_version", function()
		local result = service.update_app_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_app_version_app_component", function()
		local result = service.update_app_version_app_component()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_app_version_resource", function()
		local result = service.update_app_version_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_resiliency_policy", function()
		local result = service.update_resiliency_policy()
		assert.is_true(result.success)
	end)
end)