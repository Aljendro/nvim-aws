-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: kms

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS kms service testing", function()
	it("should generate a cli skeleton for cancel-key-deletion", function()
		local result = common.execute_aws_command_with_input({ "kms", "cancel-key-deletion" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for connect-custom-key-store", function()
		local result = common.execute_aws_command_with_input({ "kms", "connect-custom-key-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-alias", function()
		local result = common.execute_aws_command_with_input({ "kms", "create-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-custom-key-store", function()
		local result = common.execute_aws_command_with_input({ "kms", "create-custom-key-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-grant", function()
		local result = common.execute_aws_command_with_input({ "kms", "create-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-key", function()
		local result = common.execute_aws_command_with_input({ "kms", "create-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for decrypt", function()
		local result = common.execute_aws_command_with_input({ "kms", "decrypt" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-alias", function()
		local result = common.execute_aws_command_with_input({ "kms", "delete-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-custom-key-store", function()
		local result = common.execute_aws_command_with_input({ "kms", "delete-custom-key-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-imported-key-material", function()
		local result = common.execute_aws_command_with_input({ "kms", "delete-imported-key-material" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for derive-shared-secret", function()
		local result = common.execute_aws_command_with_input({ "kms", "derive-shared-secret" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-custom-key-stores", function()
		local result = common.execute_aws_command_with_input({ "kms", "describe-custom-key-stores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-key", function()
		local result = common.execute_aws_command_with_input({ "kms", "describe-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-key", function()
		local result = common.execute_aws_command_with_input({ "kms", "disable-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-key-rotation", function()
		local result = common.execute_aws_command_with_input({ "kms", "disable-key-rotation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disconnect-custom-key-store", function()
		local result = common.execute_aws_command_with_input({ "kms", "disconnect-custom-key-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-key", function()
		local result = common.execute_aws_command_with_input({ "kms", "enable-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-key-rotation", function()
		local result = common.execute_aws_command_with_input({ "kms", "enable-key-rotation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for encrypt", function()
		local result = common.execute_aws_command_with_input({ "kms", "encrypt" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-data-key", function()
		local result = common.execute_aws_command_with_input({ "kms", "generate-data-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-data-key-pair", function()
		local result = common.execute_aws_command_with_input({ "kms", "generate-data-key-pair" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-data-key-pair-without-plaintext", function()
		local result = common.execute_aws_command_with_input({ "kms", "generate-data-key-pair-without-plaintext" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-data-key-without-plaintext", function()
		local result = common.execute_aws_command_with_input({ "kms", "generate-data-key-without-plaintext" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-mac", function()
		local result = common.execute_aws_command_with_input({ "kms", "generate-mac" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-random", function()
		local result = common.execute_aws_command_with_input({ "kms", "generate-random" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-key-policy", function()
		local result = common.execute_aws_command_with_input({ "kms", "get-key-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-key-rotation-status", function()
		local result = common.execute_aws_command_with_input({ "kms", "get-key-rotation-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-parameters-for-import", function()
		local result = common.execute_aws_command_with_input({ "kms", "get-parameters-for-import" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-public-key", function()
		local result = common.execute_aws_command_with_input({ "kms", "get-public-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-key-material", function()
		local result = common.execute_aws_command_with_input({ "kms", "import-key-material" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-aliases", function()
		local result = common.execute_aws_command_with_input({ "kms", "list-aliases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-grants", function()
		local result = common.execute_aws_command_with_input({ "kms", "list-grants" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-key-policies", function()
		local result = common.execute_aws_command_with_input({ "kms", "list-key-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-key-rotations", function()
		local result = common.execute_aws_command_with_input({ "kms", "list-key-rotations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-keys", function()
		local result = common.execute_aws_command_with_input({ "kms", "list-keys" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resource-tags", function()
		local result = common.execute_aws_command_with_input({ "kms", "list-resource-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-retirable-grants", function()
		local result = common.execute_aws_command_with_input({ "kms", "list-retirable-grants" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-key-policy", function()
		local result = common.execute_aws_command_with_input({ "kms", "put-key-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for re-encrypt", function()
		local result = common.execute_aws_command_with_input({ "kms", "re-encrypt" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for replicate-key", function()
		local result = common.execute_aws_command_with_input({ "kms", "replicate-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for retire-grant", function()
		local result = common.execute_aws_command_with_input({ "kms", "retire-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for revoke-grant", function()
		local result = common.execute_aws_command_with_input({ "kms", "revoke-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for rotate-key-on-demand", function()
		local result = common.execute_aws_command_with_input({ "kms", "rotate-key-on-demand" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for schedule-key-deletion", function()
		local result = common.execute_aws_command_with_input({ "kms", "schedule-key-deletion" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for sign", function()
		local result = common.execute_aws_command_with_input({ "kms", "sign" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "kms", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "kms", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-alias", function()
		local result = common.execute_aws_command_with_input({ "kms", "update-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-custom-key-store", function()
		local result = common.execute_aws_command_with_input({ "kms", "update-custom-key-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-key-description", function()
		local result = common.execute_aws_command_with_input({ "kms", "update-key-description" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-primary-region", function()
		local result = common.execute_aws_command_with_input({ "kms", "update-primary-region" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for verify", function()
		local result = common.execute_aws_command_with_input({ "kms", "verify" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for verify-mac", function()
		local result = common.execute_aws_command_with_input({ "kms", "verify-mac" })
		assert.is_true(result.success)
	end)

end)