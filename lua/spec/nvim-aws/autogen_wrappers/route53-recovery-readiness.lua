-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: route53-recovery-readiness

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS route53-recovery-readiness service testing", function()
	it("should generate a cli skeleton for create-cell", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "create-cell" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cross-account-authorization", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "create-cross-account-authorization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-readiness-check", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "create-readiness-check" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-recovery-group", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "create-recovery-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-resource-set", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "create-resource-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cell", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "delete-cell" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cross-account-authorization", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "delete-cross-account-authorization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-readiness-check", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "delete-readiness-check" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-recovery-group", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "delete-recovery-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-set", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "delete-resource-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-architecture-recommendations", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "get-architecture-recommendations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cell", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "get-cell" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cell-readiness-summary", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "get-cell-readiness-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-readiness-check", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "get-readiness-check" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-readiness-check-resource-status", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "get-readiness-check-resource-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-readiness-check-status", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "get-readiness-check-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-recovery-group", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "get-recovery-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-recovery-group-readiness-summary", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "get-recovery-group-readiness-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resource-set", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "get-resource-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-cells", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "list-cells" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-cross-account-authorizations", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "list-cross-account-authorizations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-readiness-checks", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "list-readiness-checks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-recovery-groups", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "list-recovery-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resource-sets", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "list-resource-sets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-rules", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "list-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resources", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "list-tags-for-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-cell", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "update-cell" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-readiness-check", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "update-readiness-check" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-recovery-group", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "update-recovery-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-resource-set", function()
		local result = common.execute_aws_command_with_input({ "route53-recovery-readiness", "update-resource-set" })
		assert.is_true(result.success)
	end)

end)