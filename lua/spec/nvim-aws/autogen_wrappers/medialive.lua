-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: medialive

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS medialive service testing", function()
	it("should generate a cli skeleton for accept-input-device-transfer", function()
		local result = common.execute_aws_command_with_input({ "medialive", "accept-input-device-transfer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-delete", function()
		local result = common.execute_aws_command_with_input({ "medialive", "batch-delete" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-start", function()
		local result = common.execute_aws_command_with_input({ "medialive", "batch-start" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-stop", function()
		local result = common.execute_aws_command_with_input({ "medialive", "batch-stop" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-update-schedule", function()
		local result = common.execute_aws_command_with_input({ "medialive", "batch-update-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-input-device-transfer", function()
		local result = common.execute_aws_command_with_input({ "medialive", "cancel-input-device-transfer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for claim-device", function()
		local result = common.execute_aws_command_with_input({ "medialive", "claim-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-channel", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-channel-placement-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-channel-placement-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cloud-watch-alarm-template", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-cloud-watch-alarm-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cloud-watch-alarm-template-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-cloud-watch-alarm-template-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-cluster", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-event-bridge-rule-template", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-event-bridge-rule-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-event-bridge-rule-template-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-event-bridge-rule-template-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-input", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-input" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-input-security-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-input-security-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-multiplex", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-multiplex" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-multiplex-program", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-multiplex-program" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-network", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-node", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-node" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-node-registration-script", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-node-registration-script" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-partner-input", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-partner-input" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-sdi-source", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-sdi-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-signal-map", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-signal-map" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-tags", function()
		local result = common.execute_aws_command_with_input({ "medialive", "create-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-channel", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-channel-placement-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-channel-placement-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cloud-watch-alarm-template", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-cloud-watch-alarm-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cloud-watch-alarm-template-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-cloud-watch-alarm-template-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-cluster", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-event-bridge-rule-template", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-event-bridge-rule-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-event-bridge-rule-template-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-event-bridge-rule-template-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-input", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-input" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-input-security-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-input-security-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-multiplex", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-multiplex" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-multiplex-program", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-multiplex-program" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-network", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-node", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-node" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-reservation", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-schedule", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-sdi-source", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-sdi-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-signal-map", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-signal-map" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-tags", function()
		local result = common.execute_aws_command_with_input({ "medialive", "delete-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-account-configuration", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-account-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-channel", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-channel-placement-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-channel-placement-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cluster", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-input", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-input" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-input-device", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-input-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-input-device-thumbnail", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-input-device-thumbnail" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-input-security-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-input-security-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-multiplex", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-multiplex" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-multiplex-program", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-multiplex-program" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-network", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-node", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-node" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-offering", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-offering" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-reservation", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-schedule", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-schedule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-sdi-source", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-sdi-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-thumbnails", function()
		local result = common.execute_aws_command_with_input({ "medialive", "describe-thumbnails" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cloud-watch-alarm-template", function()
		local result = common.execute_aws_command_with_input({ "medialive", "get-cloud-watch-alarm-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-cloud-watch-alarm-template-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "get-cloud-watch-alarm-template-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-event-bridge-rule-template", function()
		local result = common.execute_aws_command_with_input({ "medialive", "get-event-bridge-rule-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-event-bridge-rule-template-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "get-event-bridge-rule-template-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-signal-map", function()
		local result = common.execute_aws_command_with_input({ "medialive", "get-signal-map" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-channel-placement-groups", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-channel-placement-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-channels", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-channels" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-cloud-watch-alarm-template-groups", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-cloud-watch-alarm-template-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-cloud-watch-alarm-templates", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-cloud-watch-alarm-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-clusters", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-clusters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-event-bridge-rule-template-groups", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-event-bridge-rule-template-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-event-bridge-rule-templates", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-event-bridge-rule-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-input-device-transfers", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-input-device-transfers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-input-devices", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-input-devices" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-input-security-groups", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-input-security-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-inputs", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-inputs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-multiplex-programs", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-multiplex-programs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-multiplexes", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-multiplexes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-networks", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-networks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-nodes", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-nodes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-offerings", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-offerings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-reservations", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-reservations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-sdi-sources", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-sdi-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-signal-maps", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-signal-maps" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-versions", function()
		local result = common.execute_aws_command_with_input({ "medialive", "list-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for purchase-offering", function()
		local result = common.execute_aws_command_with_input({ "medialive", "purchase-offering" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reboot-input-device", function()
		local result = common.execute_aws_command_with_input({ "medialive", "reboot-input-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-input-device-transfer", function()
		local result = common.execute_aws_command_with_input({ "medialive", "reject-input-device-transfer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restart-channel-pipelines", function()
		local result = common.execute_aws_command_with_input({ "medialive", "restart-channel-pipelines" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-channel", function()
		local result = common.execute_aws_command_with_input({ "medialive", "start-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-delete-monitor-deployment", function()
		local result = common.execute_aws_command_with_input({ "medialive", "start-delete-monitor-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-input-device", function()
		local result = common.execute_aws_command_with_input({ "medialive", "start-input-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-input-device-maintenance-window", function()
		local result = common.execute_aws_command_with_input({ "medialive", "start-input-device-maintenance-window" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-monitor-deployment", function()
		local result = common.execute_aws_command_with_input({ "medialive", "start-monitor-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-multiplex", function()
		local result = common.execute_aws_command_with_input({ "medialive", "start-multiplex" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-update-signal-map", function()
		local result = common.execute_aws_command_with_input({ "medialive", "start-update-signal-map" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-channel", function()
		local result = common.execute_aws_command_with_input({ "medialive", "stop-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-input-device", function()
		local result = common.execute_aws_command_with_input({ "medialive", "stop-input-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-multiplex", function()
		local result = common.execute_aws_command_with_input({ "medialive", "stop-multiplex" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for transfer-input-device", function()
		local result = common.execute_aws_command_with_input({ "medialive", "transfer-input-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-account-configuration", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-account-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-channel", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-channel-class", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-channel-class" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-channel-placement-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-channel-placement-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-cloud-watch-alarm-template", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-cloud-watch-alarm-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-cloud-watch-alarm-template-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-cloud-watch-alarm-template-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-cluster", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-cluster" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-event-bridge-rule-template", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-event-bridge-rule-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-event-bridge-rule-template-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-event-bridge-rule-template-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-input", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-input" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-input-device", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-input-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-input-security-group", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-input-security-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-multiplex", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-multiplex" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-multiplex-program", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-multiplex-program" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-network", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-node", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-node" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-node-state", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-node-state" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-reservation", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-sdi-source", function()
		local result = common.execute_aws_command_with_input({ "medialive", "update-sdi-source" })
		assert.is_true(result.success)
	end)

end)