-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: elasticbeanstalk

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.elasticbeanstalk")

describe("AWS elasticbeanstalk service testing", function()
	it("should generate a cli skeleton with abort_environment_update", function()
		local result = service.abort_environment_update()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with apply_environment_managed_action", function()
		local result = service.apply_environment_managed_action()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with associate_environment_operations_role", function()
		local result = service.associate_environment_operations_role()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with check_dns_availability", function()
		local result = service.check_dns_availability()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with compose_environments", function()
		local result = service.compose_environments()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_application", function()
		local result = service.create_application()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_application_version", function()
		local result = service.create_application_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_configuration_template", function()
		local result = service.create_configuration_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_environment", function()
		local result = service.create_environment()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_platform_version", function()
		local result = service.create_platform_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_storage_location", function()
		local result = service.create_storage_location()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_application", function()
		local result = service.delete_application()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_application_version", function()
		local result = service.delete_application_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_configuration_template", function()
		local result = service.delete_configuration_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_environment_configuration", function()
		local result = service.delete_environment_configuration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_platform_version", function()
		local result = service.delete_platform_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_account_attributes", function()
		local result = service.describe_account_attributes()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_application_versions", function()
		local result = service.describe_application_versions()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_applications", function()
		local result = service.describe_applications()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_configuration_options", function()
		local result = service.describe_configuration_options()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_configuration_settings", function()
		local result = service.describe_configuration_settings()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_environment_health", function()
		local result = service.describe_environment_health()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_environment_managed_action_history", function()
		local result = service.describe_environment_managed_action_history()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_environment_managed_actions", function()
		local result = service.describe_environment_managed_actions()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_environment_resources", function()
		local result = service.describe_environment_resources()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_environments", function()
		local result = service.describe_environments()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_events", function()
		local result = service.describe_events()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_instances_health", function()
		local result = service.describe_instances_health()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_platform_version", function()
		local result = service.describe_platform_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with disassociate_environment_operations_role", function()
		local result = service.disassociate_environment_operations_role()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_available_solution_stacks", function()
		local result = service.list_available_solution_stacks()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_platform_branches", function()
		local result = service.list_platform_branches()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_platform_versions", function()
		local result = service.list_platform_versions()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with rebuild_environment", function()
		local result = service.rebuild_environment()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with request_environment_info", function()
		local result = service.request_environment_info()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with restart_app_server", function()
		local result = service.restart_app_server()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with retrieve_environment_info", function()
		local result = service.retrieve_environment_info()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with swap_environment_cnames", function()
		local result = service.swap_environment_cnames()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with terminate_environment", function()
		local result = service.terminate_environment()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_application", function()
		local result = service.update_application()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_application_resource_lifecycle", function()
		local result = service.update_application_resource_lifecycle()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_application_version", function()
		local result = service.update_application_version()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_configuration_template", function()
		local result = service.update_configuration_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_environment", function()
		local result = service.update_environment()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_tags_for_resource", function()
		local result = service.update_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with validate_configuration_settings", function()
		local result = service.validate_configuration_settings()
		assert.is_true(result.success)
	end)
end)