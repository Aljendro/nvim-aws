-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: qapps

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.qapps")

describe("AWS qapps service testing", function()
	it("should generate a cli skeleton with associate_library_item_review", function()
		local result = service.associate_library_item_review()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_q_app_with_user", function()
		local result = service.associate_q_app_with_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_create_category", function()
		local result = service.batch_create_category()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_delete_category", function()
		local result = service.batch_delete_category()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_update_category", function()
		local result = service.batch_update_category()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_library_item", function()
		local result = service.create_library_item()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_presigned_url", function()
		local result = service.create_presigned_url()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_q_app", function()
		local result = service.create_q_app()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_library_item", function()
		local result = service.delete_library_item()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_q_app", function()
		local result = service.delete_q_app()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_q_app_permissions", function()
		local result = service.describe_q_app_permissions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_library_item_review", function()
		local result = service.disassociate_library_item_review()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_q_app_from_user", function()
		local result = service.disassociate_q_app_from_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with export_q_app_session_data", function()
		local result = service.export_q_app_session_data()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_library_item", function()
		local result = service.get_library_item()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_q_app", function()
		local result = service.get_q_app()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_q_app_session", function()
		local result = service.get_q_app_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_q_app_session_metadata", function()
		local result = service.get_q_app_session_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_document", function()
		local result = service.import_document()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_categories", function()
		local result = service.list_categories()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_library_items", function()
		local result = service.list_library_items()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_q_app_session_data", function()
		local result = service.list_q_app_session_data()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_q_apps", function()
		local result = service.list_q_apps()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with predict_q_app", function()
		local result = service.predict_q_app()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_q_app_session", function()
		local result = service.start_q_app_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_q_app_session", function()
		local result = service.stop_q_app_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_library_item", function()
		local result = service.update_library_item()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_library_item_metadata", function()
		local result = service.update_library_item_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_q_app", function()
		local result = service.update_q_app()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_q_app_permissions", function()
		local result = service.update_q_app_permissions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_q_app_session", function()
		local result = service.update_q_app_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_q_app_session_metadata", function()
		local result = service.update_q_app_session_metadata()
		assert.is_true(result.success)
	end)

end)