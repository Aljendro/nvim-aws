-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: kafka

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.kafka")

describe("AWS kafka service testing", function()
	it("should generate a cli skeleton with batch_associate_scram_secret", function()
		local result = service.batch_associate_scram_secret()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_disassociate_scram_secret", function()
		local result = service.batch_disassociate_scram_secret()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_cluster", function()
		local result = service.create_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_cluster_v2", function()
		local result = service.create_cluster_v2()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_configuration", function()
		local result = service.create_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_replicator", function()
		local result = service.create_replicator()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_vpc_connection", function()
		local result = service.create_vpc_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_cluster", function()
		local result = service.delete_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_cluster_policy", function()
		local result = service.delete_cluster_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_configuration", function()
		local result = service.delete_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_replicator", function()
		local result = service.delete_replicator()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_vpc_connection", function()
		local result = service.delete_vpc_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_cluster", function()
		local result = service.describe_cluster()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_cluster_operation", function()
		local result = service.describe_cluster_operation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_cluster_operation_v2", function()
		local result = service.describe_cluster_operation_v2()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_cluster_v2", function()
		local result = service.describe_cluster_v2()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_configuration", function()
		local result = service.describe_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_configuration_revision", function()
		local result = service.describe_configuration_revision()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_replicator", function()
		local result = service.describe_replicator()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_vpc_connection", function()
		local result = service.describe_vpc_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_bootstrap_brokers", function()
		local result = service.get_bootstrap_brokers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_cluster_policy", function()
		local result = service.get_cluster_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_compatible_kafka_versions", function()
		local result = service.get_compatible_kafka_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_client_vpc_connections", function()
		local result = service.list_client_vpc_connections()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_cluster_operations", function()
		local result = service.list_cluster_operations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_cluster_operations_v2", function()
		local result = service.list_cluster_operations_v2()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_clusters", function()
		local result = service.list_clusters()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_clusters_v2", function()
		local result = service.list_clusters_v2()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_configuration_revisions", function()
		local result = service.list_configuration_revisions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_configurations", function()
		local result = service.list_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_kafka_versions", function()
		local result = service.list_kafka_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_nodes", function()
		local result = service.list_nodes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_replicators", function()
		local result = service.list_replicators()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_scram_secrets", function()
		local result = service.list_scram_secrets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_vpc_connections", function()
		local result = service.list_vpc_connections()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_cluster_policy", function()
		local result = service.put_cluster_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reboot_broker", function()
		local result = service.reboot_broker()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reject_client_vpc_connection", function()
		local result = service.reject_client_vpc_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_broker_count", function()
		local result = service.update_broker_count()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_broker_storage", function()
		local result = service.update_broker_storage()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_broker_type", function()
		local result = service.update_broker_type()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_cluster_configuration", function()
		local result = service.update_cluster_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_cluster_kafka_version", function()
		local result = service.update_cluster_kafka_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_configuration", function()
		local result = service.update_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_connectivity", function()
		local result = service.update_connectivity()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_monitoring", function()
		local result = service.update_monitoring()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_replication_info", function()
		local result = service.update_replication_info()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_security", function()
		local result = service.update_security()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_storage", function()
		local result = service.update_storage()
		assert.is_true(result.success)
	end)

end)
