-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: appsync

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS appsync service testing", function()
	it("should generate a cli skeleton for associate-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "associate-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-merged-graphql-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "associate-merged-graphql-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-source-graphql-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "associate-source-graphql-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "create-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-api-cache", function()
		local result = common.execute_aws_command_with_input({ "appsync", "create-api-cache" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-api-key", function()
		local result = common.execute_aws_command_with_input({ "appsync", "create-api-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-channel-namespace", function()
		local result = common.execute_aws_command_with_input({ "appsync", "create-channel-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-data-source", function()
		local result = common.execute_aws_command_with_input({ "appsync", "create-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-domain-name", function()
		local result = common.execute_aws_command_with_input({ "appsync", "create-domain-name" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-function", function()
		local result = common.execute_aws_command_with_input({ "appsync", "create-function" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-graphql-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "create-graphql-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-resolver", function()
		local result = common.execute_aws_command_with_input({ "appsync", "create-resolver" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-type", function()
		local result = common.execute_aws_command_with_input({ "appsync", "create-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "delete-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-api-cache", function()
		local result = common.execute_aws_command_with_input({ "appsync", "delete-api-cache" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-api-key", function()
		local result = common.execute_aws_command_with_input({ "appsync", "delete-api-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-channel-namespace", function()
		local result = common.execute_aws_command_with_input({ "appsync", "delete-channel-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-data-source", function()
		local result = common.execute_aws_command_with_input({ "appsync", "delete-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-domain-name", function()
		local result = common.execute_aws_command_with_input({ "appsync", "delete-domain-name" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-function", function()
		local result = common.execute_aws_command_with_input({ "appsync", "delete-function" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-graphql-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "delete-graphql-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resolver", function()
		local result = common.execute_aws_command_with_input({ "appsync", "delete-resolver" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-type", function()
		local result = common.execute_aws_command_with_input({ "appsync", "delete-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "disassociate-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-merged-graphql-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "disassociate-merged-graphql-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-source-graphql-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "disassociate-source-graphql-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for evaluate-code", function()
		local result = common.execute_aws_command_with_input({ "appsync", "evaluate-code" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for evaluate-mapping-template", function()
		local result = common.execute_aws_command_with_input({ "appsync", "evaluate-mapping-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for flush-api-cache", function()
		local result = common.execute_aws_command_with_input({ "appsync", "flush-api-cache" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-api-association", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-api-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-api-cache", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-api-cache" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-channel-namespace", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-channel-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-source", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-source-introspection", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-data-source-introspection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-domain-name", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-domain-name" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-function", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-function" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-graphql-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-graphql-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-graphql-api-environment-variables", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-graphql-api-environment-variables" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-introspection-schema", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-introspection-schema" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resolver", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-resolver" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-schema-creation-status", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-schema-creation-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-source-api-association", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-source-api-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-type", function()
		local result = common.execute_aws_command_with_input({ "appsync", "get-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-api-keys", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-api-keys" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-apis", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-apis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-channel-namespaces", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-channel-namespaces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-data-sources", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-data-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-domain-names", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-domain-names" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-functions", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-functions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-graphql-apis", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-graphql-apis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resolvers", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-resolvers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resolvers-by-function", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-resolvers-by-function" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-source-api-associations", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-source-api-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-types", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-types-by-association", function()
		local result = common.execute_aws_command_with_input({ "appsync", "list-types-by-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-graphql-api-environment-variables", function()
		local result = common.execute_aws_command_with_input({ "appsync", "put-graphql-api-environment-variables" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-data-source-introspection", function()
		local result = common.execute_aws_command_with_input({ "appsync", "start-data-source-introspection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-schema-creation", function()
		local result = common.execute_aws_command_with_input({ "appsync", "start-schema-creation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-schema-merge", function()
		local result = common.execute_aws_command_with_input({ "appsync", "start-schema-merge" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "appsync", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "appsync", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "update-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-api-cache", function()
		local result = common.execute_aws_command_with_input({ "appsync", "update-api-cache" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-api-key", function()
		local result = common.execute_aws_command_with_input({ "appsync", "update-api-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-channel-namespace", function()
		local result = common.execute_aws_command_with_input({ "appsync", "update-channel-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-data-source", function()
		local result = common.execute_aws_command_with_input({ "appsync", "update-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-domain-name", function()
		local result = common.execute_aws_command_with_input({ "appsync", "update-domain-name" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-function", function()
		local result = common.execute_aws_command_with_input({ "appsync", "update-function" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-graphql-api", function()
		local result = common.execute_aws_command_with_input({ "appsync", "update-graphql-api" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-resolver", function()
		local result = common.execute_aws_command_with_input({ "appsync", "update-resolver" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-source-api-association", function()
		local result = common.execute_aws_command_with_input({ "appsync", "update-source-api-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-type", function()
		local result = common.execute_aws_command_with_input({ "appsync", "update-type" })
		assert.is_true(result.success)
	end)

end)