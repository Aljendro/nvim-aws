-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: service-catalog

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS service-catalog service testing", function()
	it("should generate a cli skeleton for accept-portfolio-share", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "accept-portfolio-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-budget-with-resource", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "associate-budget-with-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-principal-with-portfolio", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "associate-principal-with-portfolio" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-product-with-portfolio", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "associate-product-with-portfolio" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-service-action-with-provisioning-artifact", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "associate-service-action-with-provisioning-artifact" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-tag-option-with-resource", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "associate-tag-option-with-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-associate-service-action-with-provisioning-artifact", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "batch-associate-service-action-with-provisioning-artifact" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-disassociate-service-action-from-provisioning-artifact", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "batch-disassociate-service-action-from-provisioning-artifact" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for copy-product", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "copy-product" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-constraint", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "create-constraint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-portfolio", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "create-portfolio" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-portfolio-share", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "create-portfolio-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-product", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "create-product" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-provisioned-product-plan", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "create-provisioned-product-plan" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-provisioning-artifact", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "create-provisioning-artifact" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-service-action", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "create-service-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-tag-option", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "create-tag-option" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-constraint", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "delete-constraint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-portfolio", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "delete-portfolio" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-portfolio-share", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "delete-portfolio-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-product", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "delete-product" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-provisioned-product-plan", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "delete-provisioned-product-plan" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-provisioning-artifact", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "delete-provisioning-artifact" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-service-action", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "delete-service-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-tag-option", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "delete-tag-option" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-constraint", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-constraint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-copy-product-status", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-copy-product-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-portfolio", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-portfolio" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-portfolio-share-status", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-portfolio-share-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-portfolio-shares", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-portfolio-shares" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-product", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-product" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-product-as-admin", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-product-as-admin" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-product-view", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-product-view" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-provisioned-product", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-provisioned-product" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-provisioned-product-plan", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-provisioned-product-plan" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-provisioning-artifact", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-provisioning-artifact" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-provisioning-parameters", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-provisioning-parameters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-record", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-record" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-service-action", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-service-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-service-action-execution-parameters", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-service-action-execution-parameters" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-tag-option", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "describe-tag-option" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-aws-organizations-access", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "disable-aws-organizations-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-budget-from-resource", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "disassociate-budget-from-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-principal-from-portfolio", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "disassociate-principal-from-portfolio" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-product-from-portfolio", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "disassociate-product-from-portfolio" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-service-action-from-provisioning-artifact", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "disassociate-service-action-from-provisioning-artifact" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-tag-option-from-resource", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "disassociate-tag-option-from-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-aws-organizations-access", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "enable-aws-organizations-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-provisioned-product-plan", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "execute-provisioned-product-plan" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-provisioned-product-service-action", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "execute-provisioned-product-service-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-aws-organizations-access-status", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "get-aws-organizations-access-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-provisioned-product-outputs", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "get-provisioned-product-outputs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-as-provisioned-product", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "import-as-provisioned-product" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-accepted-portfolio-shares", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-accepted-portfolio-shares" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-budgets-for-resource", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-budgets-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-constraints-for-portfolio", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-constraints-for-portfolio" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-launch-paths", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-launch-paths" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-organization-portfolio-access", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-organization-portfolio-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-portfolio-access", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-portfolio-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-portfolios", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-portfolios" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-portfolios-for-product", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-portfolios-for-product" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-principals-for-portfolio", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-principals-for-portfolio" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-provisioned-product-plans", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-provisioned-product-plans" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-provisioning-artifacts", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-provisioning-artifacts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-provisioning-artifacts-for-service-action", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-provisioning-artifacts-for-service-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-record-history", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-record-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resources-for-tag-option", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-resources-for-tag-option" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-actions", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-service-actions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-actions-for-provisioning-artifact", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-service-actions-for-provisioning-artifact" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-stack-instances-for-provisioned-product", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-stack-instances-for-provisioned-product" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tag-options", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "list-tag-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for notify-provision-product-engine-workflow-result", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "notify-provision-product-engine-workflow-result" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for notify-terminate-provisioned-product-engine-workflow-result", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "notify-terminate-provisioned-product-engine-workflow-result" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for notify-update-provisioned-product-engine-workflow-result", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "notify-update-provisioned-product-engine-workflow-result" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for provision-product", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "provision-product" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-portfolio-share", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "reject-portfolio-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for scan-provisioned-products", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "scan-provisioned-products" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-products", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "search-products" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-products-as-admin", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "search-products-as-admin" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-provisioned-products", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "search-provisioned-products" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for terminate-provisioned-product", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "terminate-provisioned-product" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-constraint", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "update-constraint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-portfolio", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "update-portfolio" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-portfolio-share", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "update-portfolio-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-product", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "update-product" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-provisioned-product", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "update-provisioned-product" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-provisioned-product-properties", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "update-provisioned-product-properties" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-provisioning-artifact", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "update-provisioning-artifact" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-service-action", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "update-service-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-tag-option", function()
		local result = common.execute_aws_command_with_input({ "servicecatalog", "update-tag-option" })
		assert.is_true(result.success)
	end)

end)