-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: cloudtrail

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.cloudtrail")

describe("AWS cloudtrail service testing", function()
	it("should generate a cli skeleton with add_tags", function()
		local result = service.add_tags()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with cancel_query", function()
		local result = service.cancel_query()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_channel", function()
		local result = service.create_channel()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_dashboard", function()
		local result = service.create_dashboard()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_event_data_store", function()
		local result = service.create_event_data_store()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_trail", function()
		local result = service.create_trail()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_channel", function()
		local result = service.delete_channel()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_dashboard", function()
		local result = service.delete_dashboard()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_event_data_store", function()
		local result = service.delete_event_data_store()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_resource_policy", function()
		local result = service.delete_resource_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_trail", function()
		local result = service.delete_trail()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with deregister_organization_delegated_admin", function()
		local result = service.deregister_organization_delegated_admin()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_query", function()
		local result = service.describe_query()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_trails", function()
		local result = service.describe_trails()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with disable_federation", function()
		local result = service.disable_federation()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with enable_federation", function()
		local result = service.enable_federation()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with generate_query", function()
		local result = service.generate_query()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_channel", function()
		local result = service.get_channel()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_dashboard", function()
		local result = service.get_dashboard()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_event_data_store", function()
		local result = service.get_event_data_store()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_event_selectors", function()
		local result = service.get_event_selectors()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_import", function()
		local result = service.get_import()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_insight_selectors", function()
		local result = service.get_insight_selectors()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_query_results", function()
		local result = service.get_query_results()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_resource_policy", function()
		local result = service.get_resource_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_trail", function()
		local result = service.get_trail()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_trail_status", function()
		local result = service.get_trail_status()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_channels", function()
		local result = service.list_channels()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_dashboards", function()
		local result = service.list_dashboards()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_event_data_stores", function()
		local result = service.list_event_data_stores()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_import_failures", function()
		local result = service.list_import_failures()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_imports", function()
		local result = service.list_imports()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_insights_metric_data", function()
		local result = service.list_insights_metric_data()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_public_keys", function()
		local result = service.list_public_keys()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_queries", function()
		local result = service.list_queries()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags", function()
		local result = service.list_tags()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_trails", function()
		local result = service.list_trails()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with lookup_events", function()
		local result = service.lookup_events()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with put_event_selectors", function()
		local result = service.put_event_selectors()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with put_insight_selectors", function()
		local result = service.put_insight_selectors()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with put_resource_policy", function()
		local result = service.put_resource_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with register_organization_delegated_admin", function()
		local result = service.register_organization_delegated_admin()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with remove_tags", function()
		local result = service.remove_tags()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with restore_event_data_store", function()
		local result = service.restore_event_data_store()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with search_sample_queries", function()
		local result = service.search_sample_queries()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_dashboard_refresh", function()
		local result = service.start_dashboard_refresh()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_event_data_store_ingestion", function()
		local result = service.start_event_data_store_ingestion()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_import", function()
		local result = service.start_import()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_logging", function()
		local result = service.start_logging()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_query", function()
		local result = service.start_query()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with stop_event_data_store_ingestion", function()
		local result = service.stop_event_data_store_ingestion()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with stop_import", function()
		local result = service.stop_import()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with stop_logging", function()
		local result = service.stop_logging()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_channel", function()
		local result = service.update_channel()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_dashboard", function()
		local result = service.update_dashboard()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_event_data_store", function()
		local result = service.update_event_data_store()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_trail", function()
		local result = service.update_trail()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with validate_logs", function()
		local result = service.validate_logs()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with verify_query_results", function()
		local result = service.verify_query_results()
		assert.is_true(result.success)
	end)
end)