-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: iotanalytics

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS iotanalytics service testing", function()
	it("should generate a cli skeleton for batch-put-message", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "batch-put-message" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-pipeline-reprocessing", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "cancel-pipeline-reprocessing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-channel", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "create-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-dataset", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "create-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-dataset-content", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "create-dataset-content" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-datastore", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "create-datastore" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-pipeline", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "create-pipeline" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-channel", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "delete-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-dataset", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "delete-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-dataset-content", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "delete-dataset-content" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-datastore", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "delete-datastore" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-pipeline", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "delete-pipeline" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-channel", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "describe-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-dataset", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "describe-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-datastore", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "describe-datastore" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-logging-options", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "describe-logging-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-pipeline", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "describe-pipeline" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-dataset-content", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "get-dataset-content" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-channels", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "list-channels" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-dataset-contents", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "list-dataset-contents" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-datasets", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "list-datasets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-datastores", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "list-datastores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-pipelines", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "list-pipelines" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-logging-options", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "put-logging-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for run-pipeline-activity", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "run-pipeline-activity" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for sample-channel-data", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "sample-channel-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-pipeline-reprocessing", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "start-pipeline-reprocessing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-channel", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "update-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-dataset", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "update-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-datastore", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "update-datastore" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-pipeline", function()
		local result = common.execute_aws_command_with_input({ "iotanalytics", "update-pipeline" })
		assert.is_true(result.success)
	end)

end)