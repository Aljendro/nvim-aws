-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: license-manager

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS license-manager service testing", function()
	it("should generate a cli skeleton for accept-grant", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "accept-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for check-in-license", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "check-in-license" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for checkout-borrow-license", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "checkout-borrow-license" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for checkout-license", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "checkout-license" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-grant", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "create-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-grant-version", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "create-grant-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-license", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "create-license" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-license-configuration", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "create-license-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-license-conversion-task-for-resource", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "create-license-conversion-task-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-license-manager-report-generator", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "create-license-manager-report-generator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-license-version", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "create-license-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-token", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "create-token" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-grant", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "delete-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-license", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "delete-license" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-license-configuration", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "delete-license-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-license-manager-report-generator", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "delete-license-manager-report-generator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-token", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "delete-token" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for extend-license-consumption", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "extend-license-consumption" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-token", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "get-access-token" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-grant", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "get-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-license", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "get-license" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-license-configuration", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "get-license-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-license-conversion-task", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "get-license-conversion-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-license-manager-report-generator", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "get-license-manager-report-generator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-license-usage", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "get-license-usage" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-settings", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "get-service-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-associations-for-license-configuration", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-associations-for-license-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-distributed-grants", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-distributed-grants" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-failures-for-license-configuration-operations", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-failures-for-license-configuration-operations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-license-configurations", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-license-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-license-conversion-tasks", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-license-conversion-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-license-manager-report-generators", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-license-manager-report-generators" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-license-specifications-for-resource", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-license-specifications-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-license-versions", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-license-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-licenses", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-licenses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-received-grants", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-received-grants" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-received-grants-for-organization", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-received-grants-for-organization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-received-licenses", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-received-licenses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-received-licenses-for-organization", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-received-licenses-for-organization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resource-inventory", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-resource-inventory" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tokens", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-tokens" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-usage-for-license-configuration", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "list-usage-for-license-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-grant", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "reject-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-license-configuration", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "update-license-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-license-manager-report-generator", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "update-license-manager-report-generator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-license-specifications-for-resource", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "update-license-specifications-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-service-settings", function()
		local result = common.execute_aws_command_with_input({ "license-manager", "update-service-settings" })
		assert.is_true(result.success)
	end)

end)