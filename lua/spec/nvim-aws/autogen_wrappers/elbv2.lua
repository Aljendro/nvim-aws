-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: elastic-load-balancing-v2

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS elastic-load-balancing-v2 service testing", function()
	it("should generate a cli skeleton for add-listener-certificates", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "add-listener-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-tags", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "add-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-trust-store-revocations", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "add-trust-store-revocations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-listener", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "create-listener" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "create-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-rule", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "create-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-target-group", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "create-target-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-trust-store", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "create-trust-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-listener", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "delete-listener" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "delete-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-rule", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "delete-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-shared-trust-store-association", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "delete-shared-trust-store-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-target-group", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "delete-target-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-trust-store", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "delete-trust-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-targets", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "deregister-targets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-account-limits", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-account-limits" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-capacity-reservation", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-capacity-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-listener-attributes", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-listener-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-listener-certificates", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-listener-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-listeners", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-listeners" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-load-balancer-attributes", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-load-balancer-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-load-balancers", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-load-balancers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-rules", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ssl-policies", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-ssl-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-tags", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-target-group-attributes", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-target-group-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-target-groups", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-target-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-target-health", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-target-health" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-trust-store-associations", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-trust-store-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-trust-store-revocations", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-trust-store-revocations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-trust-stores", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "describe-trust-stores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "get-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-trust-store-ca-certificates-bundle", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "get-trust-store-ca-certificates-bundle" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-trust-store-revocation-content", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "get-trust-store-revocation-content" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-capacity-reservation", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "modify-capacity-reservation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-ip-pools", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "modify-ip-pools" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-listener", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "modify-listener" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-listener-attributes", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "modify-listener-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-load-balancer-attributes", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "modify-load-balancer-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-rule", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "modify-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-target-group", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "modify-target-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-target-group-attributes", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "modify-target-group-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-trust-store", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "modify-trust-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-targets", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "register-targets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-listener-certificates", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "remove-listener-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-tags", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "remove-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-trust-store-revocations", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "remove-trust-store-revocations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-ip-address-type", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "set-ip-address-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-rule-priorities", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "set-rule-priorities" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-security-groups", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "set-security-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-subnets", function()
		local result = common.execute_aws_command_with_input({ "elbv2", "set-subnets" })
		assert.is_true(result.success)
	end)

end)