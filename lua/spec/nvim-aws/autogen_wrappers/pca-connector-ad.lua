-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: pca-connector-ad

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS pca-connector-ad service testing", function()
	it("should generate a cli skeleton for create-connector", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "create-connector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-directory-registration", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "create-directory-registration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-service-principal-name", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "create-service-principal-name" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-template", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "create-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-template-group-access-control-entry", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "create-template-group-access-control-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-connector", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "delete-connector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-directory-registration", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "delete-directory-registration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-service-principal-name", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "delete-service-principal-name" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-template", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "delete-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-template-group-access-control-entry", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "delete-template-group-access-control-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-connector", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "get-connector" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-directory-registration", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "get-directory-registration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-principal-name", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "get-service-principal-name" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-template", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "get-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-template-group-access-control-entry", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "get-template-group-access-control-entry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-connectors", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "list-connectors" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-directory-registrations", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "list-directory-registrations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-principal-names", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "list-service-principal-names" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-template-group-access-control-entries", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "list-template-group-access-control-entries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-templates", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "list-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-template", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "update-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-template-group-access-control-entry", function()
		local result = common.execute_aws_command_with_input({ "pca-connector-ad", "update-template-group-access-control-entry" })
		assert.is_true(result.success)
	end)

end)