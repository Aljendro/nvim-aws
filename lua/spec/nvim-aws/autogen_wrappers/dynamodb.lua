-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: dynamodb

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS dynamodb service testing", function()
	it("should generate a cli skeleton for batch-execute-statement", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "batch-execute-statement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-item", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "batch-get-item" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-write-item", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "batch-write-item" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-backup", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "create-backup" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-global-table", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "create-global-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-table", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "create-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-backup", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "delete-backup" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-item", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "delete-item" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "delete-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-table", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "delete-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-backup", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-backup" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-continuous-backups", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-continuous-backups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-contributor-insights", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-contributor-insights" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-endpoints", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-export", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-export" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-global-table", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-global-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-global-table-settings", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-global-table-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-import", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-import" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-kinesis-streaming-destination", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-kinesis-streaming-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-limits", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-limits" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-table", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-table-replica-auto-scaling", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-table-replica-auto-scaling" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-time-to-live", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "describe-time-to-live" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-kinesis-streaming-destination", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "disable-kinesis-streaming-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-kinesis-streaming-destination", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "enable-kinesis-streaming-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-statement", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "execute-statement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-transaction", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "execute-transaction" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for export-table-to-point-in-time", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "export-table-to-point-in-time" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-item", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "get-item" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "get-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-table", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "import-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-backups", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "list-backups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-contributor-insights", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "list-contributor-insights" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-exports", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "list-exports" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-global-tables", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "list-global-tables" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-imports", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "list-imports" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tables", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "list-tables" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-of-resource", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "list-tags-of-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-item", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "put-item" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "put-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for query", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-table-from-backup", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "restore-table-from-backup" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-table-to-point-in-time", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "restore-table-to-point-in-time" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for scan", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "scan" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for transact-get-items", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "transact-get-items" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for transact-write-items", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "transact-write-items" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-continuous-backups", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "update-continuous-backups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-contributor-insights", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "update-contributor-insights" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-global-table", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "update-global-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-global-table-settings", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "update-global-table-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-item", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "update-item" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-kinesis-streaming-destination", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "update-kinesis-streaming-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-table", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "update-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-table-replica-auto-scaling", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "update-table-replica-auto-scaling" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-time-to-live", function()
		local result = common.execute_aws_command_with_input({ "dynamodb", "update-time-to-live" })
		assert.is_true(result.success)
	end)

end)