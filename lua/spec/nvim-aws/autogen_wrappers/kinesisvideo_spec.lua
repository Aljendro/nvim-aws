-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: kinesis-video

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.kinesisvideo")

describe("AWS kinesis-video service testing", function()
	it("should generate a cli skeleton with create_signaling_channel", function()
		local result = service.create_signaling_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_stream", function()
		local result = service.create_stream()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_edge_configuration", function()
		local result = service.delete_edge_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_signaling_channel", function()
		local result = service.delete_signaling_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_stream", function()
		local result = service.delete_stream()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_edge_configuration", function()
		local result = service.describe_edge_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_image_generation_configuration", function()
		local result = service.describe_image_generation_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_mapped_resource_configuration", function()
		local result = service.describe_mapped_resource_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_media_storage_configuration", function()
		local result = service.describe_media_storage_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_notification_configuration", function()
		local result = service.describe_notification_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_signaling_channel", function()
		local result = service.describe_signaling_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_stream", function()
		local result = service.describe_stream()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_data_endpoint", function()
		local result = service.get_data_endpoint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_signaling_channel_endpoint", function()
		local result = service.get_signaling_channel_endpoint()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_edge_agent_configurations", function()
		local result = service.list_edge_agent_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_signaling_channels", function()
		local result = service.list_signaling_channels()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_streams", function()
		local result = service.list_streams()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_stream", function()
		local result = service.list_tags_for_stream()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_edge_configuration_update", function()
		local result = service.start_edge_configuration_update()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_stream", function()
		local result = service.tag_stream()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_stream", function()
		local result = service.untag_stream()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_data_retention", function()
		local result = service.update_data_retention()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_image_generation_configuration", function()
		local result = service.update_image_generation_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_media_storage_configuration", function()
		local result = service.update_media_storage_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_notification_configuration", function()
		local result = service.update_notification_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_signaling_channel", function()
		local result = service.update_signaling_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_stream", function()
		local result = service.update_stream()
		assert.is_true(result.success)
	end)

end)