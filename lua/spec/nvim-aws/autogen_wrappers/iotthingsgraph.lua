-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: iotthingsgraph

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.iotthingsgraph")

describe("AWS iotthingsgraph service testing", function()
	it("should generate a cli skeleton with associate_entity_to_thing", function()
		local result = service.associate_entity_to_thing()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_flow_template", function()
		local result = service.create_flow_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_system_instance", function()
		local result = service.create_system_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_system_template", function()
		local result = service.create_system_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_flow_template", function()
		local result = service.delete_flow_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_namespace", function()
		local result = service.delete_namespace()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_system_instance", function()
		local result = service.delete_system_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_system_template", function()
		local result = service.delete_system_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deploy_system_instance", function()
		local result = service.deploy_system_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deprecate_flow_template", function()
		local result = service.deprecate_flow_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deprecate_system_template", function()
		local result = service.deprecate_system_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_namespace", function()
		local result = service.describe_namespace()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with dissociate_entity_from_thing", function()
		local result = service.dissociate_entity_from_thing()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_entities", function()
		local result = service.get_entities()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_flow_template", function()
		local result = service.get_flow_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_flow_template_revisions", function()
		local result = service.get_flow_template_revisions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_namespace_deletion_status", function()
		local result = service.get_namespace_deletion_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_system_instance", function()
		local result = service.get_system_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_system_template", function()
		local result = service.get_system_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_system_template_revisions", function()
		local result = service.get_system_template_revisions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_upload_status", function()
		local result = service.get_upload_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_flow_execution_messages", function()
		local result = service.list_flow_execution_messages()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_entities", function()
		local result = service.search_entities()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_flow_executions", function()
		local result = service.search_flow_executions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_flow_templates", function()
		local result = service.search_flow_templates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_system_instances", function()
		local result = service.search_system_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_system_templates", function()
		local result = service.search_system_templates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_things", function()
		local result = service.search_things()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with undeploy_system_instance", function()
		local result = service.undeploy_system_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_flow_template", function()
		local result = service.update_flow_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_system_template", function()
		local result = service.update_system_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with upload_entity_definitions", function()
		local result = service.upload_entity_definitions()
		assert.is_true(result.success)
	end)

end)