-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: mediapackage

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS mediapackage service testing", function()
	it("should generate a cli skeleton for configure-logs", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "configure-logs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-channel", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "create-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-harvest-job", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "create-harvest-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-origin-endpoint", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "create-origin-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-channel", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "delete-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-origin-endpoint", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "delete-origin-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-channel", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "describe-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-harvest-job", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "describe-harvest-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-origin-endpoint", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "describe-origin-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-channels", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "list-channels" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-harvest-jobs", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "list-harvest-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-origin-endpoints", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "list-origin-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for rotate-channel-credentials", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "rotate-channel-credentials" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for rotate-ingest-endpoint-credentials", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "rotate-ingest-endpoint-credentials" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-channel", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "update-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-origin-endpoint", function()
		local result = common.execute_aws_command_with_input({ "mediapackage", "update-origin-endpoint" })
		assert.is_true(result.success)
	end)

end)