-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: inspector

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS inspector service testing", function()
	it("should generate a cli skeleton for add-attributes-to-findings", function()
		local result = common.execute_aws_command_with_input({ "inspector", "add-attributes-to-findings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-assessment-target", function()
		local result = common.execute_aws_command_with_input({ "inspector", "create-assessment-target" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-assessment-template", function()
		local result = common.execute_aws_command_with_input({ "inspector", "create-assessment-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-exclusions-preview", function()
		local result = common.execute_aws_command_with_input({ "inspector", "create-exclusions-preview" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-resource-group", function()
		local result = common.execute_aws_command_with_input({ "inspector", "create-resource-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-assessment-run", function()
		local result = common.execute_aws_command_with_input({ "inspector", "delete-assessment-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-assessment-target", function()
		local result = common.execute_aws_command_with_input({ "inspector", "delete-assessment-target" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-assessment-template", function()
		local result = common.execute_aws_command_with_input({ "inspector", "delete-assessment-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-assessment-runs", function()
		local result = common.execute_aws_command_with_input({ "inspector", "describe-assessment-runs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-assessment-targets", function()
		local result = common.execute_aws_command_with_input({ "inspector", "describe-assessment-targets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-assessment-templates", function()
		local result = common.execute_aws_command_with_input({ "inspector", "describe-assessment-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-cross-account-access-role", function()
		local result = common.execute_aws_command_with_input({ "inspector", "describe-cross-account-access-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-exclusions", function()
		local result = common.execute_aws_command_with_input({ "inspector", "describe-exclusions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-findings", function()
		local result = common.execute_aws_command_with_input({ "inspector", "describe-findings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-resource-groups", function()
		local result = common.execute_aws_command_with_input({ "inspector", "describe-resource-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-rules-packages", function()
		local result = common.execute_aws_command_with_input({ "inspector", "describe-rules-packages" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-assessment-report", function()
		local result = common.execute_aws_command_with_input({ "inspector", "get-assessment-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-exclusions-preview", function()
		local result = common.execute_aws_command_with_input({ "inspector", "get-exclusions-preview" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-telemetry-metadata", function()
		local result = common.execute_aws_command_with_input({ "inspector", "get-telemetry-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-assessment-run-agents", function()
		local result = common.execute_aws_command_with_input({ "inspector", "list-assessment-run-agents" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-assessment-runs", function()
		local result = common.execute_aws_command_with_input({ "inspector", "list-assessment-runs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-assessment-targets", function()
		local result = common.execute_aws_command_with_input({ "inspector", "list-assessment-targets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-assessment-templates", function()
		local result = common.execute_aws_command_with_input({ "inspector", "list-assessment-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-event-subscriptions", function()
		local result = common.execute_aws_command_with_input({ "inspector", "list-event-subscriptions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-exclusions", function()
		local result = common.execute_aws_command_with_input({ "inspector", "list-exclusions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-findings", function()
		local result = common.execute_aws_command_with_input({ "inspector", "list-findings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-rules-packages", function()
		local result = common.execute_aws_command_with_input({ "inspector", "list-rules-packages" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "inspector", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for preview-agents", function()
		local result = common.execute_aws_command_with_input({ "inspector", "preview-agents" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-cross-account-access-role", function()
		local result = common.execute_aws_command_with_input({ "inspector", "register-cross-account-access-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-attributes-from-findings", function()
		local result = common.execute_aws_command_with_input({ "inspector", "remove-attributes-from-findings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "inspector", "set-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-assessment-run", function()
		local result = common.execute_aws_command_with_input({ "inspector", "start-assessment-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-assessment-run", function()
		local result = common.execute_aws_command_with_input({ "inspector", "stop-assessment-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for subscribe-to-event", function()
		local result = common.execute_aws_command_with_input({ "inspector", "subscribe-to-event" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for unsubscribe-from-event", function()
		local result = common.execute_aws_command_with_input({ "inspector", "unsubscribe-from-event" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-assessment-target", function()
		local result = common.execute_aws_command_with_input({ "inspector", "update-assessment-target" })
		assert.is_true(result.success)
	end)

end)