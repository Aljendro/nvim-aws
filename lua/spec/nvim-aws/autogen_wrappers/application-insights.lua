-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: application-insights

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS application-insights service testing", function()
	it("should generate a cli skeleton for add-workload", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "add-workload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-application", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "create-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-component", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "create-component" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-log-pattern", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "create-log-pattern" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-application", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "delete-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-component", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "delete-component" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-log-pattern", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "delete-log-pattern" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-application", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "describe-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-component", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "describe-component" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-component-configuration", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "describe-component-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-component-configuration-recommendation", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "describe-component-configuration-recommendation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-log-pattern", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "describe-log-pattern" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-observation", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "describe-observation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-problem", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "describe-problem" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-problem-observations", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "describe-problem-observations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-workload", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "describe-workload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-applications", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "list-applications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-components", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "list-components" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-configuration-history", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "list-configuration-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-log-pattern-sets", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "list-log-pattern-sets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-log-patterns", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "list-log-patterns" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-problems", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "list-problems" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-workloads", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "list-workloads" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-workload", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "remove-workload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-application", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "update-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-component", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "update-component" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-component-configuration", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "update-component-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-log-pattern", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "update-log-pattern" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-problem", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "update-problem" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-workload", function()
		local result = common.execute_aws_command_with_input({ "application-insights", "update-workload" })
		assert.is_true(result.success)
	end)

end)