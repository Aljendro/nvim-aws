-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: rum

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.rum")

describe("AWS rum service testing", function()
	it("should generate a cli skeleton with batch_create_rum_metric_definitions", function()
		local result = service.batch_create_rum_metric_definitions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_delete_rum_metric_definitions", function()
		local result = service.batch_delete_rum_metric_definitions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_rum_metric_definitions", function()
		local result = service.batch_get_rum_metric_definitions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_app_monitor", function()
		local result = service.create_app_monitor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_app_monitor", function()
		local result = service.delete_app_monitor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_resource_policy", function()
		local result = service.delete_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_rum_metrics_destination", function()
		local result = service.delete_rum_metrics_destination()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_app_monitor", function()
		local result = service.get_app_monitor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_app_monitor_data", function()
		local result = service.get_app_monitor_data()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_resource_policy", function()
		local result = service.get_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_app_monitors", function()
		local result = service.list_app_monitors()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_rum_metrics_destinations", function()
		local result = service.list_rum_metrics_destinations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_resource_policy", function()
		local result = service.put_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_rum_events", function()
		local result = service.put_rum_events()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_rum_metrics_destination", function()
		local result = service.put_rum_metrics_destination()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_app_monitor", function()
		local result = service.update_app_monitor()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_rum_metric_definition", function()
		local result = service.update_rum_metric_definition()
		assert.is_true(result.success)
	end)

end)
