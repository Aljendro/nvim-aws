-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: lookoutequipment

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.lookoutequipment")

describe("AWS lookoutequipment service testing", function()
	it("should generate a cli skeleton with create_dataset", function()
		local result = service.create_dataset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_inference_scheduler", function()
		local result = service.create_inference_scheduler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_label", function()
		local result = service.create_label()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_label_group", function()
		local result = service.create_label_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_model", function()
		local result = service.create_model()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_retraining_scheduler", function()
		local result = service.create_retraining_scheduler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_dataset", function()
		local result = service.delete_dataset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_inference_scheduler", function()
		local result = service.delete_inference_scheduler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_label", function()
		local result = service.delete_label()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_label_group", function()
		local result = service.delete_label_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_model", function()
		local result = service.delete_model()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_resource_policy", function()
		local result = service.delete_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_retraining_scheduler", function()
		local result = service.delete_retraining_scheduler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_data_ingestion_job", function()
		local result = service.describe_data_ingestion_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_dataset", function()
		local result = service.describe_dataset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_inference_scheduler", function()
		local result = service.describe_inference_scheduler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_label", function()
		local result = service.describe_label()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_label_group", function()
		local result = service.describe_label_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_model", function()
		local result = service.describe_model()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_model_version", function()
		local result = service.describe_model_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_resource_policy", function()
		local result = service.describe_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_retraining_scheduler", function()
		local result = service.describe_retraining_scheduler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_dataset", function()
		local result = service.import_dataset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_model_version", function()
		local result = service.import_model_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_ingestion_jobs", function()
		local result = service.list_data_ingestion_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_datasets", function()
		local result = service.list_datasets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_inference_events", function()
		local result = service.list_inference_events()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_inference_executions", function()
		local result = service.list_inference_executions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_inference_schedulers", function()
		local result = service.list_inference_schedulers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_label_groups", function()
		local result = service.list_label_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_labels", function()
		local result = service.list_labels()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_model_versions", function()
		local result = service.list_model_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_models", function()
		local result = service.list_models()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_retraining_schedulers", function()
		local result = service.list_retraining_schedulers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sensor_statistics", function()
		local result = service.list_sensor_statistics()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_resource_policy", function()
		local result = service.put_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_data_ingestion_job", function()
		local result = service.start_data_ingestion_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_inference_scheduler", function()
		local result = service.start_inference_scheduler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_retraining_scheduler", function()
		local result = service.start_retraining_scheduler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_inference_scheduler", function()
		local result = service.stop_inference_scheduler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_retraining_scheduler", function()
		local result = service.stop_retraining_scheduler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_active_model_version", function()
		local result = service.update_active_model_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_inference_scheduler", function()
		local result = service.update_inference_scheduler()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_label_group", function()
		local result = service.update_label_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_model", function()
		local result = service.update_model()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_retraining_scheduler", function()
		local result = service.update_retraining_scheduler()
		assert.is_true(result.success)
	end)

end)
