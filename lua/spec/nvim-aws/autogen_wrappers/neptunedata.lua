-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: neptunedata

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS neptunedata service testing", function()
	it("should generate a cli skeleton for cancel-gremlin-query", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "cancel-gremlin-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-loader-job", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "cancel-loader-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-ml-data-processing-job", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "cancel-ml-data-processing-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-ml-model-training-job", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "cancel-ml-model-training-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-ml-model-transform-job", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "cancel-ml-model-transform-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-open-cypher-query", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "cancel-open-cypher-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-ml-endpoint", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "create-ml-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ml-endpoint", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "delete-ml-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-propertygraph-statistics", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "delete-propertygraph-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-sparql-statistics", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "delete-sparql-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-fast-reset", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "execute-fast-reset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-gremlin-explain-query", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "execute-gremlin-explain-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-gremlin-profile-query", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "execute-gremlin-profile-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-gremlin-query", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "execute-gremlin-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-open-cypher-explain-query", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "execute-open-cypher-explain-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-open-cypher-query", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "execute-open-cypher-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-engine-status", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-engine-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-gremlin-query-status", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-gremlin-query-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-loader-job-status", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-loader-job-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ml-data-processing-job", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-ml-data-processing-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ml-endpoint", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-ml-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ml-model-training-job", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-ml-model-training-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ml-model-transform-job", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-ml-model-transform-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-open-cypher-query-status", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-open-cypher-query-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-propertygraph-statistics", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-propertygraph-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-propertygraph-stream", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-propertygraph-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-propertygraph-summary", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-propertygraph-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-rdf-graph-summary", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-rdf-graph-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-sparql-statistics", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-sparql-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-sparql-stream", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "get-sparql-stream" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-gremlin-queries", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "list-gremlin-queries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-loader-jobs", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "list-loader-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-ml-data-processing-jobs", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "list-ml-data-processing-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-ml-endpoints", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "list-ml-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-ml-model-training-jobs", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "list-ml-model-training-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-ml-model-transform-jobs", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "list-ml-model-transform-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-open-cypher-queries", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "list-open-cypher-queries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for manage-propertygraph-statistics", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "manage-propertygraph-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for manage-sparql-statistics", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "manage-sparql-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-loader-job", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "start-loader-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-ml-data-processing-job", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "start-ml-data-processing-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-ml-model-training-job", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "start-ml-model-training-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-ml-model-transform-job", function()
		local result = common.execute_aws_command_with_input({ "neptunedata", "start-ml-model-transform-job" })
		assert.is_true(result.success)
	end)

end)