-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: ecr

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS ecr service testing", function()
	it("should generate a cli skeleton for batch-check-layer-availability", function()
		local result = common.execute_aws_command_with_input({ "ecr", "batch-check-layer-availability" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-delete-image", function()
		local result = common.execute_aws_command_with_input({ "ecr", "batch-delete-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-image", function()
		local result = common.execute_aws_command_with_input({ "ecr", "batch-get-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-repository-scanning-configuration", function()
		local result = common.execute_aws_command_with_input({ "ecr", "batch-get-repository-scanning-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for complete-layer-upload", function()
		local result = common.execute_aws_command_with_input({ "ecr", "complete-layer-upload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-pull-through-cache-rule", function()
		local result = common.execute_aws_command_with_input({ "ecr", "create-pull-through-cache-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-repository", function()
		local result = common.execute_aws_command_with_input({ "ecr", "create-repository" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-repository-creation-template", function()
		local result = common.execute_aws_command_with_input({ "ecr", "create-repository-creation-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-lifecycle-policy", function()
		local result = common.execute_aws_command_with_input({ "ecr", "delete-lifecycle-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-pull-through-cache-rule", function()
		local result = common.execute_aws_command_with_input({ "ecr", "delete-pull-through-cache-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-registry-policy", function()
		local result = common.execute_aws_command_with_input({ "ecr", "delete-registry-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-repository", function()
		local result = common.execute_aws_command_with_input({ "ecr", "delete-repository" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-repository-creation-template", function()
		local result = common.execute_aws_command_with_input({ "ecr", "delete-repository-creation-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-repository-policy", function()
		local result = common.execute_aws_command_with_input({ "ecr", "delete-repository-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-image-replication-status", function()
		local result = common.execute_aws_command_with_input({ "ecr", "describe-image-replication-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-image-scan-findings", function()
		local result = common.execute_aws_command_with_input({ "ecr", "describe-image-scan-findings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-images", function()
		local result = common.execute_aws_command_with_input({ "ecr", "describe-images" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-pull-through-cache-rules", function()
		local result = common.execute_aws_command_with_input({ "ecr", "describe-pull-through-cache-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-registry", function()
		local result = common.execute_aws_command_with_input({ "ecr", "describe-registry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-repositories", function()
		local result = common.execute_aws_command_with_input({ "ecr", "describe-repositories" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-repository-creation-templates", function()
		local result = common.execute_aws_command_with_input({ "ecr", "describe-repository-creation-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-account-setting", function()
		local result = common.execute_aws_command_with_input({ "ecr", "get-account-setting" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-authorization-token", function()
		local result = common.execute_aws_command_with_input({ "ecr", "get-authorization-token" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-download-url-for-layer", function()
		local result = common.execute_aws_command_with_input({ "ecr", "get-download-url-for-layer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-lifecycle-policy", function()
		local result = common.execute_aws_command_with_input({ "ecr", "get-lifecycle-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-lifecycle-policy-preview", function()
		local result = common.execute_aws_command_with_input({ "ecr", "get-lifecycle-policy-preview" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-registry-policy", function()
		local result = common.execute_aws_command_with_input({ "ecr", "get-registry-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-registry-scanning-configuration", function()
		local result = common.execute_aws_command_with_input({ "ecr", "get-registry-scanning-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-repository-policy", function()
		local result = common.execute_aws_command_with_input({ "ecr", "get-repository-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for initiate-layer-upload", function()
		local result = common.execute_aws_command_with_input({ "ecr", "initiate-layer-upload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-images", function()
		local result = common.execute_aws_command_with_input({ "ecr", "list-images" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "ecr", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-account-setting", function()
		local result = common.execute_aws_command_with_input({ "ecr", "put-account-setting" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-image", function()
		local result = common.execute_aws_command_with_input({ "ecr", "put-image" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-image-scanning-configuration", function()
		local result = common.execute_aws_command_with_input({ "ecr", "put-image-scanning-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-image-tag-mutability", function()
		local result = common.execute_aws_command_with_input({ "ecr", "put-image-tag-mutability" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-lifecycle-policy", function()
		local result = common.execute_aws_command_with_input({ "ecr", "put-lifecycle-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-registry-policy", function()
		local result = common.execute_aws_command_with_input({ "ecr", "put-registry-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-registry-scanning-configuration", function()
		local result = common.execute_aws_command_with_input({ "ecr", "put-registry-scanning-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-replication-configuration", function()
		local result = common.execute_aws_command_with_input({ "ecr", "put-replication-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-repository-policy", function()
		local result = common.execute_aws_command_with_input({ "ecr", "set-repository-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-image-scan", function()
		local result = common.execute_aws_command_with_input({ "ecr", "start-image-scan" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-lifecycle-policy-preview", function()
		local result = common.execute_aws_command_with_input({ "ecr", "start-lifecycle-policy-preview" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "ecr", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "ecr", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-pull-through-cache-rule", function()
		local result = common.execute_aws_command_with_input({ "ecr", "update-pull-through-cache-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-repository-creation-template", function()
		local result = common.execute_aws_command_with_input({ "ecr", "update-repository-creation-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for upload-layer-part", function()
		local result = common.execute_aws_command_with_input({ "ecr", "upload-layer-part" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for validate-pull-through-cache-rule", function()
		local result = common.execute_aws_command_with_input({ "ecr", "validate-pull-through-cache-rule" })
		assert.is_true(result.success)
	end)

end)