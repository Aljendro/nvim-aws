-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: iam

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS iam service testing", function()
	it("should generate a cli skeleton for add-client-id-to-open-id-connect-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "add-client-id-to-open-id-connect-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-role-to-instance-profile", function()
		local result = common.execute_aws_command_with_input({ "iam", "add-role-to-instance-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-user-to-group", function()
		local result = common.execute_aws_command_with_input({ "iam", "add-user-to-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-group-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "attach-group-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-role-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "attach-role-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-user-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "attach-user-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for change-password", function()
		local result = common.execute_aws_command_with_input({ "iam", "change-password" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-access-key", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-access-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-account-alias", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-account-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-group", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-instance-profile", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-instance-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-login-profile", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-login-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-open-id-connect-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-open-id-connect-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-policy-version", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-policy-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-role", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-saml-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-saml-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-service-linked-role", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-service-linked-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-service-specific-credential", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-service-specific-credential" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-user", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-virtual-mfa-device", function()
		local result = common.execute_aws_command_with_input({ "iam", "create-virtual-mfa-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deactivate-mfa-device", function()
		local result = common.execute_aws_command_with_input({ "iam", "deactivate-mfa-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-access-key", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-access-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-account-alias", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-account-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-account-password-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-account-password-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-group", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-group-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-group-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-instance-profile", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-instance-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-login-profile", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-login-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-open-id-connect-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-open-id-connect-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-policy-version", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-policy-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-role", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-role-permissions-boundary", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-role-permissions-boundary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-role-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-role-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-saml-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-saml-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ssh-public-key", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-ssh-public-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-server-certificate", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-server-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-service-linked-role", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-service-linked-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-service-specific-credential", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-service-specific-credential" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-signing-certificate", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-signing-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-user", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-user-permissions-boundary", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-user-permissions-boundary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-user-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-user-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-virtual-mfa-device", function()
		local result = common.execute_aws_command_with_input({ "iam", "delete-virtual-mfa-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-group-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "detach-group-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-role-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "detach-role-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-user-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "detach-user-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-organizations-root-credentials-management", function()
		local result = common.execute_aws_command_with_input({ "iam", "disable-organizations-root-credentials-management" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-organizations-root-sessions", function()
		local result = common.execute_aws_command_with_input({ "iam", "disable-organizations-root-sessions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-mfa-device", function()
		local result = common.execute_aws_command_with_input({ "iam", "enable-mfa-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-organizations-root-credentials-management", function()
		local result = common.execute_aws_command_with_input({ "iam", "enable-organizations-root-credentials-management" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-organizations-root-sessions", function()
		local result = common.execute_aws_command_with_input({ "iam", "enable-organizations-root-sessions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-credential-report", function()
		local result = common.execute_aws_command_with_input({ "iam", "generate-credential-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-organizations-access-report", function()
		local result = common.execute_aws_command_with_input({ "iam", "generate-organizations-access-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-service-last-accessed-details", function()
		local result = common.execute_aws_command_with_input({ "iam", "generate-service-last-accessed-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-key-last-used", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-access-key-last-used" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-account-authorization-details", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-account-authorization-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-account-password-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-account-password-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-account-summary", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-account-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-context-keys-for-custom-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-context-keys-for-custom-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-context-keys-for-principal-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-context-keys-for-principal-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-credential-report", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-credential-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-group", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-group-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-group-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-instance-profile", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-instance-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-login-profile", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-login-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-mfa-device", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-mfa-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-open-id-connect-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-open-id-connect-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-organizations-access-report", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-organizations-access-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-policy-version", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-policy-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-role", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-role-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-role-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-saml-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-saml-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ssh-public-key", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-ssh-public-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-server-certificate", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-server-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-last-accessed-details", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-service-last-accessed-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-last-accessed-details-with-entities", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-service-last-accessed-details-with-entities" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-linked-role-deletion-status", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-service-linked-role-deletion-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-user", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-user-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "get-user-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-access-keys", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-access-keys" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-account-aliases", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-account-aliases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-attached-group-policies", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-attached-group-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-attached-role-policies", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-attached-role-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-attached-user-policies", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-attached-user-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-entities-for-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-entities-for-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-group-policies", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-group-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-groups", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-groups-for-user", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-groups-for-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-instance-profile-tags", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-instance-profile-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-instance-profiles", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-instance-profiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-instance-profiles-for-role", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-instance-profiles-for-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-mfa-device-tags", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-mfa-device-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-mfa-devices", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-mfa-devices" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-open-id-connect-provider-tags", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-open-id-connect-provider-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-open-id-connect-providers", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-open-id-connect-providers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-organizations-features", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-organizations-features" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-policies", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-policies-granting-service-access", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-policies-granting-service-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-policy-tags", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-policy-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-policy-versions", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-policy-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-role-policies", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-role-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-role-tags", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-role-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-roles", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-roles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-saml-provider-tags", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-saml-provider-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-saml-providers", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-saml-providers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-ssh-public-keys", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-ssh-public-keys" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-server-certificate-tags", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-server-certificate-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-server-certificates", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-server-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-specific-credentials", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-service-specific-credentials" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-signing-certificates", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-signing-certificates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-user-policies", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-user-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-user-tags", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-user-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-users", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-users" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-virtual-mfa-devices", function()
		local result = common.execute_aws_command_with_input({ "iam", "list-virtual-mfa-devices" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-group-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "put-group-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-role-permissions-boundary", function()
		local result = common.execute_aws_command_with_input({ "iam", "put-role-permissions-boundary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-role-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "put-role-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-user-permissions-boundary", function()
		local result = common.execute_aws_command_with_input({ "iam", "put-user-permissions-boundary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-user-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "put-user-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-client-id-from-open-id-connect-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "remove-client-id-from-open-id-connect-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-role-from-instance-profile", function()
		local result = common.execute_aws_command_with_input({ "iam", "remove-role-from-instance-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-user-from-group", function()
		local result = common.execute_aws_command_with_input({ "iam", "remove-user-from-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reset-service-specific-credential", function()
		local result = common.execute_aws_command_with_input({ "iam", "reset-service-specific-credential" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for resync-mfa-device", function()
		local result = common.execute_aws_command_with_input({ "iam", "resync-mfa-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-default-policy-version", function()
		local result = common.execute_aws_command_with_input({ "iam", "set-default-policy-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-security-token-service-preferences", function()
		local result = common.execute_aws_command_with_input({ "iam", "set-security-token-service-preferences" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for simulate-custom-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "simulate-custom-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for simulate-principal-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "simulate-principal-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-instance-profile", function()
		local result = common.execute_aws_command_with_input({ "iam", "tag-instance-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-mfa-device", function()
		local result = common.execute_aws_command_with_input({ "iam", "tag-mfa-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-open-id-connect-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "tag-open-id-connect-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "tag-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-role", function()
		local result = common.execute_aws_command_with_input({ "iam", "tag-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-saml-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "tag-saml-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-server-certificate", function()
		local result = common.execute_aws_command_with_input({ "iam", "tag-server-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-user", function()
		local result = common.execute_aws_command_with_input({ "iam", "tag-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-instance-profile", function()
		local result = common.execute_aws_command_with_input({ "iam", "untag-instance-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-mfa-device", function()
		local result = common.execute_aws_command_with_input({ "iam", "untag-mfa-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-open-id-connect-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "untag-open-id-connect-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "untag-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-role", function()
		local result = common.execute_aws_command_with_input({ "iam", "untag-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-saml-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "untag-saml-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-server-certificate", function()
		local result = common.execute_aws_command_with_input({ "iam", "untag-server-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-user", function()
		local result = common.execute_aws_command_with_input({ "iam", "untag-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-access-key", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-access-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-account-password-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-account-password-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-assume-role-policy", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-assume-role-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-group", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-login-profile", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-login-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-open-id-connect-provider-thumbprint", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-open-id-connect-provider-thumbprint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-role", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-role" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-role-description", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-role-description" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-saml-provider", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-saml-provider" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-ssh-public-key", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-ssh-public-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-server-certificate", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-server-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-service-specific-credential", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-service-specific-credential" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-signing-certificate", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-signing-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-user", function()
		local result = common.execute_aws_command_with_input({ "iam", "update-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for upload-ssh-public-key", function()
		local result = common.execute_aws_command_with_input({ "iam", "upload-ssh-public-key" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for upload-server-certificate", function()
		local result = common.execute_aws_command_with_input({ "iam", "upload-server-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for upload-signing-certificate", function()
		local result = common.execute_aws_command_with_input({ "iam", "upload-signing-certificate" })
		assert.is_true(result.success)
	end)

end)