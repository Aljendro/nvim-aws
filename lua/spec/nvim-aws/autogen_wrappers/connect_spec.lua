-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: connect

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.connect")

describe("AWS connect service testing", function()
	it("should generate a cli skeleton with activate_evaluation_form", function()
		local result = service.activate_evaluation_form()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_analytics_data_set", function()
		local result = service.associate_analytics_data_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_approved_origin", function()
		local result = service.associate_approved_origin()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_bot", function()
		local result = service.associate_bot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_default_vocabulary", function()
		local result = service.associate_default_vocabulary()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_flow", function()
		local result = service.associate_flow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_instance_storage_config", function()
		local result = service.associate_instance_storage_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_lambda_function", function()
		local result = service.associate_lambda_function()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_lex_bot", function()
		local result = service.associate_lex_bot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_phone_number_contact_flow", function()
		local result = service.associate_phone_number_contact_flow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_queue_quick_connects", function()
		local result = service.associate_queue_quick_connects()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_routing_profile_queues", function()
		local result = service.associate_routing_profile_queues()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_security_key", function()
		local result = service.associate_security_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_traffic_distribution_group_user", function()
		local result = service.associate_traffic_distribution_group_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_user_proficiencies", function()
		local result = service.associate_user_proficiencies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_associate_analytics_data_set", function()
		local result = service.batch_associate_analytics_data_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_disassociate_analytics_data_set", function()
		local result = service.batch_disassociate_analytics_data_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_attached_file_metadata", function()
		local result = service.batch_get_attached_file_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_flow_association", function()
		local result = service.batch_get_flow_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_put_contact", function()
		local result = service.batch_put_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with claim_phone_number", function()
		local result = service.claim_phone_number()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with complete_attached_file_upload", function()
		local result = service.complete_attached_file_upload()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_agent_status", function()
		local result = service.create_agent_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_contact", function()
		local result = service.create_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_contact_flow", function()
		local result = service.create_contact_flow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_contact_flow_module", function()
		local result = service.create_contact_flow_module()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_contact_flow_version", function()
		local result = service.create_contact_flow_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_email_address", function()
		local result = service.create_email_address()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_evaluation_form", function()
		local result = service.create_evaluation_form()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_hours_of_operation", function()
		local result = service.create_hours_of_operation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_hours_of_operation_override", function()
		local result = service.create_hours_of_operation_override()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_instance", function()
		local result = service.create_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_integration_association", function()
		local result = service.create_integration_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_participant", function()
		local result = service.create_participant()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_persistent_contact_association", function()
		local result = service.create_persistent_contact_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_predefined_attribute", function()
		local result = service.create_predefined_attribute()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_prompt", function()
		local result = service.create_prompt()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_push_notification_registration", function()
		local result = service.create_push_notification_registration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_queue", function()
		local result = service.create_queue()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_quick_connect", function()
		local result = service.create_quick_connect()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_routing_profile", function()
		local result = service.create_routing_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_rule", function()
		local result = service.create_rule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_security_profile", function()
		local result = service.create_security_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_task_template", function()
		local result = service.create_task_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_traffic_distribution_group", function()
		local result = service.create_traffic_distribution_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_use_case", function()
		local result = service.create_use_case()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_user", function()
		local result = service.create_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_user_hierarchy_group", function()
		local result = service.create_user_hierarchy_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_view", function()
		local result = service.create_view()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_view_version", function()
		local result = service.create_view_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_vocabulary", function()
		local result = service.create_vocabulary()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deactivate_evaluation_form", function()
		local result = service.deactivate_evaluation_form()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_attached_file", function()
		local result = service.delete_attached_file()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_contact_evaluation", function()
		local result = service.delete_contact_evaluation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_contact_flow", function()
		local result = service.delete_contact_flow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_contact_flow_module", function()
		local result = service.delete_contact_flow_module()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_contact_flow_version", function()
		local result = service.delete_contact_flow_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_email_address", function()
		local result = service.delete_email_address()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_evaluation_form", function()
		local result = service.delete_evaluation_form()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_hours_of_operation", function()
		local result = service.delete_hours_of_operation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_hours_of_operation_override", function()
		local result = service.delete_hours_of_operation_override()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_instance", function()
		local result = service.delete_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_integration_association", function()
		local result = service.delete_integration_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_predefined_attribute", function()
		local result = service.delete_predefined_attribute()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_prompt", function()
		local result = service.delete_prompt()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_push_notification_registration", function()
		local result = service.delete_push_notification_registration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_queue", function()
		local result = service.delete_queue()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_quick_connect", function()
		local result = service.delete_quick_connect()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_routing_profile", function()
		local result = service.delete_routing_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_rule", function()
		local result = service.delete_rule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_security_profile", function()
		local result = service.delete_security_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_task_template", function()
		local result = service.delete_task_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_traffic_distribution_group", function()
		local result = service.delete_traffic_distribution_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_use_case", function()
		local result = service.delete_use_case()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_user", function()
		local result = service.delete_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_user_hierarchy_group", function()
		local result = service.delete_user_hierarchy_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_view", function()
		local result = service.delete_view()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_view_version", function()
		local result = service.delete_view_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_vocabulary", function()
		local result = service.delete_vocabulary()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_agent_status", function()
		local result = service.describe_agent_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_authentication_profile", function()
		local result = service.describe_authentication_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_contact", function()
		local result = service.describe_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_contact_evaluation", function()
		local result = service.describe_contact_evaluation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_contact_flow", function()
		local result = service.describe_contact_flow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_contact_flow_module", function()
		local result = service.describe_contact_flow_module()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_email_address", function()
		local result = service.describe_email_address()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_evaluation_form", function()
		local result = service.describe_evaluation_form()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_hours_of_operation", function()
		local result = service.describe_hours_of_operation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_hours_of_operation_override", function()
		local result = service.describe_hours_of_operation_override()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_instance", function()
		local result = service.describe_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_instance_attribute", function()
		local result = service.describe_instance_attribute()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_instance_storage_config", function()
		local result = service.describe_instance_storage_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_phone_number", function()
		local result = service.describe_phone_number()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_predefined_attribute", function()
		local result = service.describe_predefined_attribute()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_prompt", function()
		local result = service.describe_prompt()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_queue", function()
		local result = service.describe_queue()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_quick_connect", function()
		local result = service.describe_quick_connect()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_routing_profile", function()
		local result = service.describe_routing_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_rule", function()
		local result = service.describe_rule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_security_profile", function()
		local result = service.describe_security_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_traffic_distribution_group", function()
		local result = service.describe_traffic_distribution_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_user", function()
		local result = service.describe_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_user_hierarchy_group", function()
		local result = service.describe_user_hierarchy_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_user_hierarchy_structure", function()
		local result = service.describe_user_hierarchy_structure()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_view", function()
		local result = service.describe_view()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_vocabulary", function()
		local result = service.describe_vocabulary()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_analytics_data_set", function()
		local result = service.disassociate_analytics_data_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_approved_origin", function()
		local result = service.disassociate_approved_origin()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_bot", function()
		local result = service.disassociate_bot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_flow", function()
		local result = service.disassociate_flow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_instance_storage_config", function()
		local result = service.disassociate_instance_storage_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_lambda_function", function()
		local result = service.disassociate_lambda_function()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_lex_bot", function()
		local result = service.disassociate_lex_bot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_phone_number_contact_flow", function()
		local result = service.disassociate_phone_number_contact_flow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_queue_quick_connects", function()
		local result = service.disassociate_queue_quick_connects()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_routing_profile_queues", function()
		local result = service.disassociate_routing_profile_queues()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_security_key", function()
		local result = service.disassociate_security_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_traffic_distribution_group_user", function()
		local result = service.disassociate_traffic_distribution_group_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_user_proficiencies", function()
		local result = service.disassociate_user_proficiencies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with dismiss_user_contact", function()
		local result = service.dismiss_user_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_attached_file", function()
		local result = service.get_attached_file()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_contact_attributes", function()
		local result = service.get_contact_attributes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_current_metric_data", function()
		local result = service.get_current_metric_data()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_current_user_data", function()
		local result = service.get_current_user_data()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_effective_hours_of_operations", function()
		local result = service.get_effective_hours_of_operations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_federation_token", function()
		local result = service.get_federation_token()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_flow_association", function()
		local result = service.get_flow_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_metric_data", function()
		local result = service.get_metric_data()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_metric_data_v2", function()
		local result = service.get_metric_data_v2()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_prompt_file", function()
		local result = service.get_prompt_file()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_task_template", function()
		local result = service.get_task_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_traffic_distribution", function()
		local result = service.get_traffic_distribution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_phone_number", function()
		local result = service.import_phone_number()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_agent_statuses", function()
		local result = service.list_agent_statuses()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_analytics_data_associations", function()
		local result = service.list_analytics_data_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_analytics_data_lake_data_sets", function()
		local result = service.list_analytics_data_lake_data_sets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_approved_origins", function()
		local result = service.list_approved_origins()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_associated_contacts", function()
		local result = service.list_associated_contacts()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_authentication_profiles", function()
		local result = service.list_authentication_profiles()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_bots", function()
		local result = service.list_bots()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_contact_evaluations", function()
		local result = service.list_contact_evaluations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_contact_flow_modules", function()
		local result = service.list_contact_flow_modules()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_contact_flow_versions", function()
		local result = service.list_contact_flow_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_contact_flows", function()
		local result = service.list_contact_flows()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_contact_references", function()
		local result = service.list_contact_references()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_default_vocabularies", function()
		local result = service.list_default_vocabularies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_evaluation_form_versions", function()
		local result = service.list_evaluation_form_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_evaluation_forms", function()
		local result = service.list_evaluation_forms()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_flow_associations", function()
		local result = service.list_flow_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_hours_of_operation_overrides", function()
		local result = service.list_hours_of_operation_overrides()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_hours_of_operations", function()
		local result = service.list_hours_of_operations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_instance_attributes", function()
		local result = service.list_instance_attributes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_instance_storage_configs", function()
		local result = service.list_instance_storage_configs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_instances", function()
		local result = service.list_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_integration_associations", function()
		local result = service.list_integration_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_lambda_functions", function()
		local result = service.list_lambda_functions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_lex_bots", function()
		local result = service.list_lex_bots()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_phone_numbers", function()
		local result = service.list_phone_numbers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_phone_numbers_v2", function()
		local result = service.list_phone_numbers_v2()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_predefined_attributes", function()
		local result = service.list_predefined_attributes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_prompts", function()
		local result = service.list_prompts()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_queue_quick_connects", function()
		local result = service.list_queue_quick_connects()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_queues", function()
		local result = service.list_queues()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_quick_connects", function()
		local result = service.list_quick_connects()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_realtime_contact_analysis_segments_v2", function()
		local result = service.list_realtime_contact_analysis_segments_v2()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_routing_profile_queues", function()
		local result = service.list_routing_profile_queues()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_routing_profiles", function()
		local result = service.list_routing_profiles()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_rules", function()
		local result = service.list_rules()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_security_keys", function()
		local result = service.list_security_keys()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_security_profile_applications", function()
		local result = service.list_security_profile_applications()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_security_profile_permissions", function()
		local result = service.list_security_profile_permissions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_security_profiles", function()
		local result = service.list_security_profiles()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_task_templates", function()
		local result = service.list_task_templates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_traffic_distribution_group_users", function()
		local result = service.list_traffic_distribution_group_users()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_traffic_distribution_groups", function()
		local result = service.list_traffic_distribution_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_use_cases", function()
		local result = service.list_use_cases()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_user_hierarchy_groups", function()
		local result = service.list_user_hierarchy_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_user_proficiencies", function()
		local result = service.list_user_proficiencies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_users", function()
		local result = service.list_users()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_view_versions", function()
		local result = service.list_view_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_views", function()
		local result = service.list_views()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with monitor_contact", function()
		local result = service.monitor_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with pause_contact", function()
		local result = service.pause_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_user_status", function()
		local result = service.put_user_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with release_phone_number", function()
		local result = service.release_phone_number()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with replicate_instance", function()
		local result = service.replicate_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with resume_contact", function()
		local result = service.resume_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with resume_contact_recording", function()
		local result = service.resume_contact_recording()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_agent_statuses", function()
		local result = service.search_agent_statuses()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_available_phone_numbers", function()
		local result = service.search_available_phone_numbers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_contact_flow_modules", function()
		local result = service.search_contact_flow_modules()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_contact_flows", function()
		local result = service.search_contact_flows()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_contacts", function()
		local result = service.search_contacts()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_email_addresses", function()
		local result = service.search_email_addresses()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_hours_of_operation_overrides", function()
		local result = service.search_hours_of_operation_overrides()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_hours_of_operations", function()
		local result = service.search_hours_of_operations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_predefined_attributes", function()
		local result = service.search_predefined_attributes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_prompts", function()
		local result = service.search_prompts()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_queues", function()
		local result = service.search_queues()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_quick_connects", function()
		local result = service.search_quick_connects()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_resource_tags", function()
		local result = service.search_resource_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_routing_profiles", function()
		local result = service.search_routing_profiles()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_security_profiles", function()
		local result = service.search_security_profiles()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_user_hierarchy_groups", function()
		local result = service.search_user_hierarchy_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_users", function()
		local result = service.search_users()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_vocabularies", function()
		local result = service.search_vocabularies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with send_chat_integration_event", function()
		local result = service.send_chat_integration_event()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with send_outbound_email", function()
		local result = service.send_outbound_email()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_attached_file_upload", function()
		local result = service.start_attached_file_upload()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_chat_contact", function()
		local result = service.start_chat_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_contact_evaluation", function()
		local result = service.start_contact_evaluation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_contact_recording", function()
		local result = service.start_contact_recording()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_contact_streaming", function()
		local result = service.start_contact_streaming()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_email_contact", function()
		local result = service.start_email_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_outbound_chat_contact", function()
		local result = service.start_outbound_chat_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_outbound_email_contact", function()
		local result = service.start_outbound_email_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_outbound_voice_contact", function()
		local result = service.start_outbound_voice_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_screen_sharing", function()
		local result = service.start_screen_sharing()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_task_contact", function()
		local result = service.start_task_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_web_rtc_contact", function()
		local result = service.start_web_rtc_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_contact", function()
		local result = service.stop_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_contact_recording", function()
		local result = service.stop_contact_recording()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_contact_streaming", function()
		local result = service.stop_contact_streaming()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with submit_contact_evaluation", function()
		local result = service.submit_contact_evaluation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with suspend_contact_recording", function()
		local result = service.suspend_contact_recording()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_contact", function()
		local result = service.tag_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with transfer_contact", function()
		local result = service.transfer_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_contact", function()
		local result = service.untag_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_agent_status", function()
		local result = service.update_agent_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_authentication_profile", function()
		local result = service.update_authentication_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_contact", function()
		local result = service.update_contact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_contact_attributes", function()
		local result = service.update_contact_attributes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_contact_evaluation", function()
		local result = service.update_contact_evaluation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_contact_flow_content", function()
		local result = service.update_contact_flow_content()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_contact_flow_metadata", function()
		local result = service.update_contact_flow_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_contact_flow_module_content", function()
		local result = service.update_contact_flow_module_content()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_contact_flow_module_metadata", function()
		local result = service.update_contact_flow_module_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_contact_flow_name", function()
		local result = service.update_contact_flow_name()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_contact_routing_data", function()
		local result = service.update_contact_routing_data()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_contact_schedule", function()
		local result = service.update_contact_schedule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_email_address_metadata", function()
		local result = service.update_email_address_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_evaluation_form", function()
		local result = service.update_evaluation_form()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_hours_of_operation", function()
		local result = service.update_hours_of_operation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_hours_of_operation_override", function()
		local result = service.update_hours_of_operation_override()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_instance_attribute", function()
		local result = service.update_instance_attribute()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_instance_storage_config", function()
		local result = service.update_instance_storage_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_participant_authentication", function()
		local result = service.update_participant_authentication()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_participant_role_config", function()
		local result = service.update_participant_role_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_phone_number", function()
		local result = service.update_phone_number()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_phone_number_metadata", function()
		local result = service.update_phone_number_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_predefined_attribute", function()
		local result = service.update_predefined_attribute()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_prompt", function()
		local result = service.update_prompt()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_queue_hours_of_operation", function()
		local result = service.update_queue_hours_of_operation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_queue_max_contacts", function()
		local result = service.update_queue_max_contacts()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_queue_name", function()
		local result = service.update_queue_name()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_queue_outbound_caller_config", function()
		local result = service.update_queue_outbound_caller_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_queue_outbound_email_config", function()
		local result = service.update_queue_outbound_email_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_queue_status", function()
		local result = service.update_queue_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_quick_connect_config", function()
		local result = service.update_quick_connect_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_quick_connect_name", function()
		local result = service.update_quick_connect_name()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_routing_profile_agent_availability_timer", function()
		local result = service.update_routing_profile_agent_availability_timer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_routing_profile_concurrency", function()
		local result = service.update_routing_profile_concurrency()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_routing_profile_default_outbound_queue", function()
		local result = service.update_routing_profile_default_outbound_queue()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_routing_profile_name", function()
		local result = service.update_routing_profile_name()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_routing_profile_queues", function()
		local result = service.update_routing_profile_queues()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_rule", function()
		local result = service.update_rule()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_security_profile", function()
		local result = service.update_security_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_task_template", function()
		local result = service.update_task_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_traffic_distribution", function()
		local result = service.update_traffic_distribution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user_hierarchy", function()
		local result = service.update_user_hierarchy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user_hierarchy_group_name", function()
		local result = service.update_user_hierarchy_group_name()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user_hierarchy_structure", function()
		local result = service.update_user_hierarchy_structure()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user_identity_info", function()
		local result = service.update_user_identity_info()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user_phone_config", function()
		local result = service.update_user_phone_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user_proficiencies", function()
		local result = service.update_user_proficiencies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user_routing_profile", function()
		local result = service.update_user_routing_profile()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user_security_profiles", function()
		local result = service.update_user_security_profiles()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_view_content", function()
		local result = service.update_view_content()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_view_metadata", function()
		local result = service.update_view_metadata()
		assert.is_true(result.success)
	end)

end)