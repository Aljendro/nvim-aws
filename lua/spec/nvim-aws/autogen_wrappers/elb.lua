-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: elastic-load-balancing

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS elastic-load-balancing service testing", function()
	it("should generate a cli skeleton for add-tags", function()
		local result = common.execute_aws_command_with_input({ "elb", "add-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for apply-security-groups-to-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "elb", "apply-security-groups-to-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-load-balancer-to-subnets", function()
		local result = common.execute_aws_command_with_input({ "elb", "attach-load-balancer-to-subnets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for configure-health-check", function()
		local result = common.execute_aws_command_with_input({ "elb", "configure-health-check" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-app-cookie-stickiness-policy", function()
		local result = common.execute_aws_command_with_input({ "elb", "create-app-cookie-stickiness-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-lb-cookie-stickiness-policy", function()
		local result = common.execute_aws_command_with_input({ "elb", "create-lb-cookie-stickiness-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "elb", "create-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-load-balancer-listeners", function()
		local result = common.execute_aws_command_with_input({ "elb", "create-load-balancer-listeners" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-load-balancer-policy", function()
		local result = common.execute_aws_command_with_input({ "elb", "create-load-balancer-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "elb", "delete-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-load-balancer-listeners", function()
		local result = common.execute_aws_command_with_input({ "elb", "delete-load-balancer-listeners" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-load-balancer-policy", function()
		local result = common.execute_aws_command_with_input({ "elb", "delete-load-balancer-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-instances-from-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "elb", "deregister-instances-from-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-account-limits", function()
		local result = common.execute_aws_command_with_input({ "elb", "describe-account-limits" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-health", function()
		local result = common.execute_aws_command_with_input({ "elb", "describe-instance-health" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-load-balancer-attributes", function()
		local result = common.execute_aws_command_with_input({ "elb", "describe-load-balancer-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-load-balancer-policies", function()
		local result = common.execute_aws_command_with_input({ "elb", "describe-load-balancer-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-load-balancer-policy-types", function()
		local result = common.execute_aws_command_with_input({ "elb", "describe-load-balancer-policy-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-load-balancers", function()
		local result = common.execute_aws_command_with_input({ "elb", "describe-load-balancers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-tags", function()
		local result = common.execute_aws_command_with_input({ "elb", "describe-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-load-balancer-from-subnets", function()
		local result = common.execute_aws_command_with_input({ "elb", "detach-load-balancer-from-subnets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-availability-zones-for-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "elb", "disable-availability-zones-for-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-availability-zones-for-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "elb", "enable-availability-zones-for-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for modify-load-balancer-attributes", function()
		local result = common.execute_aws_command_with_input({ "elb", "modify-load-balancer-attributes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-instances-with-load-balancer", function()
		local result = common.execute_aws_command_with_input({ "elb", "register-instances-with-load-balancer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-tags", function()
		local result = common.execute_aws_command_with_input({ "elb", "remove-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-load-balancer-listener-ssl-certificate", function()
		local result = common.execute_aws_command_with_input({ "elb", "set-load-balancer-listener-ssl-certificate" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-load-balancer-policies-for-backend-server", function()
		local result = common.execute_aws_command_with_input({ "elb", "set-load-balancer-policies-for-backend-server" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-load-balancer-policies-of-listener", function()
		local result = common.execute_aws_command_with_input({ "elb", "set-load-balancer-policies-of-listener" })
		assert.is_true(result.success)
	end)

end)