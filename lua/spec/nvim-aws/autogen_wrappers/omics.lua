-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: omics

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS omics service testing", function()
	it("should generate a cli skeleton for abort-multipart-read-set-upload", function()
		local result = common.execute_aws_command_with_input({ "omics", "abort-multipart-read-set-upload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for accept-share", function()
		local result = common.execute_aws_command_with_input({ "omics", "accept-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-annotation-import-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "cancel-annotation-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-run", function()
		local result = common.execute_aws_command_with_input({ "omics", "cancel-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-variant-import-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "cancel-variant-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for complete-multipart-read-set-upload", function()
		local result = common.execute_aws_command_with_input({ "omics", "complete-multipart-read-set-upload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-annotation-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "create-annotation-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-annotation-store-version", function()
		local result = common.execute_aws_command_with_input({ "omics", "create-annotation-store-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-multipart-read-set-upload", function()
		local result = common.execute_aws_command_with_input({ "omics", "create-multipart-read-set-upload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-reference-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "create-reference-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-run-cache", function()
		local result = common.execute_aws_command_with_input({ "omics", "create-run-cache" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-run-group", function()
		local result = common.execute_aws_command_with_input({ "omics", "create-run-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-sequence-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "create-sequence-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-share", function()
		local result = common.execute_aws_command_with_input({ "omics", "create-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-variant-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "create-variant-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-workflow", function()
		local result = common.execute_aws_command_with_input({ "omics", "create-workflow" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-annotation-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "delete-annotation-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-reference-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "delete-reference-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-run", function()
		local result = common.execute_aws_command_with_input({ "omics", "delete-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-run-cache", function()
		local result = common.execute_aws_command_with_input({ "omics", "delete-run-cache" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-run-group", function()
		local result = common.execute_aws_command_with_input({ "omics", "delete-run-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-s3-access-policy", function()
		local result = common.execute_aws_command_with_input({ "omics", "delete-s3-access-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-sequence-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "delete-sequence-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-share", function()
		local result = common.execute_aws_command_with_input({ "omics", "delete-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-variant-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "delete-variant-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-workflow", function()
		local result = common.execute_aws_command_with_input({ "omics", "delete-workflow" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-annotation-import-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-annotation-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-annotation-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-annotation-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-annotation-store-version", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-annotation-store-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-read-set-activation-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-read-set-activation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-read-set-export-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-read-set-export-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-read-set-import-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-read-set-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-reference-import-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-reference-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-reference-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-reference-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-run", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-run-cache", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-run-cache" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-run-group", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-run-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-s3-access-policy", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-s3-access-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-sequence-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-sequence-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-share", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-variant-import-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-variant-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-variant-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-variant-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-workflow", function()
		local result = common.execute_aws_command_with_input({ "omics", "get-workflow" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-annotation-import-jobs", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-annotation-import-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-annotation-store-versions", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-annotation-store-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-annotation-stores", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-annotation-stores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-multipart-read-set-uploads", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-multipart-read-set-uploads" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-read-set-activation-jobs", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-read-set-activation-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-read-set-export-jobs", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-read-set-export-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-read-set-import-jobs", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-read-set-import-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-read-set-upload-parts", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-read-set-upload-parts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-reference-import-jobs", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-reference-import-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-reference-stores", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-reference-stores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-run-caches", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-run-caches" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-run-groups", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-run-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-runs", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-runs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-sequence-stores", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-sequence-stores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-shares", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-shares" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-variant-import-jobs", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-variant-import-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-variant-stores", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-variant-stores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-workflows", function()
		local result = common.execute_aws_command_with_input({ "omics", "list-workflows" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-s3-access-policy", function()
		local result = common.execute_aws_command_with_input({ "omics", "put-s3-access-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-annotation-import-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "start-annotation-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-read-set-activation-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "start-read-set-activation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-read-set-export-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "start-read-set-export-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-read-set-import-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "start-read-set-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-reference-import-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "start-reference-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-run", function()
		local result = common.execute_aws_command_with_input({ "omics", "start-run" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-variant-import-job", function()
		local result = common.execute_aws_command_with_input({ "omics", "start-variant-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-annotation-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "update-annotation-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-annotation-store-version", function()
		local result = common.execute_aws_command_with_input({ "omics", "update-annotation-store-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-run-cache", function()
		local result = common.execute_aws_command_with_input({ "omics", "update-run-cache" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-run-group", function()
		local result = common.execute_aws_command_with_input({ "omics", "update-run-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-sequence-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "update-sequence-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-variant-store", function()
		local result = common.execute_aws_command_with_input({ "omics", "update-variant-store" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-workflow", function()
		local result = common.execute_aws_command_with_input({ "omics", "update-workflow" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for upload-read-set-part", function()
		local result = common.execute_aws_command_with_input({ "omics", "upload-read-set-part" })
		assert.is_true(result.success)
	end)

end)