-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: route53-recovery-control-config

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.route53-recovery-control-config")

describe("AWS route53-recovery-control-config service testing", function()
	it("should generate a cli skeleton with create_cluster", function()
		local result = service.create_cluster()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_control_panel", function()
		local result = service.create_control_panel()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_routing_control", function()
		local result = service.create_routing_control()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_safety_rule", function()
		local result = service.create_safety_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_cluster", function()
		local result = service.delete_cluster()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_control_panel", function()
		local result = service.delete_control_panel()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_routing_control", function()
		local result = service.delete_routing_control()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_safety_rule", function()
		local result = service.delete_safety_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_cluster", function()
		local result = service.describe_cluster()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_control_panel", function()
		local result = service.describe_control_panel()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_routing_control", function()
		local result = service.describe_routing_control()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_safety_rule", function()
		local result = service.describe_safety_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_resource_policy", function()
		local result = service.get_resource_policy()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_associated_route53_health_checks", function()
		local result = service.list_associated_route53_health_checks()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_clusters", function()
		local result = service.list_clusters()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_control_panels", function()
		local result = service.list_control_panels()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_routing_controls", function()
		local result = service.list_routing_controls()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_safety_rules", function()
		local result = service.list_safety_rules()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_cluster", function()
		local result = service.update_cluster()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_control_panel", function()
		local result = service.update_control_panel()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_routing_control", function()
		local result = service.update_routing_control()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_safety_rule", function()
		local result = service.update_safety_rule()
		assert.is_true(result.success)
	end)
end)