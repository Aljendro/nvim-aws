-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: mgh

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.mgh")

describe("AWS mgh service testing", function()
	it("should generate a cli skeleton with associate_created_artifact", function()
		local result = service.associate_created_artifact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_discovered_resource", function()
		local result = service.associate_discovered_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_source_resource", function()
		local result = service.associate_source_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_progress_update_stream", function()
		local result = service.create_progress_update_stream()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_progress_update_stream", function()
		local result = service.delete_progress_update_stream()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_application_state", function()
		local result = service.describe_application_state()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_migration_task", function()
		local result = service.describe_migration_task()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_created_artifact", function()
		local result = service.disassociate_created_artifact()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_discovered_resource", function()
		local result = service.disassociate_discovered_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_source_resource", function()
		local result = service.disassociate_source_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_migration_task", function()
		local result = service.import_migration_task()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_application_states", function()
		local result = service.list_application_states()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_created_artifacts", function()
		local result = service.list_created_artifacts()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_discovered_resources", function()
		local result = service.list_discovered_resources()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_migration_task_updates", function()
		local result = service.list_migration_task_updates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_migration_tasks", function()
		local result = service.list_migration_tasks()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_progress_update_streams", function()
		local result = service.list_progress_update_streams()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_source_resources", function()
		local result = service.list_source_resources()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with notify_application_state", function()
		local result = service.notify_application_state()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with notify_migration_task_state", function()
		local result = service.notify_migration_task_state()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_resource_attributes", function()
		local result = service.put_resource_attributes()
		assert.is_true(result.success)
	end)

end)