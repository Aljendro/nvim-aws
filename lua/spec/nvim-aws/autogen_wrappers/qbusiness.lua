-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: qbusiness

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.qbusiness")

describe("AWS qbusiness service testing", function()
	it("should generate a cli skeleton with associate_permission", function()
		local result = service.associate_permission()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_delete_document", function()
		local result = service.batch_delete_document()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_put_document", function()
		local result = service.batch_put_document()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_subscription", function()
		local result = service.cancel_subscription()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with chat", function()
		local result = service.chat()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with chat_sync", function()
		local result = service.chat_sync()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_application", function()
		local result = service.create_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_subscription", function()
		local result = service.create_subscription()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_user", function()
		local result = service.create_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_application", function()
		local result = service.delete_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_attachment", function()
		local result = service.delete_attachment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_chat_controls_configuration", function()
		local result = service.delete_chat_controls_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_conversation", function()
		local result = service.delete_conversation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_group", function()
		local result = service.delete_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_user", function()
		local result = service.delete_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_permission", function()
		local result = service.disassociate_permission()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_application", function()
		local result = service.get_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_chat_controls_configuration", function()
		local result = service.get_chat_controls_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_group", function()
		local result = service.get_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_media", function()
		local result = service.get_media()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_policy", function()
		local result = service.get_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_user", function()
		local result = service.get_user()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_applications", function()
		local result = service.list_applications()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_attachments", function()
		local result = service.list_attachments()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_conversations", function()
		local result = service.list_conversations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_source_sync_jobs", function()
		local result = service.list_data_source_sync_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_documents", function()
		local result = service.list_documents()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_groups", function()
		local result = service.list_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_messages", function()
		local result = service.list_messages()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_plugin_actions", function()
		local result = service.list_plugin_actions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_plugin_type_actions", function()
		local result = service.list_plugin_type_actions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_plugin_type_metadata", function()
		local result = service.list_plugin_type_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_subscriptions", function()
		local result = service.list_subscriptions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_feedback", function()
		local result = service.put_feedback()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_group", function()
		local result = service.put_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with search_relevant_content", function()
		local result = service.search_relevant_content()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_data_source_sync_job", function()
		local result = service.start_data_source_sync_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_data_source_sync_job", function()
		local result = service.stop_data_source_sync_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_application", function()
		local result = service.update_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_chat_controls_configuration", function()
		local result = service.update_chat_controls_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_subscription", function()
		local result = service.update_subscription()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_user", function()
		local result = service.update_user()
		assert.is_true(result.success)
	end)

end)