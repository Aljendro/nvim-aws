-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: xray

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS xray service testing", function()
	it("should generate a cli skeleton for batch-get-traces", function()
		local result = common.execute_aws_command_with_input({ "xray", "batch-get-traces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-trace-retrieval", function()
		local result = common.execute_aws_command_with_input({ "xray", "cancel-trace-retrieval" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-group", function()
		local result = common.execute_aws_command_with_input({ "xray", "create-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-sampling-rule", function()
		local result = common.execute_aws_command_with_input({ "xray", "create-sampling-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-group", function()
		local result = common.execute_aws_command_with_input({ "xray", "delete-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "xray", "delete-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-sampling-rule", function()
		local result = common.execute_aws_command_with_input({ "xray", "delete-sampling-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-encryption-config", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-encryption-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-group", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-groups", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-indexing-rules", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-indexing-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-insight", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-insight" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-insight-events", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-insight-events" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-insight-impact-graph", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-insight-impact-graph" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-insight-summaries", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-insight-summaries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-retrieved-traces-graph", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-retrieved-traces-graph" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-sampling-rules", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-sampling-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-sampling-statistic-summaries", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-sampling-statistic-summaries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-sampling-targets", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-sampling-targets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-graph", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-service-graph" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-time-series-service-statistics", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-time-series-service-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-trace-graph", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-trace-graph" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-trace-segment-destination", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-trace-segment-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-trace-summaries", function()
		local result = common.execute_aws_command_with_input({ "xray", "get-trace-summaries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resource-policies", function()
		local result = common.execute_aws_command_with_input({ "xray", "list-resource-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-retrieved-traces", function()
		local result = common.execute_aws_command_with_input({ "xray", "list-retrieved-traces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "xray", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-encryption-config", function()
		local result = common.execute_aws_command_with_input({ "xray", "put-encryption-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "xray", "put-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-telemetry-records", function()
		local result = common.execute_aws_command_with_input({ "xray", "put-telemetry-records" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-trace-segments", function()
		local result = common.execute_aws_command_with_input({ "xray", "put-trace-segments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-trace-retrieval", function()
		local result = common.execute_aws_command_with_input({ "xray", "start-trace-retrieval" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "xray", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "xray", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-group", function()
		local result = common.execute_aws_command_with_input({ "xray", "update-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-indexing-rule", function()
		local result = common.execute_aws_command_with_input({ "xray", "update-indexing-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-sampling-rule", function()
		local result = common.execute_aws_command_with_input({ "xray", "update-sampling-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-trace-segment-destination", function()
		local result = common.execute_aws_command_with_input({ "xray", "update-trace-segment-destination" })
		assert.is_true(result.success)
	end)

end)