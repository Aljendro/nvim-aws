-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: amplifybackend

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.amplifybackend")

describe("AWS amplifybackend service testing", function()
	it("should generate a cli skeleton with clone_backend", function()
		local result = service.clone_backend()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_backend", function()
		local result = service.create_backend()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_backend_api", function()
		local result = service.create_backend_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_backend_auth", function()
		local result = service.create_backend_auth()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_backend_config", function()
		local result = service.create_backend_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_backend_storage", function()
		local result = service.create_backend_storage()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_token", function()
		local result = service.create_token()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_backend", function()
		local result = service.delete_backend()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_backend_api", function()
		local result = service.delete_backend_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_backend_auth", function()
		local result = service.delete_backend_auth()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_backend_storage", function()
		local result = service.delete_backend_storage()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_token", function()
		local result = service.delete_token()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with generate_backend_api_models", function()
		local result = service.generate_backend_api_models()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_backend", function()
		local result = service.get_backend()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_backend_api", function()
		local result = service.get_backend_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_backend_api_models", function()
		local result = service.get_backend_api_models()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_backend_auth", function()
		local result = service.get_backend_auth()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_backend_job", function()
		local result = service.get_backend_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_backend_storage", function()
		local result = service.get_backend_storage()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_token", function()
		local result = service.get_token()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_backend_auth", function()
		local result = service.import_backend_auth()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_backend_storage", function()
		local result = service.import_backend_storage()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_backend_jobs", function()
		local result = service.list_backend_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_s3_buckets", function()
		local result = service.list_s3_buckets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with remove_all_backends", function()
		local result = service.remove_all_backends()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with remove_backend_config", function()
		local result = service.remove_backend_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_backend_api", function()
		local result = service.update_backend_api()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_backend_auth", function()
		local result = service.update_backend_auth()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_backend_config", function()
		local result = service.update_backend_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_backend_job", function()
		local result = service.update_backend_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_backend_storage", function()
		local result = service.update_backend_storage()
		assert.is_true(result.success)
	end)

end)
