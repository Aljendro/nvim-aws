-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: iottwinmaker

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS iottwinmaker service testing", function()
	it("should generate a cli skeleton for batch-put-property-values", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "batch-put-property-values" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-metadata-transfer-job", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "cancel-metadata-transfer-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-component-type", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "create-component-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-entity", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "create-entity" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-metadata-transfer-job", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "create-metadata-transfer-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-scene", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "create-scene" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-sync-job", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "create-sync-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-workspace", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "create-workspace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-component-type", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "delete-component-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-entity", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "delete-entity" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-scene", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "delete-scene" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-sync-job", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "delete-sync-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-workspace", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "delete-workspace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-query", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "execute-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-component-type", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "get-component-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-entity", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "get-entity" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-metadata-transfer-job", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "get-metadata-transfer-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-pricing-plan", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "get-pricing-plan" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-property-value", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "get-property-value" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-property-value-history", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "get-property-value-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-scene", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "get-scene" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-sync-job", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "get-sync-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-workspace", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "get-workspace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-component-types", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "list-component-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-components", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "list-components" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-entities", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "list-entities" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-metadata-transfer-jobs", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "list-metadata-transfer-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-properties", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "list-properties" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-scenes", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "list-scenes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-sync-jobs", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "list-sync-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-sync-resources", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "list-sync-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-workspaces", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "list-workspaces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-component-type", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "update-component-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-entity", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "update-entity" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-pricing-plan", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "update-pricing-plan" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-scene", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "update-scene" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-workspace", function()
		local result = common.execute_aws_command_with_input({ "iottwinmaker", "update-workspace" })
		assert.is_true(result.success)
	end)

end)