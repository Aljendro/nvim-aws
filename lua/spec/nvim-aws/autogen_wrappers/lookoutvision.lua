-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: lookoutvision

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS lookoutvision service testing", function()
	it("should generate a cli skeleton for create-dataset", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "create-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-model", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "create-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-project", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "create-project" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-dataset", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "delete-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-model", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "delete-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-project", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "delete-project" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-dataset", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "describe-dataset" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-model", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "describe-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-model-packaging-job", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "describe-model-packaging-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-project", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "describe-project" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detect-anomalies", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "detect-anomalies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-dataset-entries", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "list-dataset-entries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-model-packaging-jobs", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "list-model-packaging-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-models", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "list-models" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-projects", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "list-projects" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-model", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "start-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-model-packaging-job", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "start-model-packaging-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-model", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "stop-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-dataset-entries", function()
		local result = common.execute_aws_command_with_input({ "lookoutvision", "update-dataset-entries" })
		assert.is_true(result.success)
	end)

end)