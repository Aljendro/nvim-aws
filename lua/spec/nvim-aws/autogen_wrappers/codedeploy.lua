-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: codedeploy

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS codedeploy service testing", function()
	it("should generate a cli skeleton for add-tags-to-on-premises-instances", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "add-tags-to-on-premises-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-application-revisions", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "batch-get-application-revisions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-applications", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "batch-get-applications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-deployment-groups", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "batch-get-deployment-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-deployment-instances", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "batch-get-deployment-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-deployment-targets", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "batch-get-deployment-targets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-deployments", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "batch-get-deployments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-on-premises-instances", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "batch-get-on-premises-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for continue-deployment", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "continue-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-application", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "create-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-deployment", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "create-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-deployment-config", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "create-deployment-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-deployment-group", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "create-deployment-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-application", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "delete-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-deployment-config", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "delete-deployment-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-deployment-group", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "delete-deployment-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-git-hub-account-token", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "delete-git-hub-account-token" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resources-by-external-id", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "delete-resources-by-external-id" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-on-premises-instance", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "deregister-on-premises-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-application", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "get-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-application-revision", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "get-application-revision" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-deployment", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "get-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-deployment-config", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "get-deployment-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-deployment-group", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "get-deployment-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-deployment-instance", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "get-deployment-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-deployment-target", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "get-deployment-target" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-on-premises-instance", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "get-on-premises-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-application-revisions", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "list-application-revisions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-applications", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "list-applications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-deployment-configs", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "list-deployment-configs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-deployment-groups", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "list-deployment-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-deployment-instances", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "list-deployment-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-deployment-targets", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "list-deployment-targets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-deployments", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "list-deployments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-git-hub-account-token-names", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "list-git-hub-account-token-names" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-on-premises-instances", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "list-on-premises-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-lifecycle-event-hook-execution-status", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "put-lifecycle-event-hook-execution-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-application-revision", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "register-application-revision" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-on-premises-instance", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "register-on-premises-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-tags-from-on-premises-instances", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "remove-tags-from-on-premises-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for skip-wait-time-for-instance-termination", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "skip-wait-time-for-instance-termination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-deployment", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "stop-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-application", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "update-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-deployment-group", function()
		local result = common.execute_aws_command_with_input({ "codedeploy", "update-deployment-group" })
		assert.is_true(result.success)
	end)

end)