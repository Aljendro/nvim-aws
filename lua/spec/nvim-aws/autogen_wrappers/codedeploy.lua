-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: codedeploy

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.codedeploy")

describe("AWS codedeploy service testing", function()
	it("should generate a cli skeleton with add_tags_to_on_premises_instances", function()
		local result = service.add_tags_to_on_premises_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_application_revisions", function()
		local result = service.batch_get_application_revisions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_applications", function()
		local result = service.batch_get_applications()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_deployment_groups", function()
		local result = service.batch_get_deployment_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_deployment_instances", function()
		local result = service.batch_get_deployment_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_deployment_targets", function()
		local result = service.batch_get_deployment_targets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_deployments", function()
		local result = service.batch_get_deployments()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_on_premises_instances", function()
		local result = service.batch_get_on_premises_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with continue_deployment", function()
		local result = service.continue_deployment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_application", function()
		local result = service.create_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_deployment", function()
		local result = service.create_deployment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_deployment_config", function()
		local result = service.create_deployment_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_deployment_group", function()
		local result = service.create_deployment_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_application", function()
		local result = service.delete_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_deployment_config", function()
		local result = service.delete_deployment_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_deployment_group", function()
		local result = service.delete_deployment_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_git_hub_account_token", function()
		local result = service.delete_git_hub_account_token()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_resources_by_external_id", function()
		local result = service.delete_resources_by_external_id()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deregister_on_premises_instance", function()
		local result = service.deregister_on_premises_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_application", function()
		local result = service.get_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_application_revision", function()
		local result = service.get_application_revision()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_deployment", function()
		local result = service.get_deployment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_deployment_config", function()
		local result = service.get_deployment_config()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_deployment_group", function()
		local result = service.get_deployment_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_deployment_instance", function()
		local result = service.get_deployment_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_deployment_target", function()
		local result = service.get_deployment_target()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_on_premises_instance", function()
		local result = service.get_on_premises_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_application_revisions", function()
		local result = service.list_application_revisions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_applications", function()
		local result = service.list_applications()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_deployment_configs", function()
		local result = service.list_deployment_configs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_deployment_groups", function()
		local result = service.list_deployment_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_deployment_instances", function()
		local result = service.list_deployment_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_deployment_targets", function()
		local result = service.list_deployment_targets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_deployments", function()
		local result = service.list_deployments()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_git_hub_account_token_names", function()
		local result = service.list_git_hub_account_token_names()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_on_premises_instances", function()
		local result = service.list_on_premises_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_lifecycle_event_hook_execution_status", function()
		local result = service.put_lifecycle_event_hook_execution_status()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with register_application_revision", function()
		local result = service.register_application_revision()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with register_on_premises_instance", function()
		local result = service.register_on_premises_instance()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with remove_tags_from_on_premises_instances", function()
		local result = service.remove_tags_from_on_premises_instances()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with skip_wait_time_for_instance_termination", function()
		local result = service.skip_wait_time_for_instance_termination()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_deployment", function()
		local result = service.stop_deployment()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_application", function()
		local result = service.update_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_deployment_group", function()
		local result = service.update_deployment_group()
		assert.is_true(result.success)
	end)

end)