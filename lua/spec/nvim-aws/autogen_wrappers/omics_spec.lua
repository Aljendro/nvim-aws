-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: omics

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.omics")

describe("AWS omics service testing", function()
	it("should generate a cli skeleton with abort_multipart_read_set_upload", function()
		local result = service.abort_multipart_read_set_upload()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with accept_share", function()
		local result = service.accept_share()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_annotation_import_job", function()
		local result = service.cancel_annotation_import_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_run", function()
		local result = service.cancel_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_variant_import_job", function()
		local result = service.cancel_variant_import_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with complete_multipart_read_set_upload", function()
		local result = service.complete_multipart_read_set_upload()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_annotation_store", function()
		local result = service.create_annotation_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_annotation_store_version", function()
		local result = service.create_annotation_store_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_multipart_read_set_upload", function()
		local result = service.create_multipart_read_set_upload()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_reference_store", function()
		local result = service.create_reference_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_run_cache", function()
		local result = service.create_run_cache()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_run_group", function()
		local result = service.create_run_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_sequence_store", function()
		local result = service.create_sequence_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_share", function()
		local result = service.create_share()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_variant_store", function()
		local result = service.create_variant_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_workflow", function()
		local result = service.create_workflow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_annotation_store", function()
		local result = service.delete_annotation_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_reference_store", function()
		local result = service.delete_reference_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_run", function()
		local result = service.delete_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_run_cache", function()
		local result = service.delete_run_cache()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_run_group", function()
		local result = service.delete_run_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_s3_access_policy", function()
		local result = service.delete_s3_access_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_sequence_store", function()
		local result = service.delete_sequence_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_share", function()
		local result = service.delete_share()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_variant_store", function()
		local result = service.delete_variant_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_workflow", function()
		local result = service.delete_workflow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_annotation_import_job", function()
		local result = service.get_annotation_import_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_annotation_store", function()
		local result = service.get_annotation_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_annotation_store_version", function()
		local result = service.get_annotation_store_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_read_set_activation_job", function()
		local result = service.get_read_set_activation_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_read_set_export_job", function()
		local result = service.get_read_set_export_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_read_set_import_job", function()
		local result = service.get_read_set_import_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_reference_import_job", function()
		local result = service.get_reference_import_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_reference_store", function()
		local result = service.get_reference_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_run", function()
		local result = service.get_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_run_cache", function()
		local result = service.get_run_cache()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_run_group", function()
		local result = service.get_run_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_s3_access_policy", function()
		local result = service.get_s3_access_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_sequence_store", function()
		local result = service.get_sequence_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_share", function()
		local result = service.get_share()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_variant_import_job", function()
		local result = service.get_variant_import_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_variant_store", function()
		local result = service.get_variant_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_workflow", function()
		local result = service.get_workflow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_annotation_import_jobs", function()
		local result = service.list_annotation_import_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_annotation_store_versions", function()
		local result = service.list_annotation_store_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_annotation_stores", function()
		local result = service.list_annotation_stores()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_multipart_read_set_uploads", function()
		local result = service.list_multipart_read_set_uploads()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_read_set_activation_jobs", function()
		local result = service.list_read_set_activation_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_read_set_export_jobs", function()
		local result = service.list_read_set_export_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_read_set_import_jobs", function()
		local result = service.list_read_set_import_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_read_set_upload_parts", function()
		local result = service.list_read_set_upload_parts()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_reference_import_jobs", function()
		local result = service.list_reference_import_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_reference_stores", function()
		local result = service.list_reference_stores()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_run_caches", function()
		local result = service.list_run_caches()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_run_groups", function()
		local result = service.list_run_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_runs", function()
		local result = service.list_runs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sequence_stores", function()
		local result = service.list_sequence_stores()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_shares", function()
		local result = service.list_shares()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_variant_import_jobs", function()
		local result = service.list_variant_import_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_variant_stores", function()
		local result = service.list_variant_stores()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_workflows", function()
		local result = service.list_workflows()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_s3_access_policy", function()
		local result = service.put_s3_access_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_annotation_import_job", function()
		local result = service.start_annotation_import_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_read_set_activation_job", function()
		local result = service.start_read_set_activation_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_read_set_export_job", function()
		local result = service.start_read_set_export_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_read_set_import_job", function()
		local result = service.start_read_set_import_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_reference_import_job", function()
		local result = service.start_reference_import_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_run", function()
		local result = service.start_run()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_variant_import_job", function()
		local result = service.start_variant_import_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_annotation_store", function()
		local result = service.update_annotation_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_annotation_store_version", function()
		local result = service.update_annotation_store_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_run_cache", function()
		local result = service.update_run_cache()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_run_group", function()
		local result = service.update_run_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_sequence_store", function()
		local result = service.update_sequence_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_variant_store", function()
		local result = service.update_variant_store()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_workflow", function()
		local result = service.update_workflow()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with upload_read_set_part", function()
		local result = service.upload_read_set_part()
		assert.is_true(result.success)
	end)

end)