-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: s3-control

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS s3-control service testing", function()
	it("should generate a cli skeleton for associate-access-grants-identity-center", function()
		local result = common.execute_aws_command_with_input({ "s3control", "associate-access-grants-identity-center" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-access-grant", function()
		local result = common.execute_aws_command_with_input({ "s3control", "create-access-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-access-grants-instance", function()
		local result = common.execute_aws_command_with_input({ "s3control", "create-access-grants-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-access-grants-location", function()
		local result = common.execute_aws_command_with_input({ "s3control", "create-access-grants-location" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-access-point", function()
		local result = common.execute_aws_command_with_input({ "s3control", "create-access-point" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-access-point-for-object-lambda", function()
		local result = common.execute_aws_command_with_input({ "s3control", "create-access-point-for-object-lambda" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-bucket", function()
		local result = common.execute_aws_command_with_input({ "s3control", "create-bucket" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-job", function()
		local result = common.execute_aws_command_with_input({ "s3control", "create-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-multi-region-access-point", function()
		local result = common.execute_aws_command_with_input({ "s3control", "create-multi-region-access-point" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-storage-lens-group", function()
		local result = common.execute_aws_command_with_input({ "s3control", "create-storage-lens-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-access-grant", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-access-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-access-grants-instance", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-access-grants-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-access-grants-instance-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-access-grants-instance-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-access-grants-location", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-access-grants-location" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-access-point", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-access-point" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-access-point-for-object-lambda", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-access-point-for-object-lambda" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-access-point-policy", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-access-point-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-access-point-policy-for-object-lambda", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-access-point-policy-for-object-lambda" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-access-point-scope", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-access-point-scope" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-bucket" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-lifecycle-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-bucket-lifecycle-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-policy", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-bucket-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-replication", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-bucket-replication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bucket-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-bucket-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-job-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-job-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-multi-region-access-point", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-multi-region-access-point" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-public-access-block", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-public-access-block" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-storage-lens-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-storage-lens-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-storage-lens-configuration-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-storage-lens-configuration-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-storage-lens-group", function()
		local result = common.execute_aws_command_with_input({ "s3control", "delete-storage-lens-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-job", function()
		local result = common.execute_aws_command_with_input({ "s3control", "describe-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-multi-region-access-point-operation", function()
		local result = common.execute_aws_command_with_input({ "s3control", "describe-multi-region-access-point-operation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for dissociate-access-grants-identity-center", function()
		local result = common.execute_aws_command_with_input({ "s3control", "dissociate-access-grants-identity-center" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-grant", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-grant" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-grants-instance", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-grants-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-grants-instance-for-prefix", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-grants-instance-for-prefix" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-grants-instance-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-grants-instance-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-grants-location", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-grants-location" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-point", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-point" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-point-configuration-for-object-lambda", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-point-configuration-for-object-lambda" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-point-for-object-lambda", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-point-for-object-lambda" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-point-policy", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-point-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-point-policy-for-object-lambda", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-point-policy-for-object-lambda" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-point-policy-status", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-point-policy-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-point-policy-status-for-object-lambda", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-point-policy-status-for-object-lambda" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-point-scope", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-access-point-scope" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-bucket" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-lifecycle-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-bucket-lifecycle-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-policy", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-bucket-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-replication", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-bucket-replication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-bucket-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bucket-versioning", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-bucket-versioning" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-access", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-data-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-job-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-job-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-multi-region-access-point", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-multi-region-access-point" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-multi-region-access-point-policy", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-multi-region-access-point-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-multi-region-access-point-policy-status", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-multi-region-access-point-policy-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-multi-region-access-point-routes", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-multi-region-access-point-routes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-public-access-block", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-public-access-block" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-storage-lens-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-storage-lens-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-storage-lens-configuration-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-storage-lens-configuration-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-storage-lens-group", function()
		local result = common.execute_aws_command_with_input({ "s3control", "get-storage-lens-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-access-grants", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-access-grants" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-access-grants-instances", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-access-grants-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-access-grants-locations", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-access-grants-locations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-access-points", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-access-points" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-access-points-for-directory-buckets", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-access-points-for-directory-buckets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-access-points-for-object-lambda", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-access-points-for-object-lambda" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-caller-access-grants", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-caller-access-grants" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-jobs", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-multi-region-access-points", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-multi-region-access-points" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-regional-buckets", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-regional-buckets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-storage-lens-configurations", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-storage-lens-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-storage-lens-groups", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-storage-lens-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "s3control", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-access-grants-instance-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-access-grants-instance-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-access-point-configuration-for-object-lambda", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-access-point-configuration-for-object-lambda" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-access-point-policy", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-access-point-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-access-point-policy-for-object-lambda", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-access-point-policy-for-object-lambda" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-access-point-scope", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-access-point-scope" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-lifecycle-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-bucket-lifecycle-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-policy", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-bucket-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-replication", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-bucket-replication" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-bucket-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bucket-versioning", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-bucket-versioning" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-job-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-job-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-multi-region-access-point-policy", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-multi-region-access-point-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-public-access-block", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-public-access-block" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-storage-lens-configuration", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-storage-lens-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-storage-lens-configuration-tagging", function()
		local result = common.execute_aws_command_with_input({ "s3control", "put-storage-lens-configuration-tagging" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for submit-multi-region-access-point-routes", function()
		local result = common.execute_aws_command_with_input({ "s3control", "submit-multi-region-access-point-routes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "s3control", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "s3control", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-access-grants-location", function()
		local result = common.execute_aws_command_with_input({ "s3control", "update-access-grants-location" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-job-priority", function()
		local result = common.execute_aws_command_with_input({ "s3control", "update-job-priority" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-job-status", function()
		local result = common.execute_aws_command_with_input({ "s3control", "update-job-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-storage-lens-group", function()
		local result = common.execute_aws_command_with_input({ "s3control", "update-storage-lens-group" })
		assert.is_true(result.success)
	end)

end)