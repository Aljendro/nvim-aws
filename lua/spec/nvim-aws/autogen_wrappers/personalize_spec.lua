-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: personalize

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.personalize")

describe("AWS personalize service testing", function()
	it("should generate a cli skeleton with create_batch_inference_job", function()
		local result = service.create_batch_inference_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_batch_segment_job", function()
		local result = service.create_batch_segment_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_campaign", function()
		local result = service.create_campaign()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_data_deletion_job", function()
		local result = service.create_data_deletion_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_dataset", function()
		local result = service.create_dataset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_dataset_export_job", function()
		local result = service.create_dataset_export_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_dataset_group", function()
		local result = service.create_dataset_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_dataset_import_job", function()
		local result = service.create_dataset_import_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_event_tracker", function()
		local result = service.create_event_tracker()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_filter", function()
		local result = service.create_filter()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_metric_attribution", function()
		local result = service.create_metric_attribution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_recommender", function()
		local result = service.create_recommender()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_schema", function()
		local result = service.create_schema()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_solution", function()
		local result = service.create_solution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_solution_version", function()
		local result = service.create_solution_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_campaign", function()
		local result = service.delete_campaign()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_dataset", function()
		local result = service.delete_dataset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_dataset_group", function()
		local result = service.delete_dataset_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_event_tracker", function()
		local result = service.delete_event_tracker()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_filter", function()
		local result = service.delete_filter()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_metric_attribution", function()
		local result = service.delete_metric_attribution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_recommender", function()
		local result = service.delete_recommender()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_schema", function()
		local result = service.delete_schema()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_solution", function()
		local result = service.delete_solution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_algorithm", function()
		local result = service.describe_algorithm()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_batch_inference_job", function()
		local result = service.describe_batch_inference_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_batch_segment_job", function()
		local result = service.describe_batch_segment_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_campaign", function()
		local result = service.describe_campaign()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_data_deletion_job", function()
		local result = service.describe_data_deletion_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_dataset", function()
		local result = service.describe_dataset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_dataset_export_job", function()
		local result = service.describe_dataset_export_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_dataset_group", function()
		local result = service.describe_dataset_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_dataset_import_job", function()
		local result = service.describe_dataset_import_job()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_event_tracker", function()
		local result = service.describe_event_tracker()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_feature_transformation", function()
		local result = service.describe_feature_transformation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_filter", function()
		local result = service.describe_filter()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_metric_attribution", function()
		local result = service.describe_metric_attribution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_recipe", function()
		local result = service.describe_recipe()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_recommender", function()
		local result = service.describe_recommender()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_schema", function()
		local result = service.describe_schema()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_solution", function()
		local result = service.describe_solution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_solution_version", function()
		local result = service.describe_solution_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_solution_metrics", function()
		local result = service.get_solution_metrics()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_batch_inference_jobs", function()
		local result = service.list_batch_inference_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_batch_segment_jobs", function()
		local result = service.list_batch_segment_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_campaigns", function()
		local result = service.list_campaigns()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_data_deletion_jobs", function()
		local result = service.list_data_deletion_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_dataset_export_jobs", function()
		local result = service.list_dataset_export_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_dataset_groups", function()
		local result = service.list_dataset_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_dataset_import_jobs", function()
		local result = service.list_dataset_import_jobs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_datasets", function()
		local result = service.list_datasets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_event_trackers", function()
		local result = service.list_event_trackers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_filters", function()
		local result = service.list_filters()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_metric_attribution_metrics", function()
		local result = service.list_metric_attribution_metrics()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_metric_attributions", function()
		local result = service.list_metric_attributions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_recipes", function()
		local result = service.list_recipes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_recommenders", function()
		local result = service.list_recommenders()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_schemas", function()
		local result = service.list_schemas()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_solution_versions", function()
		local result = service.list_solution_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_solutions", function()
		local result = service.list_solutions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_recommender", function()
		local result = service.start_recommender()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_recommender", function()
		local result = service.stop_recommender()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_solution_version_creation", function()
		local result = service.stop_solution_version_creation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_campaign", function()
		local result = service.update_campaign()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_dataset", function()
		local result = service.update_dataset()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_metric_attribution", function()
		local result = service.update_metric_attribution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_recommender", function()
		local result = service.update_recommender()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_solution", function()
		local result = service.update_solution()
		assert.is_true(result.success)
	end)

end)