-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: ds

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.ds")

describe("AWS ds service testing", function()
	it("should generate a cli skeleton with accept_shared_directory", function()
		local result = service.accept_shared_directory()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with add_ip_routes", function()
		local result = service.add_ip_routes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with add_region", function()
		local result = service.add_region()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with add_tags_to_resource", function()
		local result = service.add_tags_to_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with cancel_schema_extension", function()
		local result = service.cancel_schema_extension()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with connect_directory", function()
		local result = service.connect_directory()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_alias", function()
		local result = service.create_alias()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_computer", function()
		local result = service.create_computer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_conditional_forwarder", function()
		local result = service.create_conditional_forwarder()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_directory", function()
		local result = service.create_directory()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_log_subscription", function()
		local result = service.create_log_subscription()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_microsoft_ad", function()
		local result = service.create_microsoft_ad()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_snapshot", function()
		local result = service.create_snapshot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_trust", function()
		local result = service.create_trust()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_conditional_forwarder", function()
		local result = service.delete_conditional_forwarder()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_directory", function()
		local result = service.delete_directory()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_log_subscription", function()
		local result = service.delete_log_subscription()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_snapshot", function()
		local result = service.delete_snapshot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_trust", function()
		local result = service.delete_trust()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deregister_certificate", function()
		local result = service.deregister_certificate()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with deregister_event_topic", function()
		local result = service.deregister_event_topic()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_certificate", function()
		local result = service.describe_certificate()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_client_authentication_settings", function()
		local result = service.describe_client_authentication_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_conditional_forwarders", function()
		local result = service.describe_conditional_forwarders()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_directories", function()
		local result = service.describe_directories()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_directory_data_access", function()
		local result = service.describe_directory_data_access()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_domain_controllers", function()
		local result = service.describe_domain_controllers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_event_topics", function()
		local result = service.describe_event_topics()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_ldaps_settings", function()
		local result = service.describe_ldaps_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_regions", function()
		local result = service.describe_regions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_settings", function()
		local result = service.describe_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_shared_directories", function()
		local result = service.describe_shared_directories()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_snapshots", function()
		local result = service.describe_snapshots()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_trusts", function()
		local result = service.describe_trusts()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_update_directory", function()
		local result = service.describe_update_directory()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disable_client_authentication", function()
		local result = service.disable_client_authentication()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disable_directory_data_access", function()
		local result = service.disable_directory_data_access()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disable_ldaps", function()
		local result = service.disable_ldaps()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disable_radius", function()
		local result = service.disable_radius()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disable_sso", function()
		local result = service.disable_sso()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_client_authentication", function()
		local result = service.enable_client_authentication()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_directory_data_access", function()
		local result = service.enable_directory_data_access()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_ldaps", function()
		local result = service.enable_ldaps()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_radius", function()
		local result = service.enable_radius()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with enable_sso", function()
		local result = service.enable_sso()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_directory_limits", function()
		local result = service.get_directory_limits()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_snapshot_limits", function()
		local result = service.get_snapshot_limits()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with help", function()
		local result = service.help()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_certificates", function()
		local result = service.list_certificates()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_ip_routes", function()
		local result = service.list_ip_routes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_log_subscriptions", function()
		local result = service.list_log_subscriptions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_schema_extensions", function()
		local result = service.list_schema_extensions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with register_certificate", function()
		local result = service.register_certificate()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with register_event_topic", function()
		local result = service.register_event_topic()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reject_shared_directory", function()
		local result = service.reject_shared_directory()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with remove_ip_routes", function()
		local result = service.remove_ip_routes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with remove_region", function()
		local result = service.remove_region()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with remove_tags_from_resource", function()
		local result = service.remove_tags_from_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with reset_user_password", function()
		local result = service.reset_user_password()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with restore_from_snapshot", function()
		local result = service.restore_from_snapshot()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with share_directory", function()
		local result = service.share_directory()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_schema_extension", function()
		local result = service.start_schema_extension()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with unshare_directory", function()
		local result = service.unshare_directory()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_conditional_forwarder", function()
		local result = service.update_conditional_forwarder()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_directory_setup", function()
		local result = service.update_directory_setup()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_number_of_domain_controllers", function()
		local result = service.update_number_of_domain_controllers()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_radius", function()
		local result = service.update_radius()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_settings", function()
		local result = service.update_settings()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_trust", function()
		local result = service.update_trust()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with verify_trust", function()
		local result = service.verify_trust()
		assert.is_true(result.success)
	end)

end)