-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: appmesh

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.appmesh")

describe("AWS appmesh service testing", function()
	it("should generate a cli skeleton with create_gateway_route", function()
		local result = service.create_gateway_route()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_mesh", function()
		local result = service.create_mesh()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_route", function()
		local result = service.create_route()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_virtual_gateway", function()
		local result = service.create_virtual_gateway()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_virtual_node", function()
		local result = service.create_virtual_node()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_virtual_router", function()
		local result = service.create_virtual_router()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_virtual_service", function()
		local result = service.create_virtual_service()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_gateway_route", function()
		local result = service.delete_gateway_route()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_mesh", function()
		local result = service.delete_mesh()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_route", function()
		local result = service.delete_route()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_virtual_gateway", function()
		local result = service.delete_virtual_gateway()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_virtual_node", function()
		local result = service.delete_virtual_node()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_virtual_router", function()
		local result = service.delete_virtual_router()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_virtual_service", function()
		local result = service.delete_virtual_service()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_gateway_route", function()
		local result = service.describe_gateway_route()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_mesh", function()
		local result = service.describe_mesh()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_route", function()
		local result = service.describe_route()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_virtual_gateway", function()
		local result = service.describe_virtual_gateway()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_virtual_node", function()
		local result = service.describe_virtual_node()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_virtual_router", function()
		local result = service.describe_virtual_router()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_virtual_service", function()
		local result = service.describe_virtual_service()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_gateway_routes", function()
		local result = service.list_gateway_routes()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_meshes", function()
		local result = service.list_meshes()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_routes", function()
		local result = service.list_routes()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_virtual_gateways", function()
		local result = service.list_virtual_gateways()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_virtual_nodes", function()
		local result = service.list_virtual_nodes()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_virtual_routers", function()
		local result = service.list_virtual_routers()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_virtual_services", function()
		local result = service.list_virtual_services()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_gateway_route", function()
		local result = service.update_gateway_route()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_mesh", function()
		local result = service.update_mesh()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_route", function()
		local result = service.update_route()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_virtual_gateway", function()
		local result = service.update_virtual_gateway()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_virtual_node", function()
		local result = service.update_virtual_node()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_virtual_router", function()
		local result = service.update_virtual_router()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_virtual_service", function()
		local result = service.update_virtual_service()
		assert.is_true(result.success)
	end)
end)