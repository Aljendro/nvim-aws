-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: lex-model-building-service

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS lex-model-building-service service testing", function()
	it("should generate a cli skeleton for create-bot-version", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "create-bot-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-intent-version", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "create-intent-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-slot-type-version", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "create-slot-type-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bot", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "delete-bot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bot-alias", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "delete-bot-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bot-channel-association", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "delete-bot-channel-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-bot-version", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "delete-bot-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-intent", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "delete-intent" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-intent-version", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "delete-intent-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-slot-type", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "delete-slot-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-slot-type-version", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "delete-slot-type-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-utterances", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "delete-utterances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bot", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-bot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bot-alias", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-bot-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bot-aliases", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-bot-aliases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bot-channel-association", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-bot-channel-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bot-channel-associations", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-bot-channel-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bot-versions", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-bot-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-bots", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-bots" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-builtin-intent", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-builtin-intent" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-builtin-intents", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-builtin-intents" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-builtin-slot-types", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-builtin-slot-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-export", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-export" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-import", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-import" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-intent", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-intent" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-intent-versions", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-intent-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-intents", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-intents" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-migration", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-migration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-migrations", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-migrations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-slot-type", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-slot-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-slot-type-versions", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-slot-type-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-slot-types", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-slot-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-utterances-view", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "get-utterances-view" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bot", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "put-bot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-bot-alias", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "put-bot-alias" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-intent", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "put-intent" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-slot-type", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "put-slot-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-import", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "start-import" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-migration", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "start-migration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "lex-models", "untag-resource" })
		assert.is_true(result.success)
	end)

end)