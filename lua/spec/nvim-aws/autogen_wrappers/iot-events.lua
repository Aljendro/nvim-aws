-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: iot-events

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS iot-events service testing", function()
	it("should generate a cli skeleton for create-alarm-model", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "create-alarm-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-detector-model", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "create-detector-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-input", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "create-input" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-alarm-model", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "delete-alarm-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-detector-model", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "delete-detector-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-input", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "delete-input" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-alarm-model", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "describe-alarm-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-detector-model", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "describe-detector-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-detector-model-analysis", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "describe-detector-model-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-input", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "describe-input" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-logging-options", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "describe-logging-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-detector-model-analysis-results", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "get-detector-model-analysis-results" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-alarm-model-versions", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "list-alarm-model-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-alarm-models", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "list-alarm-models" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-detector-model-versions", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "list-detector-model-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-detector-models", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "list-detector-models" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-input-routings", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "list-input-routings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-inputs", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "list-inputs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-logging-options", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "put-logging-options" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-detector-model-analysis", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "start-detector-model-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-alarm-model", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "update-alarm-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-detector-model", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "update-detector-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-input", function()
		local result = common.execute_aws_command_with_input({ "iot-events", "update-input" })
		assert.is_true(result.success)
	end)

end)