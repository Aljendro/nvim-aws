-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: workdocs

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS workdocs service testing", function()
	it("should generate a cli skeleton for abort-document-version-upload", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "abort-document-version-upload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for activate-user", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "activate-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for add-resource-permissions", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "add-resource-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-comment", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "create-comment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-custom-metadata", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "create-custom-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-folder", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "create-folder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-labels", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "create-labels" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-notification-subscription", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "create-notification-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-user", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "create-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deactivate-user", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "deactivate-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-comment", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "delete-comment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-custom-metadata", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "delete-custom-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-document", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "delete-document" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-document-version", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "delete-document-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-folder", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "delete-folder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-folder-contents", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "delete-folder-contents" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-labels", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "delete-labels" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-notification-subscription", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "delete-notification-subscription" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-user", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "delete-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-activities", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "describe-activities" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-comments", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "describe-comments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-document-versions", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "describe-document-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-folder-contents", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "describe-folder-contents" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-groups", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "describe-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-notification-subscriptions", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "describe-notification-subscriptions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-resource-permissions", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "describe-resource-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-root-folders", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "describe-root-folders" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-users", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "describe-users" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-current-user", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "get-current-user" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-document", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "get-document" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-document-path", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "get-document-path" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-document-version", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "get-document-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-folder", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "get-folder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-folder-path", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "get-folder-path" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resources", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "get-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for initiate-document-version-upload", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "initiate-document-version-upload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-all-resource-permissions", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "remove-all-resource-permissions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for remove-resource-permission", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "remove-resource-permission" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-document-versions", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "restore-document-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-resources", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "search-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-document", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "update-document" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-document-version", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "update-document-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-folder", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "update-folder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-user", function()
		local result = common.execute_aws_command_with_input({ "workdocs", "update-user" })
		assert.is_true(result.success)
	end)

end)