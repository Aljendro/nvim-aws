-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: iot-managed-integrations

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS iot-managed-integrations service testing", function()
	it("should generate a cli skeleton for create-credential-locker", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "create-credential-locker" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-destination", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "create-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-event-log-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "create-event-log-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-managed-thing", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "create-managed-thing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-notification-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "create-notification-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-ota-task", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "create-ota-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-ota-task-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "create-ota-task-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-provisioning-profile", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "create-provisioning-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-credential-locker", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "delete-credential-locker" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-destination", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "delete-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-event-log-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "delete-event-log-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-managed-thing", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "delete-managed-thing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-notification-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "delete-notification-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ota-task", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "delete-ota-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ota-task-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "delete-ota-task-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-provisioning-profile", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "delete-provisioning-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-credential-locker", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-credential-locker" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-custom-endpoint", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-custom-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-default-encryption-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-default-encryption-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-destination", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-device-discovery", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-device-discovery" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-event-log-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-event-log-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-hub-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-hub-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-managed-thing", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-managed-thing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-managed-thing-capabilities", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-managed-thing-capabilities" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-managed-thing-connectivity-data", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-managed-thing-connectivity-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-managed-thing-meta-data", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-managed-thing-meta-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-managed-thing-state", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-managed-thing-state" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-notification-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-notification-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ota-task", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-ota-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ota-task-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-ota-task-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-provisioning-profile", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-provisioning-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-runtime-log-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-runtime-log-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-schema-version", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "get-schema-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-credential-lockers", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "list-credential-lockers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-destinations", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "list-destinations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-event-log-configurations", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "list-event-log-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-managed-thing-schemas", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "list-managed-thing-schemas" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-managed-things", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "list-managed-things" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-notification-configurations", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "list-notification-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-ota-task-configurations", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "list-ota-task-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-ota-task-executions", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "list-ota-task-executions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-ota-tasks", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "list-ota-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-provisioning-profiles", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "list-provisioning-profiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-schema-versions", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "list-schema-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-default-encryption-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "put-default-encryption-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-hub-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "put-hub-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-runtime-log-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "put-runtime-log-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-custom-endpoint", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "register-custom-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reset-runtime-log-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "reset-runtime-log-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for send-managed-thing-command", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "send-managed-thing-command" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-device-discovery", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "start-device-discovery" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-destination", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "update-destination" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-event-log-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "update-event-log-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-managed-thing", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "update-managed-thing" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-notification-configuration", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "update-notification-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-ota-task", function()
		local result = common.execute_aws_command_with_input({ "iot-managed-integrations", "update-ota-task" })
		assert.is_true(result.success)
	end)

end)