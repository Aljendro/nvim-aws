-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: route53resolver

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS route53resolver service testing", function()
	it("should generate a cli skeleton for associate-firewall-rule-group", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "associate-firewall-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-resolver-endpoint-ip-address", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "associate-resolver-endpoint-ip-address" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-resolver-query-log-config", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "associate-resolver-query-log-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-resolver-rule", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "associate-resolver-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-firewall-domain-list", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "create-firewall-domain-list" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-firewall-rule", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "create-firewall-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-firewall-rule-group", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "create-firewall-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-outpost-resolver", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "create-outpost-resolver" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-resolver-endpoint", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "create-resolver-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-resolver-query-log-config", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "create-resolver-query-log-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-resolver-rule", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "create-resolver-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-firewall-domain-list", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "delete-firewall-domain-list" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-firewall-rule", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "delete-firewall-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-firewall-rule-group", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "delete-firewall-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-outpost-resolver", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "delete-outpost-resolver" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resolver-endpoint", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "delete-resolver-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resolver-query-log-config", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "delete-resolver-query-log-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resolver-rule", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "delete-resolver-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-firewall-rule-group", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "disassociate-firewall-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-resolver-endpoint-ip-address", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "disassociate-resolver-endpoint-ip-address" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-resolver-query-log-config", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "disassociate-resolver-query-log-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-resolver-rule", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "disassociate-resolver-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-firewall-config", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-firewall-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-firewall-domain-list", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-firewall-domain-list" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-firewall-rule-group", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-firewall-rule-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-firewall-rule-group-association", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-firewall-rule-group-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-firewall-rule-group-policy", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-firewall-rule-group-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-outpost-resolver", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-outpost-resolver" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resolver-config", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-resolver-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resolver-dnssec-config", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-resolver-dnssec-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resolver-endpoint", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-resolver-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resolver-query-log-config", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-resolver-query-log-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resolver-query-log-config-association", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-resolver-query-log-config-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resolver-query-log-config-policy", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-resolver-query-log-config-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resolver-rule", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-resolver-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resolver-rule-association", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-resolver-rule-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resolver-rule-policy", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "get-resolver-rule-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-firewall-domains", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "import-firewall-domains" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-firewall-configs", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-firewall-configs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-firewall-domain-lists", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-firewall-domain-lists" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-firewall-domains", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-firewall-domains" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-firewall-rule-group-associations", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-firewall-rule-group-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-firewall-rule-groups", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-firewall-rule-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-firewall-rules", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-firewall-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-outpost-resolvers", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-outpost-resolvers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resolver-configs", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-resolver-configs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resolver-dnssec-configs", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-resolver-dnssec-configs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resolver-endpoint-ip-addresses", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-resolver-endpoint-ip-addresses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resolver-endpoints", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-resolver-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resolver-query-log-config-associations", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-resolver-query-log-config-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resolver-query-log-configs", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-resolver-query-log-configs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resolver-rule-associations", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-resolver-rule-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resolver-rules", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-resolver-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-firewall-rule-group-policy", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "put-firewall-rule-group-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resolver-query-log-config-policy", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "put-resolver-query-log-config-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resolver-rule-policy", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "put-resolver-rule-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-firewall-config", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "update-firewall-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-firewall-domains", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "update-firewall-domains" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-firewall-rule", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "update-firewall-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-firewall-rule-group-association", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "update-firewall-rule-group-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-outpost-resolver", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "update-outpost-resolver" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-resolver-config", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "update-resolver-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-resolver-dnssec-config", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "update-resolver-dnssec-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-resolver-endpoint", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "update-resolver-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-resolver-rule", function()
		local result = common.execute_aws_command_with_input({ "route53resolver", "update-resolver-rule" })
		assert.is_true(result.success)
	end)

end)