-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: accessanalyzer

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS accessanalyzer service testing", function()
	it("should generate a cli skeleton for apply-archive-rule", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "apply-archive-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-policy-generation", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "cancel-policy-generation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for check-access-not-granted", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "check-access-not-granted" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for check-no-new-access", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "check-no-new-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for check-no-public-access", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "check-no-public-access" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-access-preview", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "create-access-preview" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-analyzer", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "create-analyzer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-analyzer", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "delete-analyzer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for generate-finding-recommendation", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "generate-finding-recommendation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-access-preview", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "get-access-preview" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-analyzed-resource", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "get-analyzed-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-analyzer", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "get-analyzer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-finding", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "get-finding" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-finding-recommendation", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "get-finding-recommendation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-finding-v2", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "get-finding-v2" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-findings-statistics", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "get-findings-statistics" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-generated-policy", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "get-generated-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-access-preview-findings", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "list-access-preview-findings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-access-previews", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "list-access-previews" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-analyzed-resources", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "list-analyzed-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-analyzers", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "list-analyzers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-findings", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "list-findings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-findings-v2", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "list-findings-v2" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-policy-generations", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "list-policy-generations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-policy-generation", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "start-policy-generation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-resource-scan", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "start-resource-scan" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-analyzer", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "update-analyzer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-findings", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "update-findings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for validate-policy", function()
		local result = common.execute_aws_command_with_input({ "accessanalyzer", "validate-policy" })
		assert.is_true(result.success)
	end)

end)