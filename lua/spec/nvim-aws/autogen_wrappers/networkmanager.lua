-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: networkmanager

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS networkmanager service testing", function()
	it("should generate a cli skeleton for accept-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "accept-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-connect-peer", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "associate-connect-peer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-customer-gateway", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "associate-customer-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-link", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "associate-link" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-transit-gateway-connect-peer", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "associate-transit-gateway-connect-peer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-connect-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-connect-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-connect-peer", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-connect-peer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-connection", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-core-network", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-core-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-device", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-direct-connect-gateway-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-direct-connect-gateway-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-global-network", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-global-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-link", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-link" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-site", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-site" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-site-to-site-vpn-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-site-to-site-vpn-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway-peering", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-transit-gateway-peering" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-transit-gateway-route-table-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-transit-gateway-route-table-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-vpc-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "create-vpc-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "delete-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-connect-peer", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "delete-connect-peer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-connection", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "delete-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-core-network", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "delete-core-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-core-network-policy-version", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "delete-core-network-policy-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-device", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "delete-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-global-network", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "delete-global-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-link", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "delete-link" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-peering", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "delete-peering" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "delete-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-site", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "delete-site" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deregister-transit-gateway", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "deregister-transit-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-global-networks", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "describe-global-networks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-connect-peer", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "disassociate-connect-peer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-customer-gateway", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "disassociate-customer-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-link", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "disassociate-link" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-transit-gateway-connect-peer", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "disassociate-transit-gateway-connect-peer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-core-network-change-set", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "execute-core-network-change-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-connect-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-connect-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-connect-peer", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-connect-peer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-connect-peer-associations", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-connect-peer-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-connections", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-core-network", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-core-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-core-network-change-events", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-core-network-change-events" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-core-network-change-set", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-core-network-change-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-core-network-policy", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-core-network-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-customer-gateway-associations", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-customer-gateway-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-devices", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-devices" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-direct-connect-gateway-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-direct-connect-gateway-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-link-associations", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-link-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-links", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-links" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-network-resource-counts", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-network-resource-counts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-network-resource-relationships", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-network-resource-relationships" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-network-resources", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-network-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-network-routes", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-network-routes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-network-telemetry", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-network-telemetry" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-route-analysis", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-route-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-site-to-site-vpn-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-site-to-site-vpn-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-sites", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-sites" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transit-gateway-connect-peer-associations", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-transit-gateway-connect-peer-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transit-gateway-peering", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-transit-gateway-peering" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transit-gateway-registrations", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-transit-gateway-registrations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-transit-gateway-route-table-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-transit-gateway-route-table-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-vpc-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "get-vpc-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-attachments", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "list-attachments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-connect-peers", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "list-connect-peers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-core-network-policy-versions", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "list-core-network-policy-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-core-networks", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "list-core-networks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-organization-service-access-status", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "list-organization-service-access-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-peerings", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "list-peerings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-core-network-policy", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "put-core-network-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resource-policy", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "put-resource-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for register-transit-gateway", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "register-transit-gateway" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "reject-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for restore-core-network-policy-version", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "restore-core-network-policy-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-organization-service-access-update", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "start-organization-service-access-update" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-route-analysis", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "start-route-analysis" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-connection", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "update-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-core-network", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "update-core-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-device", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "update-device" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-direct-connect-gateway-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "update-direct-connect-gateway-attachment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-global-network", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "update-global-network" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-link", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "update-link" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-network-resource-metadata", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "update-network-resource-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-site", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "update-site" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-vpc-attachment", function()
		local result = common.execute_aws_command_with_input({ "networkmanager", "update-vpc-attachment" })
		assert.is_true(result.success)
	end)

end)