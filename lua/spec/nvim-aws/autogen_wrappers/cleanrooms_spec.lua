-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: cleanrooms

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.cleanrooms")

describe("AWS cleanrooms service testing", function()
	it("should generate a cli skeleton with batch_get_collaboration_analysis_template", function()
		local result = service.batch_get_collaboration_analysis_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with batch_get_schema", function()
		local result = service.batch_get_schema()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with batch_get_schema_analysis_rule", function()
		local result = service.batch_get_schema_analysis_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_analysis_template", function()
		local result = service.create_analysis_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_collaboration", function()
		local result = service.create_collaboration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_configured_audience_model_association", function()
		local result = service.create_configured_audience_model_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_configured_table", function()
		local result = service.create_configured_table()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_configured_table_analysis_rule", function()
		local result = service.create_configured_table_analysis_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_configured_table_association", function()
		local result = service.create_configured_table_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_configured_table_association_analysis_rule", function()
		local result = service.create_configured_table_association_analysis_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_id_mapping_table", function()
		local result = service.create_id_mapping_table()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_id_namespace_association", function()
		local result = service.create_id_namespace_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_membership", function()
		local result = service.create_membership()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_privacy_budget_template", function()
		local result = service.create_privacy_budget_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_analysis_template", function()
		local result = service.delete_analysis_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_collaboration", function()
		local result = service.delete_collaboration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_configured_audience_model_association", function()
		local result = service.delete_configured_audience_model_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_configured_table", function()
		local result = service.delete_configured_table()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_configured_table_analysis_rule", function()
		local result = service.delete_configured_table_analysis_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_configured_table_association", function()
		local result = service.delete_configured_table_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_configured_table_association_analysis_rule", function()
		local result = service.delete_configured_table_association_analysis_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_id_mapping_table", function()
		local result = service.delete_id_mapping_table()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_id_namespace_association", function()
		local result = service.delete_id_namespace_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_member", function()
		local result = service.delete_member()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_membership", function()
		local result = service.delete_membership()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_privacy_budget_template", function()
		local result = service.delete_privacy_budget_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_analysis_template", function()
		local result = service.get_analysis_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_collaboration", function()
		local result = service.get_collaboration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_collaboration_analysis_template", function()
		local result = service.get_collaboration_analysis_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_collaboration_configured_audience_model_association", function()
		local result = service.get_collaboration_configured_audience_model_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_collaboration_id_namespace_association", function()
		local result = service.get_collaboration_id_namespace_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_collaboration_privacy_budget_template", function()
		local result = service.get_collaboration_privacy_budget_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_configured_audience_model_association", function()
		local result = service.get_configured_audience_model_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_configured_table", function()
		local result = service.get_configured_table()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_configured_table_analysis_rule", function()
		local result = service.get_configured_table_analysis_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_configured_table_association", function()
		local result = service.get_configured_table_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_configured_table_association_analysis_rule", function()
		local result = service.get_configured_table_association_analysis_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_id_mapping_table", function()
		local result = service.get_id_mapping_table()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_id_namespace_association", function()
		local result = service.get_id_namespace_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_membership", function()
		local result = service.get_membership()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_privacy_budget_template", function()
		local result = service.get_privacy_budget_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_protected_job", function()
		local result = service.get_protected_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_protected_query", function()
		local result = service.get_protected_query()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_schema", function()
		local result = service.get_schema()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_schema_analysis_rule", function()
		local result = service.get_schema_analysis_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_analysis_templates", function()
		local result = service.list_analysis_templates()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_collaboration_analysis_templates", function()
		local result = service.list_collaboration_analysis_templates()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_collaboration_configured_audience_model_associations", function()
		local result = service.list_collaboration_configured_audience_model_associations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_collaboration_id_namespace_associations", function()
		local result = service.list_collaboration_id_namespace_associations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_collaboration_privacy_budget_templates", function()
		local result = service.list_collaboration_privacy_budget_templates()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_collaboration_privacy_budgets", function()
		local result = service.list_collaboration_privacy_budgets()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_collaborations", function()
		local result = service.list_collaborations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_configured_audience_model_associations", function()
		local result = service.list_configured_audience_model_associations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_configured_table_associations", function()
		local result = service.list_configured_table_associations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_configured_tables", function()
		local result = service.list_configured_tables()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_id_mapping_tables", function()
		local result = service.list_id_mapping_tables()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_id_namespace_associations", function()
		local result = service.list_id_namespace_associations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_members", function()
		local result = service.list_members()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_memberships", function()
		local result = service.list_memberships()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_privacy_budget_templates", function()
		local result = service.list_privacy_budget_templates()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_privacy_budgets", function()
		local result = service.list_privacy_budgets()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_protected_jobs", function()
		local result = service.list_protected_jobs()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_protected_queries", function()
		local result = service.list_protected_queries()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_schemas", function()
		local result = service.list_schemas()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with populate_id_mapping_table", function()
		local result = service.populate_id_mapping_table()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with preview_privacy_impact", function()
		local result = service.preview_privacy_impact()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_protected_job", function()
		local result = service.start_protected_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_protected_query", function()
		local result = service.start_protected_query()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_analysis_template", function()
		local result = service.update_analysis_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_collaboration", function()
		local result = service.update_collaboration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_configured_audience_model_association", function()
		local result = service.update_configured_audience_model_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_configured_table", function()
		local result = service.update_configured_table()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_configured_table_analysis_rule", function()
		local result = service.update_configured_table_analysis_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_configured_table_association", function()
		local result = service.update_configured_table_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_configured_table_association_analysis_rule", function()
		local result = service.update_configured_table_association_analysis_rule()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_id_mapping_table", function()
		local result = service.update_id_mapping_table()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_id_namespace_association", function()
		local result = service.update_id_namespace_association()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_membership", function()
		local result = service.update_membership()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_privacy_budget_template", function()
		local result = service.update_privacy_budget_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_protected_job", function()
		local result = service.update_protected_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_protected_query", function()
		local result = service.update_protected_query()
		assert.is_true(result.success)
	end)
end)