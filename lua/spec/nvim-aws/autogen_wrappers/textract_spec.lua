-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: textract

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.textract")

describe("AWS textract service testing", function()
	it("should generate a cli skeleton with analyze_document", function()
		local result = service.analyze_document()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with analyze_expense", function()
		local result = service.analyze_expense()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with analyze_id", function()
		local result = service.analyze_id()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_adapter", function()
		local result = service.create_adapter()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_adapter_version", function()
		local result = service.create_adapter_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_adapter", function()
		local result = service.delete_adapter()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_adapter_version", function()
		local result = service.delete_adapter_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with detect_document_text", function()
		local result = service.detect_document_text()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_adapter", function()
		local result = service.get_adapter()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_adapter_version", function()
		local result = service.get_adapter_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_document_analysis", function()
		local result = service.get_document_analysis()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_document_text_detection", function()
		local result = service.get_document_text_detection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_expense_analysis", function()
		local result = service.get_expense_analysis()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_lending_analysis", function()
		local result = service.get_lending_analysis()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_lending_analysis_summary", function()
		local result = service.get_lending_analysis_summary()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_adapter_versions", function()
		local result = service.list_adapter_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_adapters", function()
		local result = service.list_adapters()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_document_analysis", function()
		local result = service.start_document_analysis()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_document_text_detection", function()
		local result = service.start_document_text_detection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_expense_analysis", function()
		local result = service.start_expense_analysis()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_lending_analysis", function()
		local result = service.start_lending_analysis()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_adapter", function()
		local result = service.update_adapter()
		assert.is_true(result.success)
	end)

end)
