-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: codebuild

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.codebuild")

describe("AWS codebuild service testing", function()
	it("should generate a cli skeleton with batch_delete_builds", function()
		local result = service.batch_delete_builds()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_build_batches", function()
		local result = service.batch_get_build_batches()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_builds", function()
		local result = service.batch_get_builds()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_command_executions", function()
		local result = service.batch_get_command_executions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_fleets", function()
		local result = service.batch_get_fleets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_projects", function()
		local result = service.batch_get_projects()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_report_groups", function()
		local result = service.batch_get_report_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_reports", function()
		local result = service.batch_get_reports()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_sandboxes", function()
		local result = service.batch_get_sandboxes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_fleet", function()
		local result = service.create_fleet()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_project", function()
		local result = service.create_project()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_report_group", function()
		local result = service.create_report_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_webhook", function()
		local result = service.create_webhook()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_build_batch", function()
		local result = service.delete_build_batch()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_fleet", function()
		local result = service.delete_fleet()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_project", function()
		local result = service.delete_project()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_report", function()
		local result = service.delete_report()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_report_group", function()
		local result = service.delete_report_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_resource_policy", function()
		local result = service.delete_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_source_credentials", function()
		local result = service.delete_source_credentials()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_webhook", function()
		local result = service.delete_webhook()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_code_coverages", function()
		local result = service.describe_code_coverages()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_test_cases", function()
		local result = service.describe_test_cases()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_report_group_trend", function()
		local result = service.get_report_group_trend()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_resource_policy", function()
		local result = service.get_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_source_credentials", function()
		local result = service.import_source_credentials()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with invalidate_project_cache", function()
		local result = service.invalidate_project_cache()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_build_batches", function()
		local result = service.list_build_batches()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_build_batches_for_project", function()
		local result = service.list_build_batches_for_project()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_builds", function()
		local result = service.list_builds()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_builds_for_project", function()
		local result = service.list_builds_for_project()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_command_executions_for_sandbox", function()
		local result = service.list_command_executions_for_sandbox()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_curated_environment_images", function()
		local result = service.list_curated_environment_images()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_fleets", function()
		local result = service.list_fleets()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_projects", function()
		local result = service.list_projects()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_report_groups", function()
		local result = service.list_report_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_reports", function()
		local result = service.list_reports()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_reports_for_report_group", function()
		local result = service.list_reports_for_report_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sandboxes", function()
		local result = service.list_sandboxes()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_sandboxes_for_project", function()
		local result = service.list_sandboxes_for_project()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_shared_projects", function()
		local result = service.list_shared_projects()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_shared_report_groups", function()
		local result = service.list_shared_report_groups()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_source_credentials", function()
		local result = service.list_source_credentials()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_resource_policy", function()
		local result = service.put_resource_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with retry_build", function()
		local result = service.retry_build()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with retry_build_batch", function()
		local result = service.retry_build_batch()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_build", function()
		local result = service.start_build()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_build_batch", function()
		local result = service.start_build_batch()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_command_execution", function()
		local result = service.start_command_execution()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_sandbox", function()
		local result = service.start_sandbox()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_sandbox_connection", function()
		local result = service.start_sandbox_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_build", function()
		local result = service.stop_build()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_build_batch", function()
		local result = service.stop_build_batch()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_sandbox", function()
		local result = service.stop_sandbox()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_fleet", function()
		local result = service.update_fleet()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_project", function()
		local result = service.update_project()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_project_visibility", function()
		local result = service.update_project_visibility()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_report_group", function()
		local result = service.update_report_group()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_webhook", function()
		local result = service.update_webhook()
		assert.is_true(result.success)
	end)

end)