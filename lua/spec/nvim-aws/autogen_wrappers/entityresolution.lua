-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: entityresolution

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS entityresolution service testing", function()
	it("should generate a cli skeleton for add-policy-statement", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "add-policy-statement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-delete-unique-id", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "batch-delete-unique-id" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-id-mapping-workflow", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "create-id-mapping-workflow" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-id-namespace", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "create-id-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-matching-workflow", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "create-matching-workflow" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-schema-mapping", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "create-schema-mapping" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-id-mapping-workflow", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "delete-id-mapping-workflow" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-id-namespace", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "delete-id-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-matching-workflow", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "delete-matching-workflow" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-policy-statement", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "delete-policy-statement" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-schema-mapping", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "delete-schema-mapping" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-id-mapping-job", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "get-id-mapping-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-id-mapping-workflow", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "get-id-mapping-workflow" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-id-namespace", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "get-id-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-match-id", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "get-match-id" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-matching-job", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "get-matching-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-matching-workflow", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "get-matching-workflow" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-policy", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "get-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-provider-service", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "get-provider-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-schema-mapping", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "get-schema-mapping" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-id-mapping-jobs", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "list-id-mapping-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-id-mapping-workflows", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "list-id-mapping-workflows" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-id-namespaces", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "list-id-namespaces" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-matching-jobs", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "list-matching-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-matching-workflows", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "list-matching-workflows" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-provider-services", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "list-provider-services" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-schema-mappings", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "list-schema-mappings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-policy", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "put-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-id-mapping-job", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "start-id-mapping-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-matching-job", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "start-matching-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-id-mapping-workflow", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "update-id-mapping-workflow" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-id-namespace", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "update-id-namespace" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-matching-workflow", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "update-matching-workflow" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-schema-mapping", function()
		local result = common.execute_aws_command_with_input({ "entityresolution", "update-schema-mapping" })
		assert.is_true(result.success)
	end)

end)