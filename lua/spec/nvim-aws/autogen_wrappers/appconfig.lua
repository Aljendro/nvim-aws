-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: appconfig

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS appconfig service testing", function()
	it("should generate a cli skeleton for create-application", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "create-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-configuration-profile", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "create-configuration-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-deployment-strategy", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "create-deployment-strategy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-environment", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "create-environment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-extension", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "create-extension" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-extension-association", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "create-extension-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-hosted-configuration-version", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "create-hosted-configuration-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-application", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "delete-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-configuration-profile", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "delete-configuration-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-deployment-strategy", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "delete-deployment-strategy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-environment", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "delete-environment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-extension", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "delete-extension" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-extension-association", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "delete-extension-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-hosted-configuration-version", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "delete-hosted-configuration-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-account-settings", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "get-account-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-application", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "get-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-configuration", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "get-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-configuration-profile", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "get-configuration-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-deployment", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "get-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-deployment-strategy", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "get-deployment-strategy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-environment", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "get-environment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-extension", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "get-extension" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-extension-association", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "get-extension-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-hosted-configuration-version", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "get-hosted-configuration-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-applications", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "list-applications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-configuration-profiles", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "list-configuration-profiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-deployment-strategies", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "list-deployment-strategies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-deployments", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "list-deployments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-environments", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "list-environments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-extension-associations", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "list-extension-associations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-extensions", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "list-extensions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-hosted-configuration-versions", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "list-hosted-configuration-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-deployment", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "start-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-deployment", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "stop-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-account-settings", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "update-account-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-application", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "update-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-configuration-profile", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "update-configuration-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-deployment-strategy", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "update-deployment-strategy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-environment", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "update-environment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-extension", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "update-extension" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-extension-association", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "update-extension-association" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for validate-configuration", function()
		local result = common.execute_aws_command_with_input({ "appconfig", "validate-configuration" })
		assert.is_true(result.success)
	end)

end)