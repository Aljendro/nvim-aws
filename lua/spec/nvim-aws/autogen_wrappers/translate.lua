-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: translate

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS translate service testing", function()
	it("should generate a cli skeleton for create-parallel-data", function()
		local result = common.execute_aws_command_with_input({ "translate", "create-parallel-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-parallel-data", function()
		local result = common.execute_aws_command_with_input({ "translate", "delete-parallel-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-terminology", function()
		local result = common.execute_aws_command_with_input({ "translate", "delete-terminology" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-text-translation-job", function()
		local result = common.execute_aws_command_with_input({ "translate", "describe-text-translation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-parallel-data", function()
		local result = common.execute_aws_command_with_input({ "translate", "get-parallel-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-terminology", function()
		local result = common.execute_aws_command_with_input({ "translate", "get-terminology" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-terminology", function()
		local result = common.execute_aws_command_with_input({ "translate", "import-terminology" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-languages", function()
		local result = common.execute_aws_command_with_input({ "translate", "list-languages" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-parallel-data", function()
		local result = common.execute_aws_command_with_input({ "translate", "list-parallel-data" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "translate", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-terminologies", function()
		local result = common.execute_aws_command_with_input({ "translate", "list-terminologies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-text-translation-jobs", function()
		local result = common.execute_aws_command_with_input({ "translate", "list-text-translation-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-text-translation-job", function()
		local result = common.execute_aws_command_with_input({ "translate", "start-text-translation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-text-translation-job", function()
		local result = common.execute_aws_command_with_input({ "translate", "stop-text-translation-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "translate", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for translate-document", function()
		local result = common.execute_aws_command_with_input({ "translate", "translate-document" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for translate-text", function()
		local result = common.execute_aws_command_with_input({ "translate", "translate-text" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "translate", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-parallel-data", function()
		local result = common.execute_aws_command_with_input({ "translate", "update-parallel-data" })
		assert.is_true(result.success)
	end)

end)