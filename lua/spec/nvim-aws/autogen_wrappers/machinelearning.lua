-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: machine-learning

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS machine-learning service testing", function()
	it("should generate a cli skeleton for add-tags", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "add-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-batch-prediction", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "create-batch-prediction" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-data-source-from-rds", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "create-data-source-from-rds" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-data-source-from-redshift", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "create-data-source-from-redshift" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-data-source-from-s3", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "create-data-source-from-s3" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-evaluation", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "create-evaluation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-ml-model", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "create-ml-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-realtime-endpoint", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "create-realtime-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-batch-prediction", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "delete-batch-prediction" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-data-source", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "delete-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-evaluation", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "delete-evaluation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-ml-model", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "delete-ml-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-realtime-endpoint", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "delete-realtime-endpoint" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-tags", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "delete-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-batch-predictions", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "describe-batch-predictions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-data-sources", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "describe-data-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-evaluations", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "describe-evaluations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-ml-models", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "describe-ml-models" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-tags", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "describe-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-batch-prediction", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "get-batch-prediction" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-source", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "get-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-evaluation", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "get-evaluation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-ml-model", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "get-ml-model" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for predict", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "predict" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-batch-prediction", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "update-batch-prediction" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-data-source", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "update-data-source" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-evaluation", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "update-evaluation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-ml-model", function()
		local result = common.execute_aws_command_with_input({ "machinelearning", "update-ml-model" })
		assert.is_true(result.success)
	end)

end)