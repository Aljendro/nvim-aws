-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: medical-imaging

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS medical-imaging service testing", function()
	it("should generate a cli skeleton for copy-image-set", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "copy-image-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-datastore", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "create-datastore" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-datastore", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "delete-datastore" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-image-set", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "delete-image-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-dicom-import-job", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "get-dicom-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-datastore", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "get-datastore" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-image-frame", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "get-image-frame" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-image-set", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "get-image-set" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-image-set-metadata", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "get-image-set-metadata" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-dicom-import-jobs", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "list-dicom-import-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-datastores", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "list-datastores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-image-set-versions", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "list-image-set-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for search-image-sets", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "search-image-sets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-dicom-import-job", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "start-dicom-import-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-image-set-metadata", function()
		local result = common.execute_aws_command_with_input({ "medical-imaging", "update-image-set-metadata" })
		assert.is_true(result.success)
	end)

end)