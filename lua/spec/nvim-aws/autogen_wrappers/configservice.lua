-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: config-service

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS config-service service testing", function()
	it("should generate a cli skeleton for associate-resource-types", function()
		local result = common.execute_aws_command_with_input({ "configservice", "associate-resource-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-aggregate-resource-config", function()
		local result = common.execute_aws_command_with_input({ "configservice", "batch-get-aggregate-resource-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-get-resource-config", function()
		local result = common.execute_aws_command_with_input({ "configservice", "batch-get-resource-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-aggregation-authorization", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-aggregation-authorization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-config-rule", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-config-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-configuration-aggregator", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-configuration-aggregator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-configuration-recorder", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-configuration-recorder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-conformance-pack", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-conformance-pack" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-delivery-channel", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-delivery-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-evaluation-results", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-evaluation-results" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-organization-config-rule", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-organization-config-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-organization-conformance-pack", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-organization-conformance-pack" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-pending-aggregation-request", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-pending-aggregation-request" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-remediation-configuration", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-remediation-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-remediation-exceptions", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-remediation-exceptions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-resource-config", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-resource-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-retention-configuration", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-retention-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-service-linked-configuration-recorder", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-service-linked-configuration-recorder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-stored-query", function()
		local result = common.execute_aws_command_with_input({ "configservice", "delete-stored-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for deliver-config-snapshot", function()
		local result = common.execute_aws_command_with_input({ "configservice", "deliver-config-snapshot" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-aggregate-compliance-by-config-rules", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-aggregate-compliance-by-config-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-aggregate-compliance-by-conformance-packs", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-aggregate-compliance-by-conformance-packs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-aggregation-authorizations", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-aggregation-authorizations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-compliance-by-config-rule", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-compliance-by-config-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-compliance-by-resource", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-compliance-by-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-config-rule-evaluation-status", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-config-rule-evaluation-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-config-rules", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-config-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-configuration-aggregator-sources-status", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-configuration-aggregator-sources-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-configuration-aggregators", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-configuration-aggregators" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-configuration-recorder-status", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-configuration-recorder-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-configuration-recorders", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-configuration-recorders" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-conformance-pack-compliance", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-conformance-pack-compliance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-conformance-pack-status", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-conformance-pack-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-conformance-packs", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-conformance-packs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-delivery-channel-status", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-delivery-channel-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-delivery-channels", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-delivery-channels" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-organization-config-rule-statuses", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-organization-config-rule-statuses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-organization-config-rules", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-organization-config-rules" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-organization-conformance-pack-statuses", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-organization-conformance-pack-statuses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-organization-conformance-packs", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-organization-conformance-packs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-pending-aggregation-requests", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-pending-aggregation-requests" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-remediation-configurations", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-remediation-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-remediation-exceptions", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-remediation-exceptions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-remediation-execution-status", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-remediation-execution-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-retention-configurations", function()
		local result = common.execute_aws_command_with_input({ "configservice", "describe-retention-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-resource-types", function()
		local result = common.execute_aws_command_with_input({ "configservice", "disassociate-resource-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-aggregate-compliance-details-by-config-rule", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-aggregate-compliance-details-by-config-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-aggregate-config-rule-compliance-summary", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-aggregate-config-rule-compliance-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-aggregate-conformance-pack-compliance-summary", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-aggregate-conformance-pack-compliance-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-aggregate-discovered-resource-counts", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-aggregate-discovered-resource-counts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-aggregate-resource-config", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-aggregate-resource-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-compliance-details-by-config-rule", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-compliance-details-by-config-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-compliance-details-by-resource", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-compliance-details-by-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-compliance-summary-by-config-rule", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-compliance-summary-by-config-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-compliance-summary-by-resource-type", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-compliance-summary-by-resource-type" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-conformance-pack-compliance-details", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-conformance-pack-compliance-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-conformance-pack-compliance-summary", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-conformance-pack-compliance-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-custom-rule-policy", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-custom-rule-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-discovered-resource-counts", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-discovered-resource-counts" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-organization-config-rule-detailed-status", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-organization-config-rule-detailed-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-organization-conformance-pack-detailed-status", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-organization-conformance-pack-detailed-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-organization-custom-rule-policy", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-organization-custom-rule-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resource-config-history", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-resource-config-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resource-evaluation-summary", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-resource-evaluation-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-stored-query", function()
		local result = common.execute_aws_command_with_input({ "configservice", "get-stored-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-aggregate-discovered-resources", function()
		local result = common.execute_aws_command_with_input({ "configservice", "list-aggregate-discovered-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-configuration-recorders", function()
		local result = common.execute_aws_command_with_input({ "configservice", "list-configuration-recorders" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-conformance-pack-compliance-scores", function()
		local result = common.execute_aws_command_with_input({ "configservice", "list-conformance-pack-compliance-scores" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-discovered-resources", function()
		local result = common.execute_aws_command_with_input({ "configservice", "list-discovered-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-resource-evaluations", function()
		local result = common.execute_aws_command_with_input({ "configservice", "list-resource-evaluations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-stored-queries", function()
		local result = common.execute_aws_command_with_input({ "configservice", "list-stored-queries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "configservice", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-aggregation-authorization", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-aggregation-authorization" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-config-rule", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-config-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-configuration-aggregator", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-configuration-aggregator" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-configuration-recorder", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-configuration-recorder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-conformance-pack", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-conformance-pack" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-delivery-channel", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-delivery-channel" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-evaluations", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-evaluations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-external-evaluation", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-external-evaluation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-organization-config-rule", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-organization-config-rule" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-organization-conformance-pack", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-organization-conformance-pack" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-remediation-configurations", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-remediation-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-remediation-exceptions", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-remediation-exceptions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-resource-config", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-resource-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-retention-configuration", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-retention-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-service-linked-configuration-recorder", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-service-linked-configuration-recorder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-stored-query", function()
		local result = common.execute_aws_command_with_input({ "configservice", "put-stored-query" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for select-aggregate-resource-config", function()
		local result = common.execute_aws_command_with_input({ "configservice", "select-aggregate-resource-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for select-resource-config", function()
		local result = common.execute_aws_command_with_input({ "configservice", "select-resource-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-config-rules-evaluation", function()
		local result = common.execute_aws_command_with_input({ "configservice", "start-config-rules-evaluation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-configuration-recorder", function()
		local result = common.execute_aws_command_with_input({ "configservice", "start-configuration-recorder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-remediation-execution", function()
		local result = common.execute_aws_command_with_input({ "configservice", "start-remediation-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-resource-evaluation", function()
		local result = common.execute_aws_command_with_input({ "configservice", "start-resource-evaluation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-configuration-recorder", function()
		local result = common.execute_aws_command_with_input({ "configservice", "stop-configuration-recorder" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "configservice", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "configservice", "untag-resource" })
		assert.is_true(result.success)
	end)

end)