-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: serverlessrepo

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.serverlessrepo")

describe("AWS serverlessrepo service testing", function()
	it("should generate a cli skeleton with create_application", function()
		local result = service.create_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_application_version", function()
		local result = service.create_application_version()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_cloud_formation_change_set", function()
		local result = service.create_cloud_formation_change_set()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_cloud_formation_template", function()
		local result = service.create_cloud_formation_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_application", function()
		local result = service.delete_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_application", function()
		local result = service.get_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_application_policy", function()
		local result = service.get_application_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_cloud_formation_template", function()
		local result = service.get_cloud_formation_template()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_application_dependencies", function()
		local result = service.list_application_dependencies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_application_versions", function()
		local result = service.list_application_versions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_applications", function()
		local result = service.list_applications()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_application_policy", function()
		local result = service.put_application_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with unshare_application", function()
		local result = service.unshare_application()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_application", function()
		local result = service.update_application()
		assert.is_true(result.success)
	end)

end)
