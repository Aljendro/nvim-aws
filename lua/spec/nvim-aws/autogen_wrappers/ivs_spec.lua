-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: ivs

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.ivs")

describe("AWS ivs service testing", function()
	it("should generate a cli skeleton with batch_get_channel", function()
		local result = service.batch_get_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_get_stream_key", function()
		local result = service.batch_get_stream_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with batch_start_viewer_session_revocation", function()
		local result = service.batch_start_viewer_session_revocation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_channel", function()
		local result = service.create_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_playback_restriction_policy", function()
		local result = service.create_playback_restriction_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_recording_configuration", function()
		local result = service.create_recording_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_stream_key", function()
		local result = service.create_stream_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_channel", function()
		local result = service.delete_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_playback_key_pair", function()
		local result = service.delete_playback_key_pair()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_playback_restriction_policy", function()
		local result = service.delete_playback_restriction_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_recording_configuration", function()
		local result = service.delete_recording_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_stream_key", function()
		local result = service.delete_stream_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_channel", function()
		local result = service.get_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_playback_key_pair", function()
		local result = service.get_playback_key_pair()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_playback_restriction_policy", function()
		local result = service.get_playback_restriction_policy()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_recording_configuration", function()
		local result = service.get_recording_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_stream", function()
		local result = service.get_stream()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_stream_key", function()
		local result = service.get_stream_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with get_stream_session", function()
		local result = service.get_stream_session()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with import_playback_key_pair", function()
		local result = service.import_playback_key_pair()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_channels", function()
		local result = service.list_channels()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_playback_key_pairs", function()
		local result = service.list_playback_key_pairs()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_playback_restriction_policies", function()
		local result = service.list_playback_restriction_policies()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_recording_configurations", function()
		local result = service.list_recording_configurations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_stream_keys", function()
		local result = service.list_stream_keys()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_stream_sessions", function()
		local result = service.list_stream_sessions()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_streams", function()
		local result = service.list_streams()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with put_metadata", function()
		local result = service.put_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_viewer_session_revocation", function()
		local result = service.start_viewer_session_revocation()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_stream", function()
		local result = service.stop_stream()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_channel", function()
		local result = service.update_channel()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_playback_restriction_policy", function()
		local result = service.update_playback_restriction_policy()
		assert.is_true(result.success)
	end)

end)
