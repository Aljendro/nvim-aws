-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: b2bi

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.b2bi")

describe("AWS b2bi service testing", function()
	it("should generate a cli skeleton with create_capability", function()
		local result = service.create_capability()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_partnership", function()
		local result = service.create_partnership()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_profile", function()
		local result = service.create_profile()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_starter_mapping_template", function()
		local result = service.create_starter_mapping_template()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_transformer", function()
		local result = service.create_transformer()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_capability", function()
		local result = service.delete_capability()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_partnership", function()
		local result = service.delete_partnership()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_profile", function()
		local result = service.delete_profile()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_transformer", function()
		local result = service.delete_transformer()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with generate_mapping", function()
		local result = service.generate_mapping()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_capability", function()
		local result = service.get_capability()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_partnership", function()
		local result = service.get_partnership()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_profile", function()
		local result = service.get_profile()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_transformer", function()
		local result = service.get_transformer()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with get_transformer_job", function()
		local result = service.get_transformer_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_capabilities", function()
		local result = service.list_capabilities()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_partnerships", function()
		local result = service.list_partnerships()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_profiles", function()
		local result = service.list_profiles()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_transformers", function()
		local result = service.list_transformers()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with start_transformer_job", function()
		local result = service.start_transformer_job()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with test_conversion", function()
		local result = service.test_conversion()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with test_mapping", function()
		local result = service.test_mapping()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with test_parsing", function()
		local result = service.test_parsing()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_capability", function()
		local result = service.update_capability()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_partnership", function()
		local result = service.update_partnership()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_profile", function()
		local result = service.update_profile()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_transformer", function()
		local result = service.update_transformer()
		assert.is_true(result.success)
	end)
end)