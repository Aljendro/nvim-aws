-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: proton

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS proton service testing", function()
	it("should generate a cli skeleton for accept-environment-account-connection", function()
		local result = common.execute_aws_command_with_input({ "proton", "accept-environment-account-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-component-deployment", function()
		local result = common.execute_aws_command_with_input({ "proton", "cancel-component-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-environment-deployment", function()
		local result = common.execute_aws_command_with_input({ "proton", "cancel-environment-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-service-instance-deployment", function()
		local result = common.execute_aws_command_with_input({ "proton", "cancel-service-instance-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-service-pipeline-deployment", function()
		local result = common.execute_aws_command_with_input({ "proton", "cancel-service-pipeline-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-component", function()
		local result = common.execute_aws_command_with_input({ "proton", "create-component" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-environment", function()
		local result = common.execute_aws_command_with_input({ "proton", "create-environment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-environment-account-connection", function()
		local result = common.execute_aws_command_with_input({ "proton", "create-environment-account-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-environment-template", function()
		local result = common.execute_aws_command_with_input({ "proton", "create-environment-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-environment-template-version", function()
		local result = common.execute_aws_command_with_input({ "proton", "create-environment-template-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-repository", function()
		local result = common.execute_aws_command_with_input({ "proton", "create-repository" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-service", function()
		local result = common.execute_aws_command_with_input({ "proton", "create-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-service-instance", function()
		local result = common.execute_aws_command_with_input({ "proton", "create-service-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-service-sync-config", function()
		local result = common.execute_aws_command_with_input({ "proton", "create-service-sync-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-service-template", function()
		local result = common.execute_aws_command_with_input({ "proton", "create-service-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-service-template-version", function()
		local result = common.execute_aws_command_with_input({ "proton", "create-service-template-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-template-sync-config", function()
		local result = common.execute_aws_command_with_input({ "proton", "create-template-sync-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-component", function()
		local result = common.execute_aws_command_with_input({ "proton", "delete-component" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-deployment", function()
		local result = common.execute_aws_command_with_input({ "proton", "delete-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-environment", function()
		local result = common.execute_aws_command_with_input({ "proton", "delete-environment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-environment-account-connection", function()
		local result = common.execute_aws_command_with_input({ "proton", "delete-environment-account-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-environment-template", function()
		local result = common.execute_aws_command_with_input({ "proton", "delete-environment-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-environment-template-version", function()
		local result = common.execute_aws_command_with_input({ "proton", "delete-environment-template-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-repository", function()
		local result = common.execute_aws_command_with_input({ "proton", "delete-repository" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-service", function()
		local result = common.execute_aws_command_with_input({ "proton", "delete-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-service-sync-config", function()
		local result = common.execute_aws_command_with_input({ "proton", "delete-service-sync-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-service-template", function()
		local result = common.execute_aws_command_with_input({ "proton", "delete-service-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-service-template-version", function()
		local result = common.execute_aws_command_with_input({ "proton", "delete-service-template-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-template-sync-config", function()
		local result = common.execute_aws_command_with_input({ "proton", "delete-template-sync-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-account-settings", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-account-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-component", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-component" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-deployment", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-environment", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-environment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-environment-account-connection", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-environment-account-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-environment-template", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-environment-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-environment-template-version", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-environment-template-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-repository", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-repository" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-repository-sync-status", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-repository-sync-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-resources-summary", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-resources-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-instance", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-service-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-instance-sync-status", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-service-instance-sync-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-sync-blocker-summary", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-service-sync-blocker-summary" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-sync-config", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-service-sync-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-template", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-service-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-service-template-version", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-service-template-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-template-sync-config", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-template-sync-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-template-sync-status", function()
		local result = common.execute_aws_command_with_input({ "proton", "get-template-sync-status" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-component-outputs", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-component-outputs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-component-provisioned-resources", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-component-provisioned-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-components", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-components" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-deployments", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-deployments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-environment-account-connections", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-environment-account-connections" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-environment-outputs", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-environment-outputs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-environment-provisioned-resources", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-environment-provisioned-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-environment-template-versions", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-environment-template-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-environment-templates", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-environment-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-environments", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-environments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-repositories", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-repositories" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-repository-sync-definitions", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-repository-sync-definitions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-instance-outputs", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-service-instance-outputs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-instance-provisioned-resources", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-service-instance-provisioned-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-instances", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-service-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-pipeline-outputs", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-service-pipeline-outputs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-pipeline-provisioned-resources", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-service-pipeline-provisioned-resources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-template-versions", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-service-template-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-service-templates", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-service-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-services", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-services" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "proton", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for notify-resource-deployment-status-change", function()
		local result = common.execute_aws_command_with_input({ "proton", "notify-resource-deployment-status-change" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for reject-environment-account-connection", function()
		local result = common.execute_aws_command_with_input({ "proton", "reject-environment-account-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "proton", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "proton", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-account-settings", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-account-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-component", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-component" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-environment", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-environment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-environment-account-connection", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-environment-account-connection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-environment-template", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-environment-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-environment-template-version", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-environment-template-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-service", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-service" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-service-instance", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-service-instance" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-service-pipeline", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-service-pipeline" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-service-sync-blocker", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-service-sync-blocker" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-service-sync-config", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-service-sync-config" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-service-template", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-service-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-service-template-version", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-service-template-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-template-sync-config", function()
		local result = common.execute_aws_command_with_input({ "proton", "update-template-sync-config" })
		assert.is_true(result.success)
	end)

end)