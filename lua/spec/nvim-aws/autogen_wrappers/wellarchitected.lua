-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: wellarchitected

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS wellarchitected service testing", function()
	it("should generate a cli skeleton for associate-lenses", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "associate-lenses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for associate-profiles", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "associate-profiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-lens-share", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "create-lens-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-lens-version", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "create-lens-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-milestone", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "create-milestone" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-profile", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "create-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-profile-share", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "create-profile-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-review-template", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "create-review-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-template-share", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "create-template-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-workload", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "create-workload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-workload-share", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "create-workload-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-lens", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "delete-lens" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-lens-share", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "delete-lens-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-profile", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "delete-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-profile-share", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "delete-profile-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-review-template", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "delete-review-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-template-share", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "delete-template-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-workload", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "delete-workload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-workload-share", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "delete-workload-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-lenses", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "disassociate-lenses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disassociate-profiles", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "disassociate-profiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for export-lens", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "export-lens" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-answer", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-answer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-consolidated-report", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-consolidated-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-global-settings", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-global-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-lens", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-lens" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-lens-review", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-lens-review" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-lens-review-report", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-lens-review-report" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-lens-version-difference", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-lens-version-difference" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-milestone", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-milestone" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-profile", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-profile-template", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-profile-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-review-template", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-review-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-review-template-answer", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-review-template-answer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-review-template-lens-review", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-review-template-lens-review" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-workload", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "get-workload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for import-lens", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "import-lens" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-answers", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-answers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-check-details", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-check-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-check-summaries", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-check-summaries" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-lens-review-improvements", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-lens-review-improvements" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-lens-reviews", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-lens-reviews" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-lens-shares", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-lens-shares" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-lenses", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-lenses" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-milestones", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-milestones" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-notifications", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-notifications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-profile-notifications", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-profile-notifications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-profile-shares", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-profile-shares" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-profiles", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-profiles" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-review-template-answers", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-review-template-answers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-review-templates", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-review-templates" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-share-invitations", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-share-invitations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-template-shares", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-template-shares" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-workload-shares", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-workload-shares" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-workloads", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "list-workloads" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-answer", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "update-answer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-global-settings", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "update-global-settings" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-integration", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "update-integration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-lens-review", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "update-lens-review" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-profile", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "update-profile" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-review-template", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "update-review-template" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-review-template-answer", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "update-review-template-answer" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-review-template-lens-review", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "update-review-template-lens-review" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-share-invitation", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "update-share-invitation" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-workload", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "update-workload" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-workload-share", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "update-workload-share" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for upgrade-lens-review", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "upgrade-lens-review" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for upgrade-profile-version", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "upgrade-profile-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for upgrade-review-template-lens-review", function()
		local result = common.execute_aws_command_with_input({ "wellarchitected", "upgrade-review-template-lens-review" })
		assert.is_true(result.success)
	end)

end)