-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: comprehendmedical

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS comprehendmedical service testing", function()
	it("should generate a cli skeleton for describe-entities-detection-v2-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "describe-entities-detection-v2-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-icd10-cm-inference-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "describe-icd10-cm-inference-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-phi-detection-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "describe-phi-detection-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-rx-norm-inference-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "describe-rx-norm-inference-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-snomedct-inference-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "describe-snomedct-inference-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detect-entities", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "detect-entities" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detect-entities-v2", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "detect-entities-v2" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detect-phi", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "detect-phi" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for infer-icd10-cm", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "infer-icd10-cm" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for infer-rx-norm", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "infer-rx-norm" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for infer-snomedct", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "infer-snomedct" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-entities-detection-v2-jobs", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "list-entities-detection-v2-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-icd10-cm-inference-jobs", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "list-icd10-cm-inference-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-phi-detection-jobs", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "list-phi-detection-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-rx-norm-inference-jobs", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "list-rx-norm-inference-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-snomedct-inference-jobs", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "list-snomedct-inference-jobs" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-entities-detection-v2-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "start-entities-detection-v2-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-icd10-cm-inference-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "start-icd10-cm-inference-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-phi-detection-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "start-phi-detection-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-rx-norm-inference-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "start-rx-norm-inference-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-snomedct-inference-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "start-snomedct-inference-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-entities-detection-v2-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "stop-entities-detection-v2-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-icd10-cm-inference-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "stop-icd10-cm-inference-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-phi-detection-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "stop-phi-detection-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-rx-norm-inference-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "stop-rx-norm-inference-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-snomedct-inference-job", function()
		local result = common.execute_aws_command_with_input({ "comprehendmedical", "stop-snomedct-inference-job" })
		assert.is_true(result.success)
	end)

end)