-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: auto-scaling

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS auto-scaling service testing", function()
	it("should generate a cli skeleton for attach-instances", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "attach-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-load-balancer-target-groups", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "attach-load-balancer-target-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-load-balancers", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "attach-load-balancers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for attach-traffic-sources", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "attach-traffic-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-delete-scheduled-action", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "batch-delete-scheduled-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for batch-put-scheduled-update-group-action", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "batch-put-scheduled-update-group-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for cancel-instance-refresh", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "cancel-instance-refresh" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for complete-lifecycle-action", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "complete-lifecycle-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-auto-scaling-group", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "create-auto-scaling-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-launch-configuration", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "create-launch-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-or-update-tags", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "create-or-update-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-auto-scaling-group", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "delete-auto-scaling-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-launch-configuration", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "delete-launch-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-lifecycle-hook", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "delete-lifecycle-hook" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-notification-configuration", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "delete-notification-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-policy", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "delete-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-scheduled-action", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "delete-scheduled-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-tags", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "delete-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-warm-pool", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "delete-warm-pool" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-account-limits", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-account-limits" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-adjustment-types", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-adjustment-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-auto-scaling-groups", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-auto-scaling-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-auto-scaling-instances", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-auto-scaling-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-auto-scaling-notification-types", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-auto-scaling-notification-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-instance-refreshes", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-instance-refreshes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-launch-configurations", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-launch-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-lifecycle-hook-types", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-lifecycle-hook-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-lifecycle-hooks", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-lifecycle-hooks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-load-balancer-target-groups", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-load-balancer-target-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-load-balancers", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-load-balancers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-metric-collection-types", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-metric-collection-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-notification-configurations", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-notification-configurations" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-policies", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-policies" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-scaling-activities", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-scaling-activities" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-scaling-process-types", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-scaling-process-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-scheduled-actions", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-scheduled-actions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-tags", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-tags" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-termination-policy-types", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-termination-policy-types" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-traffic-sources", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-traffic-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-warm-pool", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "describe-warm-pool" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-instances", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "detach-instances" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-load-balancer-target-groups", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "detach-load-balancer-target-groups" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-load-balancers", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "detach-load-balancers" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for detach-traffic-sources", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "detach-traffic-sources" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for disable-metrics-collection", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "disable-metrics-collection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enable-metrics-collection", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "enable-metrics-collection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for enter-standby", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "enter-standby" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for execute-policy", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "execute-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for exit-standby", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "exit-standby" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-predictive-scaling-forecast", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "get-predictive-scaling-forecast" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-lifecycle-hook", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "put-lifecycle-hook" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-notification-configuration", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "put-notification-configuration" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-scaling-policy", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "put-scaling-policy" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-scheduled-update-group-action", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "put-scheduled-update-group-action" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for put-warm-pool", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "put-warm-pool" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for record-lifecycle-action-heartbeat", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "record-lifecycle-action-heartbeat" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for resume-processes", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "resume-processes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for rollback-instance-refresh", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "rollback-instance-refresh" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-desired-capacity", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "set-desired-capacity" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-instance-health", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "set-instance-health" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for set-instance-protection", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "set-instance-protection" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-instance-refresh", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "start-instance-refresh" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for suspend-processes", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "suspend-processes" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for terminate-instance-in-auto-scaling-group", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "terminate-instance-in-auto-scaling-group" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-auto-scaling-group", function()
		local result = common.execute_aws_command_with_input({ "autoscaling", "update-auto-scaling-group" })
		assert.is_true(result.success)
	end)

end)