-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: timestream-write

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS timestream-write service testing", function()
	it("should generate a cli skeleton for create-batch-load-task", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "create-batch-load-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-database", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "create-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-table", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "create-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-database", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "delete-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-table", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "delete-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-batch-load-task", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "describe-batch-load-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-database", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "describe-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-endpoints", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "describe-endpoints" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for describe-table", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "describe-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-batch-load-tasks", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "list-batch-load-tasks" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-databases", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "list-databases" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tables", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "list-tables" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for resume-batch-load-task", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "resume-batch-load-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-database", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "update-database" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-table", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "update-table" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for write-records", function()
		local result = common.execute_aws_command_with_input({ "timestream-write", "write-records" })
		assert.is_true(result.success)
	end)

end)