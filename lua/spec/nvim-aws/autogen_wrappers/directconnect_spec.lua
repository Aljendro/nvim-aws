-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: directconnect

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.directconnect")

describe("AWS directconnect service testing", function()
	it("should generate a cli skeleton with accept_direct_connect_gateway_association_proposal", function()
		local result = service.accept_direct_connect_gateway_association_proposal()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with allocate_hosted_connection", function()
		local result = service.allocate_hosted_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with allocate_private_virtual_interface", function()
		local result = service.allocate_private_virtual_interface()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with allocate_public_virtual_interface", function()
		local result = service.allocate_public_virtual_interface()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with allocate_transit_virtual_interface", function()
		local result = service.allocate_transit_virtual_interface()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_connection_with_lag", function()
		local result = service.associate_connection_with_lag()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_hosted_connection", function()
		local result = service.associate_hosted_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_mac_sec_key", function()
		local result = service.associate_mac_sec_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with associate_virtual_interface", function()
		local result = service.associate_virtual_interface()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with confirm_connection", function()
		local result = service.confirm_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with confirm_customer_agreement", function()
		local result = service.confirm_customer_agreement()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with confirm_private_virtual_interface", function()
		local result = service.confirm_private_virtual_interface()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with confirm_public_virtual_interface", function()
		local result = service.confirm_public_virtual_interface()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with confirm_transit_virtual_interface", function()
		local result = service.confirm_transit_virtual_interface()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_bgp_peer", function()
		local result = service.create_bgp_peer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_connection", function()
		local result = service.create_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_direct_connect_gateway", function()
		local result = service.create_direct_connect_gateway()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_direct_connect_gateway_association", function()
		local result = service.create_direct_connect_gateway_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_direct_connect_gateway_association_proposal", function()
		local result = service.create_direct_connect_gateway_association_proposal()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_interconnect", function()
		local result = service.create_interconnect()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_lag", function()
		local result = service.create_lag()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_private_virtual_interface", function()
		local result = service.create_private_virtual_interface()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_public_virtual_interface", function()
		local result = service.create_public_virtual_interface()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with create_transit_virtual_interface", function()
		local result = service.create_transit_virtual_interface()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_bgp_peer", function()
		local result = service.delete_bgp_peer()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_connection", function()
		local result = service.delete_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_direct_connect_gateway", function()
		local result = service.delete_direct_connect_gateway()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_direct_connect_gateway_association", function()
		local result = service.delete_direct_connect_gateway_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_direct_connect_gateway_association_proposal", function()
		local result = service.delete_direct_connect_gateway_association_proposal()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_interconnect", function()
		local result = service.delete_interconnect()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_lag", function()
		local result = service.delete_lag()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with delete_virtual_interface", function()
		local result = service.delete_virtual_interface()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_connections", function()
		local result = service.describe_connections()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_customer_metadata", function()
		local result = service.describe_customer_metadata()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_direct_connect_gateway_association_proposals", function()
		local result = service.describe_direct_connect_gateway_association_proposals()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_direct_connect_gateway_associations", function()
		local result = service.describe_direct_connect_gateway_associations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_direct_connect_gateway_attachments", function()
		local result = service.describe_direct_connect_gateway_attachments()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_direct_connect_gateways", function()
		local result = service.describe_direct_connect_gateways()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_hosted_connections", function()
		local result = service.describe_hosted_connections()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_interconnects", function()
		local result = service.describe_interconnects()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_lags", function()
		local result = service.describe_lags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_loa", function()
		local result = service.describe_loa()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_locations", function()
		local result = service.describe_locations()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_router_configuration", function()
		local result = service.describe_router_configuration()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_tags", function()
		local result = service.describe_tags()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_virtual_gateways", function()
		local result = service.describe_virtual_gateways()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with describe_virtual_interfaces", function()
		local result = service.describe_virtual_interfaces()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_connection_from_lag", function()
		local result = service.disassociate_connection_from_lag()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with disassociate_mac_sec_key", function()
		local result = service.disassociate_mac_sec_key()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with list_virtual_interface_test_history", function()
		local result = service.list_virtual_interface_test_history()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with start_bgp_failover_test", function()
		local result = service.start_bgp_failover_test()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with stop_bgp_failover_test", function()
		local result = service.stop_bgp_failover_test()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_connection", function()
		local result = service.update_connection()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_direct_connect_gateway", function()
		local result = service.update_direct_connect_gateway()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_direct_connect_gateway_association", function()
		local result = service.update_direct_connect_gateway_association()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_lag", function()
		local result = service.update_lag()
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton with update_virtual_interface_attributes", function()
		local result = service.update_virtual_interface_attributes()
		assert.is_true(result.success)
	end)

end)
