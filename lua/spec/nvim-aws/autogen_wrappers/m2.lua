-- AUTOGENERATED FILE - DO NOT EDIT
-- Generated: 2025-04-08
-- AWS Service: m2

require("nvim-aws").setup()
local common = require("nvim-aws.wrappers.common")

describe("AWS m2 service testing", function()
	it("should generate a cli skeleton for cancel-batch-job-execution", function()
		local result = common.execute_aws_command_with_input({ "m2", "cancel-batch-job-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-application", function()
		local result = common.execute_aws_command_with_input({ "m2", "create-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-data-set-import-task", function()
		local result = common.execute_aws_command_with_input({ "m2", "create-data-set-import-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-deployment", function()
		local result = common.execute_aws_command_with_input({ "m2", "create-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for create-environment", function()
		local result = common.execute_aws_command_with_input({ "m2", "create-environment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-application", function()
		local result = common.execute_aws_command_with_input({ "m2", "delete-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-application-from-environment", function()
		local result = common.execute_aws_command_with_input({ "m2", "delete-application-from-environment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for delete-environment", function()
		local result = common.execute_aws_command_with_input({ "m2", "delete-environment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-application", function()
		local result = common.execute_aws_command_with_input({ "m2", "get-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-application-version", function()
		local result = common.execute_aws_command_with_input({ "m2", "get-application-version" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-batch-job-execution", function()
		local result = common.execute_aws_command_with_input({ "m2", "get-batch-job-execution" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-set-details", function()
		local result = common.execute_aws_command_with_input({ "m2", "get-data-set-details" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-data-set-import-task", function()
		local result = common.execute_aws_command_with_input({ "m2", "get-data-set-import-task" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-deployment", function()
		local result = common.execute_aws_command_with_input({ "m2", "get-deployment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-environment", function()
		local result = common.execute_aws_command_with_input({ "m2", "get-environment" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for get-signed-bluinsights-url", function()
		local result = common.execute_aws_command_with_input({ "m2", "get-signed-bluinsights-url" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-application-versions", function()
		local result = common.execute_aws_command_with_input({ "m2", "list-application-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-applications", function()
		local result = common.execute_aws_command_with_input({ "m2", "list-applications" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-batch-job-definitions", function()
		local result = common.execute_aws_command_with_input({ "m2", "list-batch-job-definitions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-batch-job-executions", function()
		local result = common.execute_aws_command_with_input({ "m2", "list-batch-job-executions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-batch-job-restart-points", function()
		local result = common.execute_aws_command_with_input({ "m2", "list-batch-job-restart-points" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-data-set-import-history", function()
		local result = common.execute_aws_command_with_input({ "m2", "list-data-set-import-history" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-data-sets", function()
		local result = common.execute_aws_command_with_input({ "m2", "list-data-sets" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-deployments", function()
		local result = common.execute_aws_command_with_input({ "m2", "list-deployments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-engine-versions", function()
		local result = common.execute_aws_command_with_input({ "m2", "list-engine-versions" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-environments", function()
		local result = common.execute_aws_command_with_input({ "m2", "list-environments" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for list-tags-for-resource", function()
		local result = common.execute_aws_command_with_input({ "m2", "list-tags-for-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-application", function()
		local result = common.execute_aws_command_with_input({ "m2", "start-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for start-batch-job", function()
		local result = common.execute_aws_command_with_input({ "m2", "start-batch-job" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for stop-application", function()
		local result = common.execute_aws_command_with_input({ "m2", "stop-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for tag-resource", function()
		local result = common.execute_aws_command_with_input({ "m2", "tag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for untag-resource", function()
		local result = common.execute_aws_command_with_input({ "m2", "untag-resource" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-application", function()
		local result = common.execute_aws_command_with_input({ "m2", "update-application" })
		assert.is_true(result.success)
	end)

	it("should generate a cli skeleton for update-environment", function()
		local result = common.execute_aws_command_with_input({ "m2", "update-environment" })
		assert.is_true(result.success)
	end)

end)