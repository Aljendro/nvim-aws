-- AUTOGENERATED FILE - DO NOT EDIT
-- AWS Service: mediapackage-vod

require("nvim-aws").setup()
local service = require("nvim-aws.autogen_wrappers.mediapackage-vod")

describe("AWS mediapackage-vod service testing", function()
	it("should generate a cli skeleton with configure_logs", function()
		local result = service.configure_logs()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_asset", function()
		local result = service.create_asset()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_packaging_configuration", function()
		local result = service.create_packaging_configuration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with create_packaging_group", function()
		local result = service.create_packaging_group()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_asset", function()
		local result = service.delete_asset()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_packaging_configuration", function()
		local result = service.delete_packaging_configuration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with delete_packaging_group", function()
		local result = service.delete_packaging_group()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_asset", function()
		local result = service.describe_asset()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_packaging_configuration", function()
		local result = service.describe_packaging_configuration()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with describe_packaging_group", function()
		local result = service.describe_packaging_group()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_assets", function()
		local result = service.list_assets()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_packaging_configurations", function()
		local result = service.list_packaging_configurations()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_packaging_groups", function()
		local result = service.list_packaging_groups()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with list_tags_for_resource", function()
		local result = service.list_tags_for_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with tag_resource", function()
		local result = service.tag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with untag_resource", function()
		local result = service.untag_resource()
		assert.is_true(result.success)
	end)
	it("should generate a cli skeleton with update_packaging_group", function()
		local result = service.update_packaging_group()
		assert.is_true(result.success)
	end)
end)